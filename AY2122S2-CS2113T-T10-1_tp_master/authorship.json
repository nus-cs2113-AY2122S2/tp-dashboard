[{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"froststein"},"content":"    mainClassName \u003d \"seedu.splitlah.SplitLah\"","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"froststein"},"content":"    archiveBaseName \u003d \"splitlah\"","lastModifiedDate":"2022-03-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.23\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"warrencxw"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2022-03-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"warrencxw":1,"-":44,"froststein":2}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# About us","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"Display |   Name   |               Github Profile                | Portfolio ","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":"--------|:--------:|:-------------------------------------------:|:---------:","lastModifiedDate":"2022-03-03"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) |   Ivan   | [Github](https://github.com/ivanaitzliddat) | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2022-03-03"},{"lineNumber":6,"author":{"gitId":"lelerer"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ren Tianle  |  [Github](https://github.com/lelerer)    | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2022-03-03"},{"lineNumber":7,"author":{"gitId":"matheril"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Saurav  |    [Github](https://github.com/matheril)    | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2022-03-03"},{"lineNumber":8,"author":{"gitId":"froststein"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Roy Tang |        [Github](https://github.com/froststein)        | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2022-03-03"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Warren Chong Xu Wei |   [Github](https://github.com/warrencxw)    | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2022-03-03"}],"authorContributionMap":{"ivanaitzliddat":2,"lelerer":1,"warrencxw":1,"-":3,"froststein":1,"matheril":1}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Developer Guide","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"froststein"},"content":"## Contents","lastModifiedDate":"2022-03-13"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"* [Acknowledgements](#acknowledgements)","lastModifiedDate":"2022-03-13"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":"* [Design](#design)","lastModifiedDate":"2022-03-13"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"    * [Architecture](#architecture)","lastModifiedDate":"2022-03-13"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":"    * [Manager Component](#manager-component)","lastModifiedDate":"2022-03-13"},{"lineNumber":7,"author":{"gitId":"froststein"},"content":"    * [Profile Component](#profile-component)","lastModifiedDate":"2022-03-13"},{"lineNumber":8,"author":{"gitId":"froststein"},"content":"    * [TextUI Component](#textui-component)","lastModifiedDate":"2022-03-13"},{"lineNumber":9,"author":{"gitId":"froststein"},"content":"    * [Storage Component](#storage-component)","lastModifiedDate":"2022-03-13"},{"lineNumber":10,"author":{"gitId":"froststein"},"content":"    * [Parser Component](#parser-component)","lastModifiedDate":"2022-03-13"},{"lineNumber":11,"author":{"gitId":"froststein"},"content":"    * [Command Component](#command-component)","lastModifiedDate":"2022-03-13"},{"lineNumber":12,"author":{"gitId":"froststein"},"content":"* Implementation","lastModifiedDate":"2022-03-13"},{"lineNumber":13,"author":{"gitId":"froststein"},"content":"    * [Add a session](#add-a-session)","lastModifiedDate":"2022-03-15"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":"    * [Remove a session](#remove-a-session)","lastModifiedDate":"2022-03-15"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":"    * [View a session](#view-a-session)","lastModifiedDate":"2022-03-15"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":"    * [List all sessions](#list-sessions)","lastModifiedDate":"2022-03-15"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":"    * [Settle a session](#settle-a-session)","lastModifiedDate":"2022-03-15"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"    * [Add an activity](#add-an-activity)","lastModifiedDate":"2022-03-15"},{"lineNumber":19,"author":{"gitId":"froststein"},"content":"    * [Remove an activity](#remove-an-activity)","lastModifiedDate":"2022-03-15"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"    * [View an activity](#view-an-activity)","lastModifiedDate":"2022-03-15"},{"lineNumber":21,"author":{"gitId":"froststein"},"content":"    * [List all activities](#list-activities)","lastModifiedDate":"2022-03-15"},{"lineNumber":22,"author":{"gitId":"froststein"},"content":"    * [Add a group](#add-a-group)","lastModifiedDate":"2022-03-15"},{"lineNumber":23,"author":{"gitId":"froststein"},"content":"    * [Remove a group](#remove-a-group)","lastModifiedDate":"2022-03-15"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"    * [View a group](#view-a-group)","lastModifiedDate":"2022-03-15"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"    * [List all groups](#list-groups)","lastModifiedDate":"2022-03-15"},{"lineNumber":26,"author":{"gitId":"froststein"},"content":"* [Project Scope](#product-scope)","lastModifiedDate":"2022-03-13"},{"lineNumber":27,"author":{"gitId":"froststein"},"content":"* [User Stories](#user-stories)","lastModifiedDate":"2022-03-13"},{"lineNumber":28,"author":{"gitId":"froststein"},"content":"* [Non-Functional Requirements](#non-functional-requirements)","lastModifiedDate":"2022-03-13"},{"lineNumber":29,"author":{"gitId":"froststein"},"content":"* [Glossary](#glossary)","lastModifiedDate":"2022-03-13"},{"lineNumber":30,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"## Acknowledgements","lastModifiedDate":"2020-05-24"},{"lineNumber":33,"author":{"gitId":"froststein"},"content":"* Address Book (Level-3) - Provide samples of User Guide(UG) and Developer Guide(DG)","lastModifiedDate":"2022-03-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":35,"author":{"gitId":"froststein"},"content":"## Design","lastModifiedDate":"2022-03-13"},{"lineNumber":36,"author":{"gitId":"froststein"},"content":"### Architecture","lastModifiedDate":"2022-03-13"},{"lineNumber":37,"author":{"gitId":"froststein"},"content":"![Application Diagram Screenshot](https://raw.githubusercontent.com/AY2122s2-cs2113t-t10-1/tp/master/docs/images/developerguide/ArchitectureDiagram.drawio.png)","lastModifiedDate":"2022-03-13"},{"lineNumber":38,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":39,"author":{"gitId":"froststein"},"content":"The *Architecture Diagram* shown above illustrates the high-level design of the SplitLah application.","lastModifiedDate":"2022-03-13"},{"lineNumber":40,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":41,"author":{"gitId":"froststein"},"content":"**Overview of components**","lastModifiedDate":"2022-03-13"},{"lineNumber":42,"author":{"gitId":"froststein"},"content":"* `SplitLah [Main]`","lastModifiedDate":"2022-03-24"},{"lineNumber":43,"author":{"gitId":"froststein"},"content":"    * On app launch: Creates an instance of a `Manager` and runs the command loop.","lastModifiedDate":"2022-03-15"},{"lineNumber":44,"author":{"gitId":"froststein"},"content":"* `Manager`","lastModifiedDate":"2022-03-13"},{"lineNumber":45,"author":{"gitId":"froststein"},"content":"    * On creation: Initializes the Profile, TextUI and Storage components.","lastModifiedDate":"2022-03-13"},{"lineNumber":46,"author":{"gitId":"froststein"},"content":"    * On run: Loads data from `Storage`, receives user input from UI and uses `Parser` to parse user input into application.","lastModifiedDate":"2022-03-13"},{"lineNumber":47,"author":{"gitId":"froststein"},"content":"* `Profile`","lastModifiedDate":"2022-03-13"},{"lineNumber":48,"author":{"gitId":"froststein"},"content":"    * Handles cached data within run time of application. Manages and stores the list of `session` ","lastModifiedDate":"2022-03-13"},{"lineNumber":49,"author":{"gitId":"froststein"},"content":"      that were created by the user before storing it into `Storage`.","lastModifiedDate":"2022-03-13"},{"lineNumber":50,"author":{"gitId":"froststein"},"content":"* `TextUI`","lastModifiedDate":"2022-03-13"},{"lineNumber":51,"author":{"gitId":"froststein"},"content":"    * Handles UI operations of the application.","lastModifiedDate":"2022-03-13"},{"lineNumber":52,"author":{"gitId":"froststein"},"content":"* `Storage`","lastModifiedDate":"2022-03-13"},{"lineNumber":53,"author":{"gitId":"froststein"},"content":"    * Handles storage operations of the application.","lastModifiedDate":"2022-03-13"},{"lineNumber":54,"author":{"gitId":"froststein"},"content":"* `Parser`","lastModifiedDate":"2022-03-13"},{"lineNumber":55,"author":{"gitId":"froststein"},"content":"    * Handles input parsing and determines which command to run.","lastModifiedDate":"2022-03-13"},{"lineNumber":56,"author":{"gitId":"froststein"},"content":"* `Command`","lastModifiedDate":"2022-03-13"},{"lineNumber":57,"author":{"gitId":"froststein"},"content":"    * Defines how a command is executed.","lastModifiedDate":"2022-03-13"},{"lineNumber":58,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":59,"author":{"gitId":"froststein"},"content":"**Interaction between components**","lastModifiedDate":"2022-03-13"},{"lineNumber":60,"author":{"gitId":"froststein"},"content":"![Component Interaction Screenshot](https://raw.githubusercontent.com/AY2122s2-cs2113t-t10-1/tp/master/docs/images/developerguide/ComponentInteraction.drawio.png)","lastModifiedDate":"2022-03-15"},{"lineNumber":61,"author":{"gitId":"froststein"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-15"},{"lineNumber":62,"author":{"gitId":"froststein"},"content":"The *Component Interaction Diagram* shows the inner workings of how each component in SplitLah interacts.","lastModifiedDate":"2022-03-19"},{"lineNumber":63,"author":{"gitId":"froststein"},"content":"The diagram depicts a scenario when a user attempts to create a session.","lastModifiedDate":"2022-03-19"},{"lineNumber":64,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":65,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":66,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":67,"author":{"gitId":"froststein"},"content":"### SplitLah Component","lastModifiedDate":"2022-03-24"},{"lineNumber":68,"author":{"gitId":"froststein"},"content":"![SplitLah Component Screenshot](https://raw.githubusercontent.com/AY2122s2-cs2113t-t10-1/tp/master/docs/images/developerguide/SplitLahComponent.drawio.png)","lastModifiedDate":"2022-03-24"},{"lineNumber":69,"author":{"gitId":"froststein"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-24"},{"lineNumber":70,"author":{"gitId":"froststein"},"content":"The `SplitLah` component is the application\u0027s main class. Its job is to initialize an instance of `Manager` when the","lastModifiedDate":"2022-03-24"},{"lineNumber":71,"author":{"gitId":"froststein"},"content":"application starts. After initialization, it would then proceed to run a loop which would prompt the user for a ","lastModifiedDate":"2022-03-24"},{"lineNumber":72,"author":{"gitId":"froststein"},"content":"command. When it receives a command from the user, it would invoke the `parser` and retrieve the command for SplitLah","lastModifiedDate":"2022-03-24"},{"lineNumber":73,"author":{"gitId":"froststein"},"content":"to run. Upon using the `Exit` command, SplitLah would then exit from the command loop and end the application.","lastModifiedDate":"2022-03-24"},{"lineNumber":74,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":75,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":76,"author":{"gitId":"froststein"},"content":"### Manager Component","lastModifiedDate":"2022-03-13"},{"lineNumber":77,"author":{"gitId":"froststein"},"content":"![Manager Component Screenshot](https://raw.githubusercontent.com/AY2122s2-cs2113t-t10-1/tp/master/docs/images/developerguide/ManagerComponent.drawio.png)","lastModifiedDate":"2022-03-13"},{"lineNumber":78,"author":{"gitId":"froststein"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-19"},{"lineNumber":79,"author":{"gitId":"froststein"},"content":"The `Manager` class is initialized by the `SplitLah` class (the main class) when the application starts.","lastModifiedDate":"2022-03-24"},{"lineNumber":80,"author":{"gitId":"froststein"},"content":"It stores the `Profile`, `TextUI` and `Storage` objects. The `Profile` class helps to manage all data accesses ","lastModifiedDate":"2022-03-19"},{"lineNumber":81,"author":{"gitId":"froststein"},"content":"throughout the lifetime of the application. While the `Storage` helps to save what the `Profile` class has captured. ","lastModifiedDate":"2022-03-19"},{"lineNumber":82,"author":{"gitId":"froststein"},"content":"The `TextUI` class serves as an interface to read user inputs and print application outputs.","lastModifiedDate":"2022-03-19"},{"lineNumber":83,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":84,"author":{"gitId":"froststein"},"content":"### Profile Component","lastModifiedDate":"2022-03-13"},{"lineNumber":85,"author":{"gitId":"warrencxw"},"content":"![Profile Component Screenshot](https://raw.githubusercontent.com/AY2122s2-cs2113t-t10-1/tp/master/docs/images/developerguide/Profile%20Component.drawio.png)","lastModifiedDate":"2022-03-22"},{"lineNumber":86,"author":{"gitId":"froststein"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-19"},{"lineNumber":87,"author":{"gitId":"froststein"},"content":"The `Profile` class holds the list of sessions and groups that have been created by the user. ","lastModifiedDate":"2022-03-19"},{"lineNumber":88,"author":{"gitId":"froststein"},"content":"It also tracks the unique identifier for `Session`, `Activity` and `Group` classes. The `Profile`","lastModifiedDate":"2022-03-19"},{"lineNumber":89,"author":{"gitId":"froststein"},"content":"class would return a unique identifier every time a new `Session`, `Activity` or `Group` is created. ","lastModifiedDate":"2022-03-19"},{"lineNumber":90,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":91,"author":{"gitId":"froststein"},"content":"### TextUI Component","lastModifiedDate":"2022-03-13"},{"lineNumber":92,"author":{"gitId":"matheril"},"content":"![TextUI Component Screenshot](https://raw.githubusercontent.com/AY2122s2-cs2113t-t10-1/tp/master/docs/images/developerguide/TextUI%20Component.drawio.png)","lastModifiedDate":"2022-03-24"},{"lineNumber":93,"author":{"gitId":"matheril"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-24"},{"lineNumber":94,"author":{"gitId":"matheril"},"content":"The `TextUI` class is initialized by the `Manager` class when the application starts.","lastModifiedDate":"2022-03-24"},{"lineNumber":95,"author":{"gitId":"matheril"},"content":"It stores a `Scanner` and `PrintStream` object supplied upon initialization to read and write to the user interface.","lastModifiedDate":"2022-03-24"},{"lineNumber":96,"author":{"gitId":"matheril"},"content":"It offers methods to print application output to and read user input from these objects for other classes to use.","lastModifiedDate":"2022-03-24"},{"lineNumber":97,"author":{"gitId":"matheril"},"content":"As TextUI handles all input and output streams, these streams can be changed without affecting the rest of the program.","lastModifiedDate":"2022-03-24"},{"lineNumber":98,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":99,"author":{"gitId":"froststein"},"content":"### Storage Component","lastModifiedDate":"2022-03-13"},{"lineNumber":100,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":101,"author":{"gitId":"froststein"},"content":"### Parser Component","lastModifiedDate":"2022-03-13"},{"lineNumber":102,"author":{"gitId":"warrencxw"},"content":"![Parser Component Screenshot](https://raw.githubusercontent.com/AY2122s2-cs2113t-t10-1/tp/master/docs/images/developerguide/ParserComponent.drawio.png)","lastModifiedDate":"2022-03-22"},{"lineNumber":103,"author":{"gitId":"warrencxw"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":104,"author":{"gitId":"warrencxw"},"content":"The `Parser` component consists of the `Parser` class, `ParserUtils` class as well as the `ParserErrors` class.\u003cbr\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":105,"author":{"gitId":"warrencxw"},"content":"The `Parser` class provides utility methods to parse commands and arguments from the user and","lastModifiedDate":"2022-03-22"},{"lineNumber":106,"author":{"gitId":"warrencxw"},"content":"return a `Command` object representing an instruction that the user has for SplitLah.","lastModifiedDate":"2022-03-22"},{"lineNumber":107,"author":{"gitId":"warrencxw"},"content":"`Parser` class is the only class in the `Parser` component that other external classes interact with.\u003cbr\u003e","lastModifiedDate":"2022-03-22"},{"lineNumber":108,"author":{"gitId":"warrencxw"},"content":"On the other hand, the `ParserUtils` class provide supporting methods for `Parser` class to properly run,","lastModifiedDate":"2022-03-22"},{"lineNumber":109,"author":{"gitId":"warrencxw"},"content":"and `ParserErrors` class provide methods to produce custom error messages for the `Parser` component.","lastModifiedDate":"2022-03-22"},{"lineNumber":110,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":111,"author":{"gitId":"warrencxw"},"content":"The general workflow of the `Parser` component is as follows:","lastModifiedDate":"2022-03-22"},{"lineNumber":112,"author":{"gitId":"warrencxw"},"content":"1. When required to parse for a command, the running `SplitLah` object will pass a String object containing","lastModifiedDate":"2022-03-24"},{"lineNumber":113,"author":{"gitId":"warrencxw"},"content":"   the user input to `Parser` class.","lastModifiedDate":"2022-03-24"},{"lineNumber":114,"author":{"gitId":"warrencxw"},"content":"2. `Parser` class instantiates a new `XYZCommandParser` object corresponding to the user input ","lastModifiedDate":"2022-03-24"},{"lineNumber":115,"author":{"gitId":"warrencxw"},"content":"   and passes the user input to it.","lastModifiedDate":"2022-03-24"},{"lineNumber":116,"author":{"gitId":"warrencxw"},"content":"   (`XYZCommand` is a placeholder for specific subclass of the `Command` class, e.g. `SessionCreateCommand`)","lastModifiedDate":"2022-03-22"},{"lineNumber":117,"author":{"gitId":"warrencxw"},"content":"3. The `XYZCommandParser` object will then use parse methods from `Parser` class to extract all the","lastModifiedDate":"2022-03-24"},{"lineNumber":118,"author":{"gitId":"warrencxw"},"content":"   arguments from the user input.","lastModifiedDate":"2022-03-24"},{"lineNumber":119,"author":{"gitId":"warrencxw"},"content":"   1. Each of these parse methods in `Parser` class then calls utility methods from `ParserUtils` class","lastModifiedDate":"2022-03-24"},{"lineNumber":120,"author":{"gitId":"warrencxw"},"content":"      to return a parsed value.","lastModifiedDate":"2022-03-24"},{"lineNumber":121,"author":{"gitId":"warrencxw"},"content":"4. All relevant arguments that are parsed will then be used to create a new `XYZCommand `object which is","lastModifiedDate":"2022-03-24"},{"lineNumber":122,"author":{"gitId":"warrencxw"},"content":"   then returned to the `Parser` class.","lastModifiedDate":"2022-03-24"},{"lineNumber":123,"author":{"gitId":"warrencxw"},"content":"5. The created `XYZCommand` object is then returned to the `SplitLah` object to be run.","lastModifiedDate":"2022-03-24"},{"lineNumber":124,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":125,"author":{"gitId":"froststein"},"content":"### Command Component","lastModifiedDate":"2022-03-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":127,"author":{"gitId":"froststein"},"content":"## Implementation","lastModifiedDate":"2022-03-15"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":129,"author":{"gitId":"warrencxw"},"content":"### Parsing of Commands","lastModifiedDate":"2022-03-24"},{"lineNumber":130,"author":{"gitId":"warrencxw"},"content":"**API reference:** [`Parser.java`](https://github.com/AY2122S2-CS2113T-T10-1/tp/blob/master/src/main/java/seedu/splitlah/parser/Parser.java)","lastModifiedDate":"2022-03-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":132,"author":{"gitId":"warrencxw"},"content":"The sequence diagram below models the interactions between various entities within the Parser component and","lastModifiedDate":"2022-03-24"},{"lineNumber":133,"author":{"gitId":"warrencxw"},"content":"the Command component when any user input is provided to SplitLah.","lastModifiedDate":"2022-03-24"},{"lineNumber":134,"author":{"gitId":"warrencxw"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-24"},{"lineNumber":135,"author":{"gitId":"warrencxw"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-24"},{"lineNumber":136,"author":{"gitId":"warrencxw"},"content":"![Reference Frame Parser Sequence Diagram](https://raw.githubusercontent.com/AY2122s2-cs2113t-t10-1/tp/master/docs/images/developerguide/RefParser.drawio.png)","lastModifiedDate":"2022-03-24"},{"lineNumber":137,"author":{"gitId":"warrencxw"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-24"},{"lineNumber":138,"author":{"gitId":"warrencxw"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-24"},{"lineNumber":139,"author":{"gitId":"warrencxw"},"content":"1. When `SplitLah` reads a user input, `SplitLah` will call the `Parser#getCommand` method and pass the","lastModifiedDate":"2022-03-24"},{"lineNumber":140,"author":{"gitId":"warrencxw"},"content":"   user input as the argument.","lastModifiedDate":"2022-03-24"},{"lineNumber":141,"author":{"gitId":"warrencxw"},"content":"2. Given the user input, `Parser` class first decomposes the user input into two separate components, the command type","lastModifiedDate":"2022-03-24"},{"lineNumber":142,"author":{"gitId":"warrencxw"},"content":"   and the remaining arguments.","lastModifiedDate":"2022-03-24"},{"lineNumber":143,"author":{"gitId":"warrencxw"},"content":"   This is done using the two methods `Parser#getCommandType` and `Parser#getRemainingArguments` respectively.\u003cbr\u003e","lastModifiedDate":"2022-03-24"},{"lineNumber":144,"author":{"gitId":"warrencxw"},"content":"   Where the input is `session /create /n Class Outing /d 15-03-2022 /pl Alice Bob`, the command type will be","lastModifiedDate":"2022-03-24"},{"lineNumber":145,"author":{"gitId":"warrencxw"},"content":"   `session /create` and the remaining arguments would be `/n Class Outing /d 15-03-2022 /pl Alice Bob`.","lastModifiedDate":"2022-03-24"},{"lineNumber":146,"author":{"gitId":"warrencxw"},"content":"   1. If the command type is of invalid syntax, the method `Parser#getCommandType` returns null.","lastModifiedDate":"2022-03-24"},{"lineNumber":147,"author":{"gitId":"warrencxw"},"content":"      If the command type is null, `Parser` class creates and returns an `InvalidCommand` object to `SplitLah`.","lastModifiedDate":"2022-03-24"},{"lineNumber":148,"author":{"gitId":"warrencxw"},"content":"   2. Next, to check whether the command type and remaining arguments are valid, `Parser` class calls the method","lastModifiedDate":"2022-03-24"},{"lineNumber":149,"author":{"gitId":"warrencxw"},"content":"      `Parser#checkIfCommandIsValid`. If either command type or remaining arguments are invalid, an error","lastModifiedDate":"2022-03-24"},{"lineNumber":150,"author":{"gitId":"warrencxw"},"content":"      message is returned by the method, which is then used to return an `InvalidCommand` object to `SplitLah`.","lastModifiedDate":"2022-03-24"},{"lineNumber":151,"author":{"gitId":"warrencxw"},"content":"3. Depending on the command type, `Parser` class instantiates an appropriate `XYZCommandParser` object. For example,","lastModifiedDate":"2022-03-24"},{"lineNumber":152,"author":{"gitId":"warrencxw"},"content":"   for a command type of `\"session /create\"` a `SessionCreateCommandParser` object is instantiated.","lastModifiedDate":"2022-03-24"},{"lineNumber":153,"author":{"gitId":"warrencxw"},"content":"   If `Parser` class does not recognise the command type, an `InvalidCommand` object is created and returned immediately.","lastModifiedDate":"2022-03-24"},{"lineNumber":154,"author":{"gitId":"warrencxw"},"content":"4. With the corresponding `XYZCommandParser` object instantiated, `Parser` class will call the `getCommand` method","lastModifiedDate":"2022-03-24"},{"lineNumber":155,"author":{"gitId":"warrencxw"},"content":"   of `XYZCommandParser`. This process will be explained in further detail in the sequence diagrams below.","lastModifiedDate":"2022-03-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":157,"author":{"gitId":"warrencxw"},"content":"![Reference Frame Command Parser Sequence Diagram](https://raw.githubusercontent.com/AY2122s2-cs2113t-t10-1/tp/master/docs/images/developerguide/RefCommandParser.drawio.png)","lastModifiedDate":"2022-03-24"},{"lineNumber":158,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":159,"author":{"gitId":"warrencxw"},"content":"![Reference Frame ParseABC Sequence Diagram](https://raw.githubusercontent.com/AY2122s2-cs2113t-t10-1/tp/master/docs/images/developerguide/RefParseABC.drawio.png)","lastModifiedDate":"2022-03-24"},{"lineNumber":160,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":161,"author":{"gitId":"warrencxw"},"content":"![Reference Frame InvalidCommand Instantiation Sequence Diagram](https://raw.githubusercontent.com/AY2122s2-cs2113t-t10-1/tp/master/docs/images/developerguide/RefInvalidCommand.drawio.png)","lastModifiedDate":"2022-03-24"},{"lineNumber":162,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":163,"author":{"gitId":"warrencxw"},"content":"5. After `XYZCommandParser#getCommand` is called, `XYZCommandParser` will prepare to create a `XYZCommand` object. ","lastModifiedDate":"2022-03-24"},{"lineNumber":164,"author":{"gitId":"warrencxw"},"content":"   To begin with, it will parse all the remaining arguments using `ParseABC` methods from the `Parser` class.","lastModifiedDate":"2022-03-24"},{"lineNumber":165,"author":{"gitId":"warrencxw"},"content":"   (`ParseABC` is a placeholder for specific methods in `Parser` class, ","lastModifiedDate":"2022-03-24"},{"lineNumber":166,"author":{"gitId":"warrencxw"},"content":"   e.g. `Parser#parseName` and `Parser#parseSessionId`)","lastModifiedDate":"2022-03-24"},{"lineNumber":167,"author":{"gitId":"warrencxw"},"content":"   * For example, `SessionCreateCommandParser` has to call `parsePersonList`, `parseGroupId`, `parseName` and","lastModifiedDate":"2022-03-24"},{"lineNumber":168,"author":{"gitId":"warrencxw"},"content":"      `parseLocalDate` from `Parser` class in order to get the details to create a `Session` object.","lastModifiedDate":"2022-03-24"},{"lineNumber":169,"author":{"gitId":"warrencxw"},"content":"   * If an exception is encountered, `XYZCommandParser` will handle the exception accordingly, and if necessary,","lastModifiedDate":"2022-03-24"},{"lineNumber":170,"author":{"gitId":"warrencxw"},"content":"      throw an exception back to `Parser` class, resulting in an `InvalidCommand` object being created and returned.","lastModifiedDate":"2022-03-24"},{"lineNumber":171,"author":{"gitId":"warrencxw"},"content":"6. In detail, when `Parser#parseABC` is called, `Parser` class will call the method `getArgumentFromDelimiter` from","lastModifiedDate":"2022-03-24"},{"lineNumber":172,"author":{"gitId":"warrencxw"},"content":"   `ParserUtils` class, which will return the respective object being parsed.","lastModifiedDate":"2022-03-24"},{"lineNumber":173,"author":{"gitId":"warrencxw"},"content":"   * For example, when `SessionCreateCommandParser` calls `Parser#parsePersonList`,","lastModifiedDate":"2022-03-24"},{"lineNumber":174,"author":{"gitId":"warrencxw"},"content":"      `ParserUtils#getArgumentFromDelimiter` is called. After returning a `String` object containing the arguments to","lastModifiedDate":"2022-03-24"},{"lineNumber":175,"author":{"gitId":"warrencxw"},"content":"      `Parser` class, `Parser` class returns a `String[]` object to `SessionCreateCommandParser` after processing the","lastModifiedDate":"2022-03-24"},{"lineNumber":176,"author":{"gitId":"warrencxw"},"content":"      arguments.","lastModifiedDate":"2022-03-24"},{"lineNumber":177,"author":{"gitId":"warrencxw"},"content":"   * Any exception encountered by `ParserUtils` class is propagated back to `XYZCommandParser` to be handled.","lastModifiedDate":"2022-03-24"},{"lineNumber":178,"author":{"gitId":"warrencxw"},"content":"7. After all necessary information is parsed, `XYZCommandParser` instantiates a new `XYZCommand` object and passes","lastModifiedDate":"2022-03-24"},{"lineNumber":179,"author":{"gitId":"warrencxw"},"content":"   all parsed information to it through the constructor.","lastModifiedDate":"2022-03-24"},{"lineNumber":180,"author":{"gitId":"warrencxw"},"content":"8. The newly instantiated `XYZCommand` object is then returned from `XYZCommandParser` to `Parser` class,","lastModifiedDate":"2022-03-24"},{"lineNumber":181,"author":{"gitId":"warrencxw"},"content":"   and finally back to `SplitLah` to be run.","lastModifiedDate":"2022-03-24"},{"lineNumber":182,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":183,"author":{"gitId":"froststein"},"content":"### Add a session","lastModifiedDate":"2022-03-15"},{"lineNumber":184,"author":{"gitId":"froststein"},"content":"**API reference:** [`SessionCreateCommand.java`](https://github.com/AY2122S2-CS2113T-T10-1/tp/blob/master/src/main/java/seedu/splitlah/command/SessionCreateCommand.java)","lastModifiedDate":"2022-03-24"},{"lineNumber":185,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":186,"author":{"gitId":"froststein"},"content":"The sequence diagram below models the interactions between various entities in the system","lastModifiedDate":"2022-03-24"},{"lineNumber":187,"author":{"gitId":"froststein"},"content":"when the user invokes the `session /create` command.","lastModifiedDate":"2022-03-24"},{"lineNumber":188,"author":{"gitId":"froststein"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-24"},{"lineNumber":189,"author":{"gitId":"froststein"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-24"},{"lineNumber":190,"author":{"gitId":"froststein"},"content":"![Create Session Sequence Diagram Screenshot](https://raw.githubusercontent.com/AY2122s2-cs2113t-t10-1/tp/master/docs/images/developerguide/SessionCreateCommand.drawio.png)","lastModifiedDate":"2022-03-24"},{"lineNumber":191,"author":{"gitId":"froststein"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-24"},{"lineNumber":192,"author":{"gitId":"froststein"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-24"},{"lineNumber":193,"author":{"gitId":"froststein"},"content":"The general workflow of the `session /create` command is as follows:","lastModifiedDate":"2022-03-24"},{"lineNumber":194,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":195,"author":{"gitId":"froststein"},"content":"### Remove a session","lastModifiedDate":"2022-03-15"},{"lineNumber":196,"author":{"gitId":"froststein"},"content":"### View a session","lastModifiedDate":"2022-03-15"},{"lineNumber":197,"author":{"gitId":"froststein"},"content":"### List sessions","lastModifiedDate":"2022-03-15"},{"lineNumber":198,"author":{"gitId":"froststein"},"content":"**API reference:** [`SessionListCommand.java`](https://github.com/AY2122S2-CS2113T-T10-1/tp/blob/master/src/main/java/seedu/splitlah/command/SessionListCommand.java)","lastModifiedDate":"2022-03-24"},{"lineNumber":199,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":200,"author":{"gitId":"froststein"},"content":"The sequence diagram below models the interactions between various entities in the system","lastModifiedDate":"2022-03-24"},{"lineNumber":201,"author":{"gitId":"froststein"},"content":"when the user invokes the `session /list` command.","lastModifiedDate":"2022-03-24"},{"lineNumber":202,"author":{"gitId":"froststein"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-24"},{"lineNumber":203,"author":{"gitId":"froststein"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-24"},{"lineNumber":204,"author":{"gitId":"froststein"},"content":"![List Sessions Sequence Diagram Screenshot](https://raw.githubusercontent.com/AY2122s2-cs2113t-t10-1/tp/master/docs/images/developerguide/SessionListCommand.drawio.png)","lastModifiedDate":"2022-03-24"},{"lineNumber":205,"author":{"gitId":"froststein"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-24"},{"lineNumber":206,"author":{"gitId":"froststein"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-24"},{"lineNumber":207,"author":{"gitId":"froststein"},"content":"The general workflow of the `session /list` command is as follows:","lastModifiedDate":"2022-03-24"},{"lineNumber":208,"author":{"gitId":"froststein"},"content":"1. The user input provided is passed to `Splitlah`.","lastModifiedDate":"2022-03-24"},{"lineNumber":209,"author":{"gitId":"froststein"},"content":"2. `Splitlah` then parses the input by using methods in the `Parser` class to obtain a `SessionListCommand` object.","lastModifiedDate":"2022-03-24"},{"lineNumber":210,"author":{"gitId":"froststein"},"content":"3. `SessionListCommand#run` method is then invoked to run the `session /list` command.","lastModifiedDate":"2022-03-24"},{"lineNumber":211,"author":{"gitId":"froststein"},"content":"4. The list of sessions are stored in a `Profile` object, hence `Manager#getProfile` is called.","lastModifiedDate":"2022-03-24"},{"lineNumber":212,"author":{"gitId":"froststein"},"content":"5. To retrieve the sessions from profile, `Profile#getSessionList` is executed,","lastModifiedDate":"2022-03-24"},{"lineNumber":213,"author":{"gitId":"froststein"},"content":"   where a list of `Session` objects are returned.","lastModifiedDate":"2022-03-24"},{"lineNumber":214,"author":{"gitId":"froststein"},"content":"6. Once the list is retrieved, `SessionListCommand` class checks if the list is empty.","lastModifiedDate":"2022-03-24"},{"lineNumber":215,"author":{"gitId":"froststein"},"content":"  1. If the list is empty, a message indicating that the list is empty is printed","lastModifiedDate":"2022-03-24"},{"lineNumber":216,"author":{"gitId":"froststein"},"content":"     using `TextUi#printlnMessage`.","lastModifiedDate":"2022-03-24"},{"lineNumber":217,"author":{"gitId":"froststein"},"content":"  2. If the list is not empty, `SessionListCommand` will loop from the first to the second last session,","lastModifiedDate":"2022-03-24"},{"lineNumber":218,"author":{"gitId":"froststein"},"content":"     calling `TextUi#printlnMessage()` to print out a brief overview of each session.","lastModifiedDate":"2022-03-24"},{"lineNumber":219,"author":{"gitId":"froststein"},"content":"     Then, the last group is printed with a divider below it, using the method `TextUi#printlnMessageWithDivider()`.","lastModifiedDate":"2022-03-24"},{"lineNumber":220,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":221,"author":{"gitId":"froststein"},"content":"### Settle a session","lastModifiedDate":"2022-03-15"},{"lineNumber":222,"author":{"gitId":"froststein"},"content":"### Add an activity","lastModifiedDate":"2022-03-15"},{"lineNumber":223,"author":{"gitId":"froststein"},"content":"### Remove an activity","lastModifiedDate":"2022-03-15"},{"lineNumber":224,"author":{"gitId":"froststein"},"content":"### View an activity","lastModifiedDate":"2022-03-15"},{"lineNumber":225,"author":{"gitId":"froststein"},"content":"### List activities","lastModifiedDate":"2022-03-15"},{"lineNumber":226,"author":{"gitId":"froststein"},"content":"### Add a group","lastModifiedDate":"2022-03-15"},{"lineNumber":227,"author":{"gitId":"lelerer"},"content":"**API reference:** [`GroupCreateCommand.java`](https://github.com/AY2122S2-CS2113T-T10-1/tp/blob/master/src/main/java/seedu/splitlah/command/GroupCreateCommand.java)","lastModifiedDate":"2022-03-24"},{"lineNumber":228,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":229,"author":{"gitId":"lelerer"},"content":"The sequence diagram below models the interactions between various entities in the system","lastModifiedDate":"2022-03-24"},{"lineNumber":230,"author":{"gitId":"lelerer"},"content":"when the user invokes the `group /create` command.","lastModifiedDate":"2022-03-24"},{"lineNumber":231,"author":{"gitId":"lelerer"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-24"},{"lineNumber":232,"author":{"gitId":"lelerer"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-24"},{"lineNumber":233,"author":{"gitId":"lelerer"},"content":"![Create Group Sequence Diagram Screenshot](https://raw.githubusercontent.com/AY2122s2-cs2113t-t10-1/tp/master/docs/images/developerguide/GroupCreateCommand.drawio.png)","lastModifiedDate":"2022-03-24"},{"lineNumber":234,"author":{"gitId":"lelerer"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-24"},{"lineNumber":235,"author":{"gitId":"lelerer"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-24"},{"lineNumber":236,"author":{"gitId":"lelerer"},"content":"The general workflow of the `group /create` command is as follows:","lastModifiedDate":"2022-03-24"},{"lineNumber":237,"author":{"gitId":"lelerer"},"content":"1. The user input provided is passed to `Splitlah`.","lastModifiedDate":"2022-03-24"},{"lineNumber":238,"author":{"gitId":"lelerer"},"content":"2. `Splitlah` then parses the input by using methods in the `Parser` class to obtain a `GroupCreateCommand` object.","lastModifiedDate":"2022-03-24"},{"lineNumber":239,"author":{"gitId":"lelerer"},"content":"3. A `GroupCreateCommand#run` method is then invoked to run the group /create command.","lastModifiedDate":"2022-03-24"},{"lineNumber":240,"author":{"gitId":"lelerer"},"content":"4. Once the command starts to run, `GroupCreateCommand`class checks if there are duplicates in the name list.","lastModifiedDate":"2022-03-24"},{"lineNumber":241,"author":{"gitId":"lelerer"},"content":"5. If there are duplicates, a message indicating that name list contains duplicates is printed using `TextUi#printlnMessage`. ","lastModifiedDate":"2022-03-24"},{"lineNumber":242,"author":{"gitId":"lelerer"},"content":"6. If there are no duplicates, `GroupCreateCommand` class converts each of the names into a `Person` object.","lastModifiedDate":"2022-03-24"},{"lineNumber":243,"author":{"gitId":"lelerer"},"content":"7. `GroupCreateCommand` class then checks if there is an existing group with the same group name. ","lastModifiedDate":"2022-03-24"},{"lineNumber":244,"author":{"gitId":"lelerer"},"content":"8. If existing groups with the group name are found, a message indicating that another group with the same name is printed using `TextUi#printlnMessage`.","lastModifiedDate":"2022-03-24"},{"lineNumber":245,"author":{"gitId":"lelerer"},"content":"9. `GroupCreateCommand` class create a new `Group` object using the group name, name list, and groupId. ","lastModifiedDate":"2022-03-24"},{"lineNumber":246,"author":{"gitId":"lelerer"},"content":"10. The list of `Group` objects are managed by a `Profile` object, hence `Manager#getProfile#addGroup` is called to store the new Group object in the Profile.","lastModifiedDate":"2022-03-24"},{"lineNumber":247,"author":{"gitId":"lelerer"},"content":"11. The `GroupCreateCommand` class then prints a message indicating that a group has been successfully created.","lastModifiedDate":"2022-03-24"},{"lineNumber":248,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":249,"author":{"gitId":"froststein"},"content":"### Remove a group","lastModifiedDate":"2022-03-15"},{"lineNumber":250,"author":{"gitId":"froststein"},"content":"### View a group","lastModifiedDate":"2022-03-15"},{"lineNumber":251,"author":{"gitId":"froststein"},"content":"### List groups","lastModifiedDate":"2022-03-15"},{"lineNumber":252,"author":{"gitId":"ivanaitzliddat"},"content":"**API reference:** [`GroupListCommand.java`](https://github.com/AY2122S2-CS2113T-T10-1/tp/blob/master/src/main/java/seedu/splitlah/command/GroupListCommand.java)","lastModifiedDate":"2022-03-23"},{"lineNumber":253,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":254,"author":{"gitId":"ivanaitzliddat"},"content":"The sequence diagram below models the interactions between various entities in the system","lastModifiedDate":"2022-03-23"},{"lineNumber":255,"author":{"gitId":"ivanaitzliddat"},"content":"when the user invokes the `group /list` command.","lastModifiedDate":"2022-03-23"},{"lineNumber":256,"author":{"gitId":"ivanaitzliddat"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-23"},{"lineNumber":257,"author":{"gitId":"ivanaitzliddat"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-23"},{"lineNumber":258,"author":{"gitId":"ivanaitzliddat"},"content":"![List Groups Sequence Diagram Screenshot](https://raw.githubusercontent.com/AY2122s2-cs2113t-t10-1/tp/master/docs/images/developerguide/GroupListCommand.drawio.png)","lastModifiedDate":"2022-03-23"},{"lineNumber":259,"author":{"gitId":"ivanaitzliddat"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-23"},{"lineNumber":260,"author":{"gitId":"ivanaitzliddat"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-23"},{"lineNumber":261,"author":{"gitId":"ivanaitzliddat"},"content":"The general workflow of the `group /list` command is as follows:","lastModifiedDate":"2022-03-23"},{"lineNumber":262,"author":{"gitId":"ivanaitzliddat"},"content":"1. The user input provided is passed to `Splitlah`.","lastModifiedDate":"2022-03-23"},{"lineNumber":263,"author":{"gitId":"ivanaitzliddat"},"content":"2. `Splitlah` then parses the input by using methods in the `Parser` class to obtain a `GroupListCommand` object.","lastModifiedDate":"2022-03-23"},{"lineNumber":264,"author":{"gitId":"ivanaitzliddat"},"content":"3. `GroupListCommand#run()` method is then invoked to run the `group /list` command.","lastModifiedDate":"2022-03-23"},{"lineNumber":265,"author":{"gitId":"ivanaitzliddat"},"content":"4. The list of groups are stored in a `Profile` object, hence `Manager#getProfile()` is called","lastModifiedDate":"2022-03-23"},{"lineNumber":266,"author":{"gitId":"ivanaitzliddat"},"content":"before the list of groups can be retrieved.","lastModifiedDate":"2022-03-23"},{"lineNumber":267,"author":{"gitId":"ivanaitzliddat"},"content":"5. To retrieve the groups from the profile retrieved, `Profile#getGroupList()` method is executed,","lastModifiedDate":"2022-03-23"},{"lineNumber":268,"author":{"gitId":"ivanaitzliddat"},"content":"where a list of `Group` objects are returned.","lastModifiedDate":"2022-03-23"},{"lineNumber":269,"author":{"gitId":"ivanaitzliddat"},"content":"6. Once the list is retrieved, `GroupListCommand` class checks if the list is empty.","lastModifiedDate":"2022-03-23"},{"lineNumber":270,"author":{"gitId":"ivanaitzliddat"},"content":"   1. If the list is empty, a message indicating that the list is empty is printed","lastModifiedDate":"2022-03-23"},{"lineNumber":271,"author":{"gitId":"ivanaitzliddat"},"content":"   using the method `TextUi#printlnMessage()`.","lastModifiedDate":"2022-03-23"},{"lineNumber":272,"author":{"gitId":"ivanaitzliddat"},"content":"   2. If the list is not empty, `GroupListCommand` will loop from the first to the second last group, ","lastModifiedDate":"2022-03-23"},{"lineNumber":273,"author":{"gitId":"ivanaitzliddat"},"content":"   calling `TextUi#printlnMessage()` to print out the summary of each group.","lastModifiedDate":"2022-03-23"},{"lineNumber":274,"author":{"gitId":"ivanaitzliddat"},"content":"   Then, the last group is printed with a divider below it, using the method `TextUi#printlnMessageWithDivider()`.","lastModifiedDate":"2022-03-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":276,"author":{"gitId":"-"},"content":"## Product scope","lastModifiedDate":"2020-05-24"},{"lineNumber":277,"author":{"gitId":"-"},"content":"### Target user profile","lastModifiedDate":"2020-05-24"},{"lineNumber":278,"author":{"gitId":"froststein"},"content":"* Budget conscious.","lastModifiedDate":"2022-03-15"},{"lineNumber":279,"author":{"gitId":"froststein"},"content":"* Prefers to use desktop applications over other types of applications.","lastModifiedDate":"2022-03-15"},{"lineNumber":280,"author":{"gitId":"froststein"},"content":"* Are able to type relatively fast.","lastModifiedDate":"2022-03-15"},{"lineNumber":281,"author":{"gitId":"froststein"},"content":"* Comfortable using CLI applications.","lastModifiedDate":"2022-03-15"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":283,"author":{"gitId":"-"},"content":"### Value proposition","lastModifiedDate":"2020-05-24"},{"lineNumber":284,"author":{"gitId":"froststein"},"content":"SplitLah will help the user keep track of expenditures made during each group outing that they go on and help the user ","lastModifiedDate":"2022-03-15"},{"lineNumber":285,"author":{"gitId":"froststein"},"content":"calculate what transactions that they should make in order to ensure that everyone pays equally for the activities that ","lastModifiedDate":"2022-03-15"},{"lineNumber":286,"author":{"gitId":"froststein"},"content":"they engage in during the outings.","lastModifiedDate":"2022-03-15"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":288,"author":{"gitId":"-"},"content":"## User Stories","lastModifiedDate":"2020-05-24"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":290,"author":{"gitId":"froststein"},"content":"| Version | As a ...              | I want to ...                        | So that I can ...                                                           |","lastModifiedDate":"2022-03-19"},{"lineNumber":291,"author":{"gitId":"froststein"},"content":"|---------|-----------------------|--------------------------------------|-----------------------------------------------------------------------------|","lastModifiedDate":"2022-03-19"},{"lineNumber":292,"author":{"gitId":"froststein"},"content":"| v1.0    | New user              | see usage instructions               | refer to them when I forget how to use the application                      |","lastModifiedDate":"2022-03-19"},{"lineNumber":293,"author":{"gitId":"froststein"},"content":"| v1.0    | Budget conscious user | create sessions                      | record the transactions of the outing                                       |","lastModifiedDate":"2022-03-19"},{"lineNumber":294,"author":{"gitId":"froststein"},"content":"| v1.0    | Budget conscious user | create activities                    | able to track the expenditure for each activity                             |","lastModifiedDate":"2022-03-19"},{"lineNumber":295,"author":{"gitId":"froststein"},"content":"| v1.0    | Budget conscious user | view an existing session             | view the full details of a session previously created                       |","lastModifiedDate":"2022-03-19"},{"lineNumber":296,"author":{"gitId":"froststein"},"content":"| v1.0    | Budget conscious user | view an existing activity            | view the cost breakdown of who paid and who was involved in the activity    |","lastModifiedDate":"2022-03-19"},{"lineNumber":297,"author":{"gitId":"froststein"},"content":"| v1.0    | Budget conscious user | list all existing sessions           | view all sessions previously created                                        |","lastModifiedDate":"2022-03-19"},{"lineNumber":298,"author":{"gitId":"froststein"},"content":"| v1.0    | Budget conscious user | list all activities in a session     | view all the activities that happened in the session                        |","lastModifiedDate":"2022-03-19"},{"lineNumber":299,"author":{"gitId":"froststein"},"content":"| v1.0    | Budget conscious user | settle all transactions of a session | see a summary of who needs to pay what amount to who for the entire session |","lastModifiedDate":"2022-03-19"},{"lineNumber":300,"author":{"gitId":"froststein"},"content":"| v1.0    | User                  | exit the application                 | stop tracking                                                               |","lastModifiedDate":"2022-03-19"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":302,"author":{"gitId":"-"},"content":"## Non-Functional Requirements","lastModifiedDate":"2020-05-24"},{"lineNumber":303,"author":{"gitId":"froststein"},"content":"1. The application should be able to work in any operating systems with `Java 11` installed.","lastModifiedDate":"2022-03-15"},{"lineNumber":304,"author":{"gitId":"froststein"},"content":"2. ","lastModifiedDate":"2022-03-15"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":306,"author":{"gitId":"-"},"content":"## Glossary","lastModifiedDate":"2020-05-24"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"lelerer":22,"ivanaitzliddat":23,"warrencxw":75,"-":21,"froststein":160,"matheril":6}},{"path":"docs/README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"# SplitLah","lastModifiedDate":"2022-03-11"},{"lineNumber":2,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-11"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"SplitLah is an application for keeping track of expenses during group outing sessions, specifically for those ","lastModifiedDate":"2022-03-11"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":"who are budget conscious. It then proceeds to split the expenses according to the group members\u0027 individual costs for ","lastModifiedDate":"2022-03-11"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"the activities they participated in, for a particular session, via a Command Line Interface(CLI).","lastModifiedDate":"2022-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Useful links:","lastModifiedDate":"2020-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"* [User Guide](UserGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"* [Developer Guide](DeveloperGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"* [About Us](AboutUs.md)","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"froststein":5,"-":6}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"SplitLah is a CLI program that lets users split bills proportionally amongst themselves after a group outing. SplitLah does","lastModifiedDate":"2022-03-15"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":"the work of calculating how much each participant must pay across multiple activities, and keeps track of who paid the total","lastModifiedDate":"2022-03-15"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"bill for each activity.","lastModifiedDate":"2022-03-15"},{"lineNumber":6,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":7,"author":{"gitId":"froststein"},"content":"## Contents","lastModifiedDate":"2022-03-15"},{"lineNumber":8,"author":{"gitId":"matheril"},"content":"* [User Guide](#user-guide)","lastModifiedDate":"2022-03-12"},{"lineNumber":9,"author":{"gitId":"matheril"},"content":"* [Contents](#contents)","lastModifiedDate":"2022-03-13"},{"lineNumber":10,"author":{"gitId":"matheril"},"content":"    * [Introduction](#introduction)","lastModifiedDate":"2022-03-12"},{"lineNumber":11,"author":{"gitId":"matheril"},"content":"    * [How SplitLah works](#how-splitlah-works)","lastModifiedDate":"2022-03-12"},{"lineNumber":12,"author":{"gitId":"matheril"},"content":"    * [Quick Notes](#quick-notes)","lastModifiedDate":"2022-03-13"},{"lineNumber":13,"author":{"gitId":"matheril"},"content":"    * [Quick Start](#quick-start)","lastModifiedDate":"2022-03-12"},{"lineNumber":14,"author":{"gitId":"matheril"},"content":"    * [Features](#features)","lastModifiedDate":"2022-03-12"},{"lineNumber":15,"author":{"gitId":"matheril"},"content":"        * [Creating a session: `session /create`](#creating-a-session-session-create)","lastModifiedDate":"2022-03-13"},{"lineNumber":16,"author":{"gitId":"matheril"},"content":"        * [Deleting a session: `session /delete`](#deleting-a-session-session-delete)","lastModifiedDate":"2022-03-13"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":"        * [Viewing a session: `session /view`](#viewing-a-session--session-view)","lastModifiedDate":"2022-03-21"},{"lineNumber":18,"author":{"gitId":"matheril"},"content":"        * [Listing all sessions: `session /list`](#listing-all-sessions-session-list)","lastModifiedDate":"2022-03-13"},{"lineNumber":19,"author":{"gitId":"matheril"},"content":"        * [Creating an activity: `activity /create`](#creating-an-activity-activity-create)","lastModifiedDate":"2022-03-13"},{"lineNumber":20,"author":{"gitId":"lelerer"},"content":"        * [Viewing an activity: `activity /view`](#viewing-an-activity-activity-view)","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"lelerer"},"content":"        * [Listing all activities in a session: `activity /list`](#listing-all-activities-in-a-session-activity-list)","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"matheril"},"content":"        * [Settling all transactions for a session: `session /summary`](#settling-all-transactions-for-a-session-session-summary)","lastModifiedDate":"2022-03-13"},{"lineNumber":23,"author":{"gitId":"froststein"},"content":"        * [Creating a group: `group /create`](#creating-a-group-group-create)","lastModifiedDate":"2022-03-21"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"        * [Deleting a group: `group /delete`](#deleting-a-group-group-delete)","lastModifiedDate":"2022-03-21"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"        * [Viewing a group: `group /view`](#viewing-a-group-group-view)","lastModifiedDate":"2022-03-21"},{"lineNumber":26,"author":{"gitId":"froststein"},"content":"        * [Listing all groups: `group /list`](#listing-all-groups-group-list)","lastModifiedDate":"2022-03-21"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"        * [Listing all available commands: `help`](#listing-all-available-commands-help)","lastModifiedDate":"2022-03-22"},{"lineNumber":28,"author":{"gitId":"froststein"},"content":"        * [Exit](#exit)","lastModifiedDate":"2022-03-15"},{"lineNumber":29,"author":{"gitId":"matheril"},"content":"    * [FAQ](#faq)","lastModifiedDate":"2022-03-12"},{"lineNumber":30,"author":{"gitId":"matheril"},"content":"    * [Command Summary](#command-summary)","lastModifiedDate":"2022-03-12"},{"lineNumber":31,"author":{"gitId":"matheril"},"content":"    ","lastModifiedDate":"2022-03-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"## Introduction","lastModifiedDate":"2022-03-15"},{"lineNumber":33,"author":{"gitId":"matheril"},"content":"Value proposition:","lastModifiedDate":"2022-03-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":35,"author":{"gitId":"matheril"},"content":"- Allows users to keep track of several activities and their participants.","lastModifiedDate":"2022-03-12"},{"lineNumber":36,"author":{"gitId":"froststein"},"content":"- Split costs evenly or independently depending on what is required.","lastModifiedDate":"2022-03-15"},{"lineNumber":37,"author":{"gitId":"matheril"},"content":"- Combines all payments due together for easy settlement of payments.","lastModifiedDate":"2022-03-12"},{"lineNumber":38,"author":{"gitId":"matheril"},"content":"- Can be operated quickly by an experienced typist.","lastModifiedDate":"2022-03-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":40,"author":{"gitId":"matheril"},"content":"Target users:","lastModifiedDate":"2022-03-12"},{"lineNumber":41,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":42,"author":{"gitId":"matheril"},"content":"- People who go on group outings often and split bills.","lastModifiedDate":"2022-03-12"},{"lineNumber":43,"author":{"gitId":"matheril"},"content":"- People who dislike manually calculating how much people owe across several activities.","lastModifiedDate":"2022-03-12"},{"lineNumber":44,"author":{"gitId":"matheril"},"content":"- People who go on group outings where different people pay for different activities, making bill-splitting harder.","lastModifiedDate":"2022-03-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":46,"author":{"gitId":"matheril"},"content":"## How SplitLah works","lastModifiedDate":"2022-03-12"},{"lineNumber":47,"author":{"gitId":"ivanaitzliddat"},"content":"- An activity represents a single group activity, paid for by one person. An activity stores a list of its participants,","lastModifiedDate":"2022-03-13"},{"lineNumber":48,"author":{"gitId":"ivanaitzliddat"},"content":"the payer and how much each participant owes.","lastModifiedDate":"2022-03-13"},{"lineNumber":49,"author":{"gitId":"matheril"},"content":"  - Example: `Lunch at a restaurant`","lastModifiedDate":"2022-03-12"},{"lineNumber":50,"author":{"gitId":"matheril"},"content":"  - Consisting of the following participants:","lastModifiedDate":"2022-03-12"},{"lineNumber":51,"author":{"gitId":"froststein"},"content":"    - `Alice`, `Bob`, `Charlie`","lastModifiedDate":"2022-03-15"},{"lineNumber":52,"author":{"gitId":"matheril"},"content":"  - Paid for by:","lastModifiedDate":"2022-03-12"},{"lineNumber":53,"author":{"gitId":"froststein"},"content":"    - `Alice`","lastModifiedDate":"2022-03-15"},{"lineNumber":54,"author":{"gitId":"matheril"},"content":"- A session represents a period of time and stores one or more activities, as well as a list of participants. Each","lastModifiedDate":"2022-03-12"},{"lineNumber":55,"author":{"gitId":"matheril"},"content":"activity could have a different payer.","lastModifiedDate":"2022-03-12"},{"lineNumber":56,"author":{"gitId":"froststein"},"content":"  - Example: `Bob\u0027s birthday`","lastModifiedDate":"2022-03-15"},{"lineNumber":57,"author":{"gitId":"matheril"},"content":"  - Consisting of the following participants:","lastModifiedDate":"2022-03-12"},{"lineNumber":58,"author":{"gitId":"froststein"},"content":"    - `Alice`, `Bob`, `Charlie`","lastModifiedDate":"2022-03-15"},{"lineNumber":59,"author":{"gitId":"matheril"},"content":"  - Consisting of the following activities:","lastModifiedDate":"2022-03-12"},{"lineNumber":60,"author":{"gitId":"matheril"},"content":"    - `Breakfast at McDonald\u0027s`, `Lunch at a restaurant`, `Movie at a theatre`","lastModifiedDate":"2022-03-12"},{"lineNumber":61,"author":{"gitId":"matheril"},"content":"    - Each paid for by a different person.","lastModifiedDate":"2022-03-12"},{"lineNumber":62,"author":{"gitId":"matheril"},"content":"- At the end of a session, SplitLah calculates how much each person owes and who they need to pay. This information is","lastModifiedDate":"2022-03-12"},{"lineNumber":63,"author":{"gitId":"matheril"},"content":"displayed in an easy-to-read summary.","lastModifiedDate":"2022-03-12"},{"lineNumber":64,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":65,"author":{"gitId":"matheril"},"content":"## Quick Notes","lastModifiedDate":"2022-03-13"},{"lineNumber":66,"author":{"gitId":"matheril"},"content":"- Allowed characters for values:","lastModifiedDate":"2022-03-13"},{"lineNumber":67,"author":{"gitId":"matheril"},"content":"    - Alphanumeric characters: `A-Z`, `a-z`, `0-9`","lastModifiedDate":"2022-03-13"},{"lineNumber":68,"author":{"gitId":"matheril"},"content":"    - Decimals: `3.5`","lastModifiedDate":"2022-03-13"},{"lineNumber":69,"author":{"gitId":"matheril"},"content":"    - Whitespace: `Birthday party`","lastModifiedDate":"2022-03-13"},{"lineNumber":70,"author":{"gitId":"matheril"},"content":"- A forward slash `/` indicates a delimiter and is used to separate commands into parts.","lastModifiedDate":"2022-03-13"},{"lineNumber":71,"author":{"gitId":"matheril"},"content":"  Each command\u0027s documentation specifies the required delimiters and their purpose.","lastModifiedDate":"2022-03-13"},{"lineNumber":72,"author":{"gitId":"matheril"},"content":"  - Example: `/n`, `/sid`","lastModifiedDate":"2022-03-13"},{"lineNumber":73,"author":{"gitId":"matheril"},"content":"- Parameters enclosed in [ ] must be supplied by the user. ","lastModifiedDate":"2022-03-13"},{"lineNumber":74,"author":{"gitId":"matheril"},"content":"  - Example: `[SESSION_ID]`","lastModifiedDate":"2022-03-13"},{"lineNumber":75,"author":{"gitId":"matheril"},"content":"- Parameters with an ellipsis `...` indicate that the user can supply multiple values.","lastModifiedDate":"2022-03-13"},{"lineNumber":76,"author":{"gitId":"ivanaitzliddat"},"content":"  - Example: `[COST1 COST2 ...]`","lastModifiedDate":"2022-03-25"},{"lineNumber":77,"author":{"gitId":"froststein"},"content":"- Parameters enclosed within `[\u003c` and `\u003e]` indicates that the arguments are optional.","lastModifiedDate":"2022-03-21"},{"lineNumber":78,"author":{"gitId":"ivanaitzliddat"},"content":"  - Example: `[\u003c/gst [GST_PERCENTAGE]\u003e] [\u003c/sc [SERVICE_CHARGE]\u003e]`","lastModifiedDate":"2022-03-25"},{"lineNumber":79,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"## Quick Start","lastModifiedDate":"2020-05-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"1. Ensure that you have Java 11 or above installed.","lastModifiedDate":"2020-05-24"},{"lineNumber":83,"author":{"gitId":"matheril"},"content":"2. Download the latest .jar version of SplitLah from [here](https://github.com/AY2122S2-CS2113T-T10-1/tp/releases)","lastModifiedDate":"2022-03-12"},{"lineNumber":84,"author":{"gitId":"matheril"},"content":"3. Copy the file to the folder you wish to use as a home folder for SplitLah.","lastModifiedDate":"2022-03-12"},{"lineNumber":85,"author":{"gitId":"matheril"},"content":"4. Start SplitLah by executing `java -jar SplitLah.jar` in the terminal.","lastModifiedDate":"2022-03-12"},{"lineNumber":86,"author":{"gitId":"matheril"},"content":"5. Type in a command and press Enter to execute it.","lastModifiedDate":"2022-03-12"},{"lineNumber":87,"author":{"gitId":"matheril"},"content":"6. Refer to Features for a more in-depth explanation of all commands available.","lastModifiedDate":"2022-03-12"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":89,"author":{"gitId":"matheril"},"content":"\u003chr\u003e","lastModifiedDate":"2022-03-12"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":91,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2020-05-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":94,"author":{"gitId":"froststein"},"content":"### Creating a session: `session /create`","lastModifiedDate":"2022-03-09"},{"lineNumber":95,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":96,"author":{"gitId":"matheril"},"content":"\u003e Creates a new session.\u003cbr\u003e","lastModifiedDate":"2022-03-12"},{"lineNumber":97,"author":{"gitId":"matheril"},"content":"\u003e A session represents a group outing spanning an arbitrary period of time containing one or more activities.","lastModifiedDate":"2022-03-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":99,"author":{"gitId":"froststein"},"content":"Format: `session /create /n [SESSION_NAME] /d [SESSION_DATE] /pl [NAME1 NAME2 ...] [\u003c/gid [GROUD_ID]\u003e]`","lastModifiedDate":"2022-03-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":101,"author":{"gitId":"froststein"},"content":"* `[SESSION_NAME]` refers to the name of the session.","lastModifiedDate":"2022-03-09"},{"lineNumber":102,"author":{"gitId":"froststein"},"content":"  * The session name is **case-insensitive**.","lastModifiedDate":"2022-03-09"},{"lineNumber":103,"author":{"gitId":"froststein"},"content":"* `[SESSION_DATE]` refers to the date of the session.","lastModifiedDate":"2022-03-09"},{"lineNumber":104,"author":{"gitId":"froststein"},"content":"  * The format of the date must be in `DD-MM-YYYY`.","lastModifiedDate":"2022-03-12"},{"lineNumber":105,"author":{"gitId":"froststein"},"content":"* `[NAME1 NAME2 ...]` refers to a list of persons involved in the session.","lastModifiedDate":"2022-03-09"},{"lineNumber":106,"author":{"gitId":"froststein"},"content":"  * Each individual name is **case-insensitive**.","lastModifiedDate":"2022-03-11"},{"lineNumber":107,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":108,"author":{"gitId":"froststein"},"content":"\u003e **💡 Note(s):**","lastModifiedDate":"2022-03-13"},{"lineNumber":109,"author":{"gitId":"matheril"},"content":"\u003e- The `[SESSION_NAME]` should be unique across all active sessions.","lastModifiedDate":"2022-03-14"},{"lineNumber":110,"author":{"gitId":"matheril"},"content":"\u003e- Each name in `[NAME1 NAME2 ...]` for a particular session should be unique.","lastModifiedDate":"2022-03-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":112,"author":{"gitId":"froststein"},"content":"\u003e **⚠️Warning:**","lastModifiedDate":"2022-03-21"},{"lineNumber":113,"author":{"gitId":"froststein"},"content":"\u003e - When using `/pl` and `/gid` delimiters together, if there is a duplicated name in `/pl` and ","lastModifiedDate":"2022-03-21"},{"lineNumber":114,"author":{"gitId":"froststein"},"content":"\u003e specified group with `/gid`. The duplicate name would be removed, storing only 1 instance of it.","lastModifiedDate":"2022-03-21"},{"lineNumber":115,"author":{"gitId":"froststein"},"content":"\u003e  - Example: Where the group specified by `/gid` consists of Alice and Bob and the arguments of `/pl` ","lastModifiedDate":"2022-03-21"},{"lineNumber":116,"author":{"gitId":"froststein"},"content":"     includes Alice, only two names, Alice and Bob, would be saved.","lastModifiedDate":"2022-03-21"},{"lineNumber":117,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":118,"author":{"gitId":"-"},"content":"Example of usage:","lastModifiedDate":"2020-05-24"},{"lineNumber":119,"author":{"gitId":"froststein"},"content":"1. Adds a new session named Class Outing with Alice and Bob involved on 15-03-2022.","lastModifiedDate":"2022-03-12"},{"lineNumber":120,"author":{"gitId":"ivanaitzliddat"},"content":"   - `session /create /n Class Outing /d 15-03-2022 /pl Alice Bob` \u003cbr\u003e","lastModifiedDate":"2022-03-13"},{"lineNumber":121,"author":{"gitId":"froststein"},"content":"   ![Session create command Screenshot 1](https://raw.githubusercontent.com/AY2122s2-cs2113t-t10-1/tp/master/docs/images/userguide/SessionCreateCommand[1].png)","lastModifiedDate":"2022-03-21"},{"lineNumber":122,"author":{"gitId":"froststein"},"content":"2. A [group](#creating-a-group-group-create) was previously created with group named *Friends* with Charlie and Mike. \u003cbr\u003e","lastModifiedDate":"2022-03-21"},{"lineNumber":123,"author":{"gitId":"froststein"},"content":"   Adds a new session named Class Gathering consisting of a group named *Friends* and Alice, on 16-04-2022.","lastModifiedDate":"2022-03-21"},{"lineNumber":124,"author":{"gitId":"froststein"},"content":"   - `session /create /n Glass Gathering /d 16-04-2022 /gid 1 /pl Alice` \u003cbr\u003e","lastModifiedDate":"2022-03-21"},{"lineNumber":125,"author":{"gitId":"froststein"},"content":"   ![Session create command Screenshot 2](https://raw.githubusercontent.com/AY2122s2-cs2113t-t10-1/tp/master/docs/images/userguide/SessionCreateCommand[2].png)","lastModifiedDate":"2022-03-21"},{"lineNumber":126,"author":{"gitId":"froststein"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-11"},{"lineNumber":127,"author":{"gitId":"froststein"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-11"},{"lineNumber":128,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":129,"author":{"gitId":"froststein"},"content":"### Deleting a session: `session /delete`","lastModifiedDate":"2022-03-11"},{"lineNumber":130,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":131,"author":{"gitId":"matheril"},"content":"\u003e Deletes an existing session.\u003cbr\u003e","lastModifiedDate":"2022-03-15"},{"lineNumber":132,"author":{"gitId":"matheril"},"content":"\u003e A session represents a group outing spanning an arbitrary period of time containing one or more activities.","lastModifiedDate":"2022-03-15"},{"lineNumber":133,"author":{"gitId":"matheril"},"content":"\u003e ","lastModifiedDate":"2022-03-15"},{"lineNumber":134,"author":{"gitId":"froststein"},"content":"Format: `session /delete /sid [SESSION_ID]`","lastModifiedDate":"2022-03-11"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":136,"author":{"gitId":"froststein"},"content":"* `[SESSION_ID]` refers to the unique identifier of the session.","lastModifiedDate":"2022-03-11"},{"lineNumber":137,"author":{"gitId":"ivanaitzliddat"},"content":"    * The unique identifier for a session can be retrieved with [`session /list`](#listing-all-sessions-session-list) command.","lastModifiedDate":"2022-03-23"},{"lineNumber":138,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":139,"author":{"gitId":"froststein"},"content":"\u003e **💡 Note:**","lastModifiedDate":"2022-03-21"},{"lineNumber":140,"author":{"gitId":"froststein"},"content":"\u003e- A session with a unique identifier of `[SESSION_ID]` has to exist before it can be removed.","lastModifiedDate":"2022-03-13"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":142,"author":{"gitId":"froststein"},"content":"\u003e **⚠️Warning:**","lastModifiedDate":"2022-03-21"},{"lineNumber":143,"author":{"gitId":"froststein"},"content":"\u003e - This action is irreversible, once the command has been entered, the session would be immediately deleted.","lastModifiedDate":"2022-03-21"},{"lineNumber":144,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":145,"author":{"gitId":"froststein"},"content":"Example of usage:","lastModifiedDate":"2022-03-11"},{"lineNumber":146,"author":{"gitId":"matheril"},"content":"1. Remove an existing session with a unique identifier of 1.","lastModifiedDate":"2022-03-14"},{"lineNumber":147,"author":{"gitId":"ivanaitzliddat"},"content":"   - `session /delete /sid 1` \u003cbr\u003e","lastModifiedDate":"2022-03-13"},{"lineNumber":148,"author":{"gitId":"froststein"},"content":"   ![Session delete command Screenshot](https://raw.githubusercontent.com/AY2122s2-cs2113t-t10-1/tp/master/docs/images/userguide/SessionDeleteCommand.png)","lastModifiedDate":"2022-03-12"},{"lineNumber":149,"author":{"gitId":"froststein"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-11"},{"lineNumber":150,"author":{"gitId":"froststein"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-11"},{"lineNumber":151,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":152,"author":{"gitId":"froststein"},"content":"### Viewing a session : `session /view`","lastModifiedDate":"2022-03-21"},{"lineNumber":153,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":154,"author":{"gitId":"froststein"},"content":"### Listing all sessions: `session /list`","lastModifiedDate":"2022-03-12"},{"lineNumber":155,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":156,"author":{"gitId":"matheril"},"content":"\u003e List all active sessions. Deleted sessions will not be listed.\u003cbr\u003e","lastModifiedDate":"2022-03-15"},{"lineNumber":157,"author":{"gitId":"matheril"},"content":"\u003e A session represents a group outing spanning an arbitrary period of time containing one or more activities.","lastModifiedDate":"2022-03-15"},{"lineNumber":158,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":159,"author":{"gitId":"froststein"},"content":"Format: `session /list`","lastModifiedDate":"2022-03-12"},{"lineNumber":160,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":161,"author":{"gitId":"froststein"},"content":"Example of usage:","lastModifiedDate":"2022-03-12"},{"lineNumber":162,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":163,"author":{"gitId":"froststein"},"content":"![Session list command Screenshot](https://raw.githubusercontent.com/AY2122s2-cs2113t-t10-1/tp/master/docs/images/userguide/SessionListCommand.png)","lastModifiedDate":"2022-03-12"},{"lineNumber":164,"author":{"gitId":"froststein"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-11"},{"lineNumber":165,"author":{"gitId":"froststein"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-11"},{"lineNumber":166,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":167,"author":{"gitId":"ivanaitzliddat"},"content":"### Creating an activity: `activity /create`","lastModifiedDate":"2022-03-12"},{"lineNumber":168,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":169,"author":{"gitId":"matheril"},"content":"\u003e Creates a new activity and assigns it to a session. \u003cbr\u003e","lastModifiedDate":"2022-03-14"},{"lineNumber":170,"author":{"gitId":"matheril"},"content":"\u003e An activity represents a single group activity and stores its name, costs and the name of the payer.\u003cbr\u003e","lastModifiedDate":"2022-03-15"},{"lineNumber":171,"author":{"gitId":"matheril"},"content":"\u003e A session represents a group outing spanning an arbitrary period of time containing one or more activities.","lastModifiedDate":"2022-03-15"},{"lineNumber":172,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":173,"author":{"gitId":"ivanaitzliddat"},"content":"Format 1: `activity /create /sid [SESSION_ID] /n [ACTIVITY_NAME] /p [PERSON_PAID] /i [NAME1 NAME2 ...]","lastModifiedDate":"2022-03-12"},{"lineNumber":174,"author":{"gitId":"ivanaitzliddat"},"content":"/co [TOTAL_COST] [\u003c/gst [GST_PERCENTAGE]\u003e] [\u003c/sc [SERVICE_CHARGE]\u003e]`","lastModifiedDate":"2022-03-25"},{"lineNumber":175,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":176,"author":{"gitId":"ivanaitzliddat"},"content":"Format 2: `activity /create /sid [SESSION_ID] /n [ACTIVITY_NAME] /p [PERSON_PAID] /i [NAME1 NAME2 ...]","lastModifiedDate":"2022-03-12"},{"lineNumber":177,"author":{"gitId":"ivanaitzliddat"},"content":"/cl [COST1 COST2 ...] [\u003c/gst [GST_PERCENTAGE]\u003e] [\u003c/sc [SERVICE_CHARGE]\u003e]`","lastModifiedDate":"2022-03-25"},{"lineNumber":178,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":179,"author":{"gitId":"ivanaitzliddat"},"content":"* `[SESSION_ID]` refers to the unique identifier of the session.","lastModifiedDate":"2022-03-12"},{"lineNumber":180,"author":{"gitId":"ivanaitzliddat"},"content":"    * The unique identifier for a session can be retrieved with [`session /list`](#listing-all-sessions-session-list) command.","lastModifiedDate":"2022-03-23"},{"lineNumber":181,"author":{"gitId":"ivanaitzliddat"},"content":"* `[ACTIVITY_NAME]` refers to the name of the activity.","lastModifiedDate":"2022-03-12"},{"lineNumber":182,"author":{"gitId":"ivanaitzliddat"},"content":"    * The activity name is **case-insensitive**.","lastModifiedDate":"2022-03-12"},{"lineNumber":183,"author":{"gitId":"ivanaitzliddat"},"content":"* `[PERSON_PAID]` refers to the person who paid for the activity.","lastModifiedDate":"2022-03-12"},{"lineNumber":184,"author":{"gitId":"ivanaitzliddat"},"content":"    * The person\u0027s name is **case-insensitive**.","lastModifiedDate":"2022-03-12"},{"lineNumber":185,"author":{"gitId":"ivanaitzliddat"},"content":"* `[NAME1 NAME2 ...]` refers to a list of persons involved in the activity.","lastModifiedDate":"2022-03-12"},{"lineNumber":186,"author":{"gitId":"ivanaitzliddat"},"content":"    * Each individual name is **case-insensitive**.","lastModifiedDate":"2022-03-12"},{"lineNumber":187,"author":{"gitId":"ivanaitzliddat"},"content":"* `[TOTAL_COST]` refers to the total cost of the activity.","lastModifiedDate":"2022-03-12"},{"lineNumber":188,"author":{"gitId":"ivanaitzliddat"},"content":"* `[COST1 COST2 ...]` refers to a list of costs respective to each person involved in the activity.","lastModifiedDate":"2022-03-12"},{"lineNumber":189,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":190,"author":{"gitId":"froststein"},"content":"\u003e **💡 Note(s):**","lastModifiedDate":"2022-03-13"},{"lineNumber":191,"author":{"gitId":"matheril"},"content":"\u003e- A session with a unique identifier of `[SESSION_ID]` has to exist before an activity can be created and assigned to ","lastModifiedDate":"2022-03-15"},{"lineNumber":192,"author":{"gitId":"matheril"},"content":"\u003e it.","lastModifiedDate":"2022-03-14"},{"lineNumber":193,"author":{"gitId":"ivanaitzliddat"},"content":"\u003e- The `[ACTIVITY_NAME]` should be unique across all activities.","lastModifiedDate":"2022-03-12"},{"lineNumber":194,"author":{"gitId":"ivanaitzliddat"},"content":"\u003e- Each name in `[NAME1 NAME2 ...]` for the activity should be unique.","lastModifiedDate":"2022-03-12"},{"lineNumber":195,"author":{"gitId":"matheril"},"content":"\u003e- The names in `[PERSON_PAID]` and `[NAME1 NAME2 ...]` must also be associated with the session referenced by","lastModifiedDate":"2022-03-14"},{"lineNumber":196,"author":{"gitId":"matheril"},"content":"   `[SESSION_ID]`.","lastModifiedDate":"2022-03-14"},{"lineNumber":197,"author":{"gitId":"froststein"},"content":"\u003e- The names in `[PERSON_PAID]` and `[NAME1 NAME2 ...]` must also only be a single word without whitespaces.","lastModifiedDate":"2022-03-15"},{"lineNumber":198,"author":{"gitId":"froststein"},"content":"   \u003e \u003cbr\u003eExample: `Alice Tan` is not allowed.","lastModifiedDate":"2022-03-15"},{"lineNumber":199,"author":{"gitId":"froststein"},"content":"\u003e- The values that follow the delimiters `/co` and `/cl` can only have a maximum of 12 digits before","lastModifiedDate":"2022-03-15"},{"lineNumber":200,"author":{"gitId":"froststein"},"content":"   and 2 digits after the decimal point, if any.","lastModifiedDate":"2022-03-15"},{"lineNumber":201,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":202,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":203,"author":{"gitId":"ivanaitzliddat"},"content":"Examples of usage:","lastModifiedDate":"2022-03-12"},{"lineNumber":204,"author":{"gitId":"froststein"},"content":"1. Adds a new activity to a session with a session unique identifier of 2 named Class Lunch. Alice paid a total of $10","lastModifiedDate":"2022-03-15"},{"lineNumber":205,"author":{"gitId":"matheril"},"content":"   for both Bob and herself which will be split equally between them later on.","lastModifiedDate":"2022-03-15"},{"lineNumber":206,"author":{"gitId":"froststein"},"content":"   - `activity /create /sid 2 /n Class Lunch /p Alice /i Alice Bob /co 10` \u003cbr\u003e","lastModifiedDate":"2022-03-15"},{"lineNumber":207,"author":{"gitId":"froststein"},"content":"   ![Activity create command [1] Screenshot](https://raw.githubusercontent.com/AY2122s2-cs2113t-t10-1/tp/master/docs/images/userguide/ActivityCreateCommand[1].png)","lastModifiedDate":"2022-03-13"},{"lineNumber":208,"author":{"gitId":"froststein"},"content":"2. Adds a new activity to a session with a session unique identifier of 2 named Class Lunch. Alice paid for both","lastModifiedDate":"2022-03-15"},{"lineNumber":209,"author":{"gitId":"matheril"},"content":"   Bob and herself. Alice\u0027s meal cost $3.50 while Bob\u0027s meal cost $7.","lastModifiedDate":"2022-03-14"},{"lineNumber":210,"author":{"gitId":"froststein"},"content":"   - `activity /create /sid 2 /n Class Lunch /p Alice /i Alice Bob /cl 3.5 7` \u003cbr\u003e","lastModifiedDate":"2022-03-15"},{"lineNumber":211,"author":{"gitId":"froststein"},"content":"   ![Activity create command [2] Screenshot](https://raw.githubusercontent.com/AY2122s2-cs2113t-t10-1/tp/master/docs/images/userguide/ActivityCreateCommand[2].png)","lastModifiedDate":"2022-03-13"},{"lineNumber":212,"author":{"gitId":"warrencxw"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-12"},{"lineNumber":213,"author":{"gitId":"warrencxw"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-12"},{"lineNumber":214,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":215,"author":{"gitId":"ivanaitzliddat"},"content":"### Deleting an activity: `activity /delete`","lastModifiedDate":"2022-03-13"},{"lineNumber":216,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":217,"author":{"gitId":"matheril"},"content":"\u003e Deletes an existing activity from a particular session.\u003cbr\u003e","lastModifiedDate":"2022-03-15"},{"lineNumber":218,"author":{"gitId":"matheril"},"content":"\u003e An activity represents a single group activity and stores its name, costs and the name of the payer.\u003cbr\u003e","lastModifiedDate":"2022-03-15"},{"lineNumber":219,"author":{"gitId":"matheril"},"content":"\u003e A session represents a group outing spanning an arbitrary period of time containing one or more activities.","lastModifiedDate":"2022-03-15"},{"lineNumber":220,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":221,"author":{"gitId":"ivanaitzliddat"},"content":"Format: `activity /delete /sid [SESSION_ID] /aid [ACTIVITY_ID]`","lastModifiedDate":"2022-03-13"},{"lineNumber":222,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":223,"author":{"gitId":"ivanaitzliddat"},"content":"* `[SESSION_ID]` refers to the unique identifier of the session.","lastModifiedDate":"2022-03-13"},{"lineNumber":224,"author":{"gitId":"ivanaitzliddat"},"content":"    * The unique identifier for a session can be retrieved with [`session /list`](#listing-all-sessions-session-list) command.","lastModifiedDate":"2022-03-23"},{"lineNumber":225,"author":{"gitId":"ivanaitzliddat"},"content":"* `[ACTIVITY_ID]` refers to the unique identifier of the activity.","lastModifiedDate":"2022-03-13"},{"lineNumber":226,"author":{"gitId":"ivanaitzliddat"},"content":"    * The unique identifier for an activity can be retrieved with [`activity /list`](#listing-all-activities-in-a-session-activity-list) command.","lastModifiedDate":"2022-03-23"},{"lineNumber":227,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":228,"author":{"gitId":"ivanaitzliddat"},"content":"\u003e **💡 Note(s):**","lastModifiedDate":"2022-03-13"},{"lineNumber":229,"author":{"gitId":"ivanaitzliddat"},"content":"\u003e- A session with a unique identifier of `[SESSION_ID]` has to exist before an activity in that session can be removed.","lastModifiedDate":"2022-03-13"},{"lineNumber":230,"author":{"gitId":"ivanaitzliddat"},"content":"\u003e- An activity with a unique identifier of `[ACTIVITY_ID]` has to exist before it can be removed.","lastModifiedDate":"2022-03-13"},{"lineNumber":231,"author":{"gitId":"ivanaitzliddat"},"content":"\u003e- A confirmation must be given before deletion takes place.","lastModifiedDate":"2022-03-13"},{"lineNumber":232,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":233,"author":{"gitId":"ivanaitzliddat"},"content":"\u003e **⚠️Warning:**","lastModifiedDate":"2022-03-23"},{"lineNumber":234,"author":{"gitId":"ivanaitzliddat"},"content":"\u003e - This action is irreversible, once the command has been entered, the activity would be immediately deleted.","lastModifiedDate":"2022-03-23"},{"lineNumber":235,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":236,"author":{"gitId":"ivanaitzliddat"},"content":"Example of usage:","lastModifiedDate":"2022-03-13"},{"lineNumber":237,"author":{"gitId":"froststein"},"content":"1. Remove an existing activity with a unique identifier of 1 from a session with a unique \u003cbr\u003e identifier of 2.","lastModifiedDate":"2022-03-15"},{"lineNumber":238,"author":{"gitId":"froststein"},"content":"   - `activity /delete /sid 2 /aid 1` \u003cbr\u003e","lastModifiedDate":"2022-03-15"},{"lineNumber":239,"author":{"gitId":"froststein"},"content":"   ![Activity delete command Screenshot](https://raw.githubusercontent.com/AY2122s2-cs2113t-t10-1/tp/master/docs/images/userguide/ActivityDeleteCommand.png)","lastModifiedDate":"2022-03-24"},{"lineNumber":240,"author":{"gitId":"ivanaitzliddat"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-13"},{"lineNumber":241,"author":{"gitId":"ivanaitzliddat"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-13"},{"lineNumber":242,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":243,"author":{"gitId":"lelerer"},"content":"### Viewing an activity: `activity /view`","lastModifiedDate":"2022-03-14"},{"lineNumber":244,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":245,"author":{"gitId":"froststein"},"content":"\u003e Display details about an activity.\u003cbr\u003e","lastModifiedDate":"2022-03-15"},{"lineNumber":246,"author":{"gitId":"matheril"},"content":"\u003e An activity represents a single group activity and stores its name, costs and the name of the payer.\u003cbr\u003e","lastModifiedDate":"2022-03-15"},{"lineNumber":247,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":248,"author":{"gitId":"lelerer"},"content":"Format: `activity /view /sid [SESSION_ID] /aid [ACTIVITY_ID]`","lastModifiedDate":"2022-03-14"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":251,"author":{"gitId":"lelerer"},"content":"* `[SESSION_ID]` refers to the unique identifier of the session.","lastModifiedDate":"2022-03-14"},{"lineNumber":252,"author":{"gitId":"lelerer"},"content":"    * The unique identifier for a session can be retrieved with [`session /list`](#listing-all-sessions-session-list) command.","lastModifiedDate":"2022-03-14"},{"lineNumber":253,"author":{"gitId":"lelerer"},"content":"* `[ACTIVITY_ID]` refers to the unique identifier of the activity. ","lastModifiedDate":"2022-03-14"},{"lineNumber":254,"author":{"gitId":"lelerer"},"content":"    * The unique identifier for an activity can be retrieved with [`activity /list`](#listing-all-activities-in-a-session-activity-list) command.","lastModifiedDate":"2022-03-14"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":256,"author":{"gitId":"lelerer"},"content":"\u003e **💡 Note(s):**","lastModifiedDate":"2022-03-14"},{"lineNumber":257,"author":{"gitId":"lelerer"},"content":"\u003e- The session with a unique identifier of `[SESSION_ID]` and the activity with a unique identifier of `[ACTIVITY_ID]` have to exist before the activity can be viewed.","lastModifiedDate":"2022-03-14"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":260,"author":{"gitId":"ivanaitzliddat"},"content":"Example of usage:","lastModifiedDate":"2022-03-23"},{"lineNumber":261,"author":{"gitId":"froststein"},"content":"1. Views an activity with a unique identifier of 2 in a session with a session unique identifier of 2.","lastModifiedDate":"2022-03-15"},{"lineNumber":262,"author":{"gitId":"froststein"},"content":"    - `activity /view /sid 2 /aid 2` \u003cbr\u003e","lastModifiedDate":"2022-03-15"},{"lineNumber":263,"author":{"gitId":"lelerer"},"content":"      ![Activity view command Screenshot](https://raw.githubusercontent.com/AY2122s2-cs2113t-t10-1/tp/master/docs/images/userguide/ActivityViewCommand.png)","lastModifiedDate":"2022-03-14"},{"lineNumber":264,"author":{"gitId":"lelerer"},"content":"\u003cbr\u003e     ","lastModifiedDate":"2022-03-14"},{"lineNumber":265,"author":{"gitId":"lelerer"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-14"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":267,"author":{"gitId":"lelerer"},"content":"### Listing all activities in a session: `activity /list`","lastModifiedDate":"2022-03-14"},{"lineNumber":268,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":269,"author":{"gitId":"matheril"},"content":"\u003e Allows user to view all existing activities in a particular session.\u003cbr\u003e","lastModifiedDate":"2022-03-15"},{"lineNumber":270,"author":{"gitId":"matheril"},"content":"\u003e An activity represents a single group activity and stores its name, costs and the name of the payer.\u003cbr\u003e","lastModifiedDate":"2022-03-15"},{"lineNumber":271,"author":{"gitId":"matheril"},"content":"\u003e A session represents a group outing spanning an arbitrary period of time containing one or more activities.","lastModifiedDate":"2022-03-15"},{"lineNumber":272,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":273,"author":{"gitId":"lelerer"},"content":"Format: `activity /list /sid [SESSION_ID]`","lastModifiedDate":"2022-03-14"},{"lineNumber":274,"author":{"gitId":"lelerer"},"content":"* `[SESSION_ID]` refers to the unique identifier of the session.","lastModifiedDate":"2022-03-14"},{"lineNumber":275,"author":{"gitId":"lelerer"},"content":"    * The unique identifier for a session can be retrieved with [`session /list`](#listing-all-sessions-session-list) command.","lastModifiedDate":"2022-03-14"},{"lineNumber":276,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":277,"author":{"gitId":"lelerer"},"content":"\u003e **💡 Note(s):**","lastModifiedDate":"2022-03-14"},{"lineNumber":278,"author":{"gitId":"matheril"},"content":"\u003e- A session with a unique identifier of `[SESSION_ID]` has to exist before its activities can be listed.","lastModifiedDate":"2022-03-14"},{"lineNumber":279,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":280,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":281,"author":{"gitId":"ivanaitzliddat"},"content":"Example of usage:","lastModifiedDate":"2022-03-23"},{"lineNumber":282,"author":{"gitId":"froststein"},"content":"1. Lists all activities in a session with a unique identifier of 2.","lastModifiedDate":"2022-03-15"},{"lineNumber":283,"author":{"gitId":"froststein"},"content":"    - `activity /list /sid 2` \u003cbr\u003e","lastModifiedDate":"2022-03-24"},{"lineNumber":284,"author":{"gitId":"lelerer"},"content":"      ![Activity list command Screenshot](https://raw.githubusercontent.com/AY2122s2-cs2113t-t10-1/tp/master/docs/images/userguide/ActivityListCommand.png)","lastModifiedDate":"2022-03-14"},{"lineNumber":285,"author":{"gitId":"lelerer"},"content":"\u003cbr\u003e     ","lastModifiedDate":"2022-03-14"},{"lineNumber":286,"author":{"gitId":"lelerer"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-14"},{"lineNumber":287,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":288,"author":{"gitId":"matheril"},"content":"### Settling all transactions for a session: `session /summary`","lastModifiedDate":"2022-03-12"},{"lineNumber":289,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":290,"author":{"gitId":"matheril"},"content":"\u003e Displays a summary of a session that details how much each person must pay and to whom for all debts to be resolved.\u003cbr\u003e","lastModifiedDate":"2022-03-15"},{"lineNumber":291,"author":{"gitId":"matheril"},"content":"\u003e A session represents a group outing spanning an arbitrary period of time containing one or more activities.","lastModifiedDate":"2022-03-15"},{"lineNumber":292,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":293,"author":{"gitId":"warrencxw"},"content":"Format: `session /summary /sid [SESSION_ID]`","lastModifiedDate":"2022-03-12"},{"lineNumber":294,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":295,"author":{"gitId":"warrencxw"},"content":"* `[SESSION_ID]` refers to the unique identifier of the session.","lastModifiedDate":"2022-03-12"},{"lineNumber":296,"author":{"gitId":"ivanaitzliddat"},"content":"    * The unique identifier for a session can be retrieved with [`session /list`](#listing-all-sessions-session-list) command.","lastModifiedDate":"2022-03-23"},{"lineNumber":297,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":298,"author":{"gitId":"froststein"},"content":"\u003e **💡 Note:**","lastModifiedDate":"2022-03-13"},{"lineNumber":299,"author":{"gitId":"warrencxw"},"content":"\u003e- A session with a unique identifier of `[SESSION_ID]` has to exist before its summary can be generated.","lastModifiedDate":"2022-03-12"},{"lineNumber":300,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":301,"author":{"gitId":"froststein"},"content":"Example of usage:","lastModifiedDate":"2022-03-13"},{"lineNumber":302,"author":{"gitId":"froststein"},"content":"1. A [session](#creating-a-session-session-create) was previously created with session named Class Outing with Alice ","lastModifiedDate":"2022-03-13"},{"lineNumber":303,"author":{"gitId":"froststein"},"content":"   and Bob involved on 15-03-2022.","lastModifiedDate":"2022-03-13"},{"lineNumber":304,"author":{"gitId":"froststein"},"content":"2. An [activity](#creating-an-activity-activity-create) was created with activity named Class Lunch, where Alice paid for both","lastModifiedDate":"2022-03-13"},{"lineNumber":305,"author":{"gitId":"froststein"},"content":"   Bob and herself with a total cost of $10.","lastModifiedDate":"2022-03-13"},{"lineNumber":306,"author":{"gitId":"froststein"},"content":"3. Get a session summary for an active session with a session unique identifier of 2.","lastModifiedDate":"2022-03-15"},{"lineNumber":307,"author":{"gitId":"ivanaitzliddat"},"content":"   - `session /summary /sid 1` \u003cbr\u003e","lastModifiedDate":"2022-03-13"},{"lineNumber":308,"author":{"gitId":"froststein"},"content":"   ![Session summary command Screenshot](https://raw.githubusercontent.com/AY2122s2-cs2113t-t10-1/tp/master/docs/images/userguide/SessionSummaryCommand.png)","lastModifiedDate":"2022-03-13"},{"lineNumber":309,"author":{"gitId":"ivanaitzliddat"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-12"},{"lineNumber":310,"author":{"gitId":"ivanaitzliddat"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-12"},{"lineNumber":311,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":312,"author":{"gitId":"froststein"},"content":"### Creating a group: `group /create`","lastModifiedDate":"2022-03-21"},{"lineNumber":313,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":314,"author":{"gitId":"lelerer"},"content":"\u003e Creates a new group. \u003cbr\u003e","lastModifiedDate":"2022-03-23"},{"lineNumber":315,"author":{"gitId":"lelerer"},"content":"\u003e A group represents one or more individuals. It is used as a shortcut in several commands for identifying a group of individual persons.\u003cbr\u003e","lastModifiedDate":"2022-03-23"},{"lineNumber":316,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":317,"author":{"gitId":"lelerer"},"content":"Format : `group /create /n [GROUP_NAME] /pl [NAME1 NAME2 ...]`","lastModifiedDate":"2022-03-23"},{"lineNumber":318,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":319,"author":{"gitId":"lelerer"},"content":"* `[GROUP_NAME]` refers to the name of the group.","lastModifiedDate":"2022-03-23"},{"lineNumber":320,"author":{"gitId":"lelerer"},"content":"    * The group name is **case-insensitive**.","lastModifiedDate":"2022-03-23"},{"lineNumber":321,"author":{"gitId":"lelerer"},"content":"* `[NAME1 NAME2 ...]` refers to a list of persons involved in the activity.","lastModifiedDate":"2022-03-23"},{"lineNumber":322,"author":{"gitId":"lelerer"},"content":"    * Each individual name is **case-insensitive**.","lastModifiedDate":"2022-03-23"},{"lineNumber":323,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":324,"author":{"gitId":"lelerer"},"content":"\u003e **💡 Note(s):**","lastModifiedDate":"2022-03-23"},{"lineNumber":325,"author":{"gitId":"lelerer"},"content":"\u003e- The `[GROUP_NAME]` should be unique across all groups.","lastModifiedDate":"2022-03-23"},{"lineNumber":326,"author":{"gitId":"lelerer"},"content":"\u003e- Each name in `[NAME1 NAME2 ...]` for the group should be unique.","lastModifiedDate":"2022-03-23"},{"lineNumber":327,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":328,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":329,"author":{"gitId":"lelerer"},"content":"Example of usage:","lastModifiedDate":"2022-03-24"},{"lineNumber":330,"author":{"gitId":"froststein"},"content":"1. Adds a new group named Uni Friends, with Alice and Bob involved.","lastModifiedDate":"2022-03-24"},{"lineNumber":331,"author":{"gitId":"froststein"},"content":"    - `group /create /n Uni Friends /pl Alice Bob` \u003cbr\u003e","lastModifiedDate":"2022-03-24"},{"lineNumber":332,"author":{"gitId":"froststein"},"content":"      ![Group create command Screenshot](https://raw.githubusercontent.com/AY2122s2-cs2113t-t10-1/tp/master/docs/images/userguide/GroupCreateCommand.png)","lastModifiedDate":"2022-03-24"},{"lineNumber":333,"author":{"gitId":"lelerer"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-23"},{"lineNumber":334,"author":{"gitId":"lelerer"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-23"},{"lineNumber":335,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":336,"author":{"gitId":"froststein"},"content":"### Deleting a group: `group /delete`","lastModifiedDate":"2022-03-21"},{"lineNumber":337,"author":{"gitId":"lelerer"},"content":"\u003e Deletes a existing group.\u003cbr\u003e","lastModifiedDate":"2022-03-23"},{"lineNumber":338,"author":{"gitId":"lelerer"},"content":"\u003e A group represents one or more individuals. It is used as a shortcut in several commands for identifying a group of individual persons.\u003cbr\u003e","lastModifiedDate":"2022-03-23"},{"lineNumber":339,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":340,"author":{"gitId":"lelerer"},"content":"Format: `group /delete /gid [GROUP_ID]`","lastModifiedDate":"2022-03-23"},{"lineNumber":341,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":342,"author":{"gitId":"lelerer"},"content":"* `[GROUP_ID]` refers to the unique identifier of the group.","lastModifiedDate":"2022-03-23"},{"lineNumber":343,"author":{"gitId":"lelerer"},"content":"    * The unique identifier for a group can be retrieved with [`group /list`](#listing-all-groups-group-list) command.","lastModifiedDate":"2022-03-23"},{"lineNumber":344,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":345,"author":{"gitId":"lelerer"},"content":"\u003e **💡 Note(s):**","lastModifiedDate":"2022-03-23"},{"lineNumber":346,"author":{"gitId":"lelerer"},"content":"\u003e- A group with a unique identifier of `[GROUP_ID]` has to exist before it can be removed.","lastModifiedDate":"2022-03-23"},{"lineNumber":347,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":348,"author":{"gitId":"lelerer"},"content":"\u003e **⚠️Warning:**","lastModifiedDate":"2022-03-24"},{"lineNumber":349,"author":{"gitId":"lelerer"},"content":"\u003e - This action is irreversible, once the command has been entered, the group would be immediately deleted.","lastModifiedDate":"2022-03-24"},{"lineNumber":350,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":351,"author":{"gitId":"lelerer"},"content":"Example of usage:","lastModifiedDate":"2022-03-23"},{"lineNumber":352,"author":{"gitId":"lelerer"},"content":"1. Remove an existing group with a unique identifier of 1.","lastModifiedDate":"2022-03-23"},{"lineNumber":353,"author":{"gitId":"lelerer"},"content":"    - `group /delete /gid 1` \u003cbr\u003e","lastModifiedDate":"2022-03-23"},{"lineNumber":354,"author":{"gitId":"froststein"},"content":"      ![Group delete command Screenshot](https://raw.githubusercontent.com/AY2122s2-cs2113t-t10-1/tp/master/docs/images/userguide/GroupDeleteCommand.png)","lastModifiedDate":"2022-03-24"},{"lineNumber":355,"author":{"gitId":"lelerer"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-23"},{"lineNumber":356,"author":{"gitId":"lelerer"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-23"},{"lineNumber":357,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":358,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":359,"author":{"gitId":"froststein"},"content":"### Viewing a group: `group /view`","lastModifiedDate":"2022-03-21"},{"lineNumber":360,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":361,"author":{"gitId":"ivanaitzliddat"},"content":"\u003e Display details about a group.\u003cbr\u003e","lastModifiedDate":"2022-03-23"},{"lineNumber":362,"author":{"gitId":"ivanaitzliddat"},"content":"\u003e A group represents one or more individuals.","lastModifiedDate":"2022-03-23"},{"lineNumber":363,"author":{"gitId":"ivanaitzliddat"},"content":"\u003e It is used as a shortcut in several commands for identifying a group of individual persons.","lastModifiedDate":"2022-03-23"},{"lineNumber":364,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":365,"author":{"gitId":"ivanaitzliddat"},"content":"Format: `group /view /gid [GROUP_ID]`","lastModifiedDate":"2022-03-23"},{"lineNumber":366,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":367,"author":{"gitId":"ivanaitzliddat"},"content":"* `[GROUP_ID]` refers to the unique identifier of the group.","lastModifiedDate":"2022-03-23"},{"lineNumber":368,"author":{"gitId":"ivanaitzliddat"},"content":"    * The unique identifier for a group can be retrieved with [`group /list`](#listing-all-groups-group-list) command.","lastModifiedDate":"2022-03-23"},{"lineNumber":369,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":370,"author":{"gitId":"ivanaitzliddat"},"content":"\u003e **💡 Note(s):**","lastModifiedDate":"2022-03-23"},{"lineNumber":371,"author":{"gitId":"ivanaitzliddat"},"content":"\u003e- The group with a unique identifier of `[GROUP_ID]` has to exist before the group can be viewed.","lastModifiedDate":"2022-03-23"},{"lineNumber":372,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":373,"author":{"gitId":"ivanaitzliddat"},"content":"Example of usage:","lastModifiedDate":"2022-03-23"},{"lineNumber":374,"author":{"gitId":"ivanaitzliddat"},"content":"1. Views a group with a unique identifier of 1.","lastModifiedDate":"2022-03-23"},{"lineNumber":375,"author":{"gitId":"ivanaitzliddat"},"content":"    - `group /view /gid 1` \u003cbr\u003e","lastModifiedDate":"2022-03-23"},{"lineNumber":376,"author":{"gitId":"froststein"},"content":"    ![Group view command Screenshot](https://raw.githubusercontent.com/AY2122s2-cs2113t-t10-1/tp/master/docs/images/userguide/GroupViewCommand.png)","lastModifiedDate":"2022-03-24"},{"lineNumber":377,"author":{"gitId":"ivanaitzliddat"},"content":"\u003cbr\u003e     ","lastModifiedDate":"2022-03-23"},{"lineNumber":378,"author":{"gitId":"ivanaitzliddat"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-23"},{"lineNumber":379,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":380,"author":{"gitId":"froststein"},"content":"### Listing all groups: `group /list`","lastModifiedDate":"2022-03-21"},{"lineNumber":381,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":382,"author":{"gitId":"ivanaitzliddat"},"content":"\u003e List all active groups. Deleted groups will not be listed.\u003cbr\u003e","lastModifiedDate":"2022-03-23"},{"lineNumber":383,"author":{"gitId":"ivanaitzliddat"},"content":"\u003e A group represents one or more individuals.","lastModifiedDate":"2022-03-23"},{"lineNumber":384,"author":{"gitId":"ivanaitzliddat"},"content":"\u003e It is used as a shortcut in several commands for identifying a group of individual persons.","lastModifiedDate":"2022-03-23"},{"lineNumber":385,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":386,"author":{"gitId":"ivanaitzliddat"},"content":"Format: `group /list`","lastModifiedDate":"2022-03-23"},{"lineNumber":387,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":388,"author":{"gitId":"ivanaitzliddat"},"content":"Example of usage:","lastModifiedDate":"2022-03-23"},{"lineNumber":389,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":390,"author":{"gitId":"froststein"},"content":"![Group list command Screenshot](https://raw.githubusercontent.com/AY2122s2-cs2113t-t10-1/tp/master/docs/images/userguide/GroupListCommand.png)","lastModifiedDate":"2022-03-24"},{"lineNumber":391,"author":{"gitId":"ivanaitzliddat"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-23"},{"lineNumber":392,"author":{"gitId":"ivanaitzliddat"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-23"},{"lineNumber":393,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":394,"author":{"gitId":"warrencxw"},"content":"### Listing all available commands: `help`","lastModifiedDate":"2022-03-22"},{"lineNumber":395,"author":{"gitId":"warrencxw"},"content":"\u003e Displays all available SplitLah commands and their syntax.","lastModifiedDate":"2022-03-23"},{"lineNumber":396,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":397,"author":{"gitId":"warrencxw"},"content":"Format: `help`","lastModifiedDate":"2022-03-23"},{"lineNumber":398,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":399,"author":{"gitId":"froststein"},"content":"Example of usage:","lastModifiedDate":"2022-03-24"},{"lineNumber":400,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":401,"author":{"gitId":"froststein"},"content":"![Help command Screenshot](https://raw.githubusercontent.com/AY2122s2-cs2113t-t10-1/tp/master/docs/images/userguide/HelpCommand.png)","lastModifiedDate":"2022-03-24"},{"lineNumber":402,"author":{"gitId":"froststein"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-24"},{"lineNumber":403,"author":{"gitId":"froststein"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-03-24"},{"lineNumber":404,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":405,"author":{"gitId":"froststein"},"content":"### Exit","lastModifiedDate":"2022-03-15"},{"lineNumber":406,"author":{"gitId":"froststein"},"content":"\u003e Exits the application.","lastModifiedDate":"2022-03-15"},{"lineNumber":407,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":408,"author":{"gitId":"froststein"},"content":"Format: `exit`","lastModifiedDate":"2022-03-15"},{"lineNumber":409,"author":{"gitId":"froststein"},"content":" ","lastModifiedDate":"2022-03-15"},{"lineNumber":410,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-24"},{"lineNumber":411,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":412,"author":{"gitId":"matheril"},"content":"**Q**: Is data saved to the disk upon exit?","lastModifiedDate":"2022-03-12"},{"lineNumber":413,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":414,"author":{"gitId":"matheril"},"content":"**A**: SplitLah 1.0 does not currently support saving data to the disk.","lastModifiedDate":"2022-03-12"},{"lineNumber":415,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":416,"author":{"gitId":"-"},"content":"## Command Summary","lastModifiedDate":"2020-05-24"},{"lineNumber":417,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":418,"author":{"gitId":"matheril"},"content":"| Action                                   | Format                                                                                                                                                                                                             |","lastModifiedDate":"2022-03-12"},{"lineNumber":419,"author":{"gitId":"warrencxw"},"content":"|------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2022-03-22"},{"lineNumber":420,"author":{"gitId":"warrencxw"},"content":"| Create a new session                     | Format: `session /create /n [SESSION_NAME] /d [DATE] /pl [NAME1 NAME2 …] [\u003c/gid [GROUP_ID]\u003e]`\u003cbr\u003e\u003cbr\u003e Example: `session /create /n Outing /d 15-03-2022 /pl Warren Ivan Roy`                                       |","lastModifiedDate":"2022-03-22"},{"lineNumber":421,"author":{"gitId":"warrencxw"},"content":"| Delete an existing session               | Format: `session /delete /sid [SESSION_ID]`\u003cbr\u003e\u003cbr\u003eExample: `session /delete /sid 1`                                                                                                                               |","lastModifiedDate":"2022-03-22"},{"lineNumber":422,"author":{"gitId":"warrencxw"},"content":"| View an existing session                 | Format: `session /view /sid [SESSION_ID]`\u003cbr\u003e\u003cbr\u003eExample: `session /view /sid 1`                                                                                                                                   |","lastModifiedDate":"2022-03-22"},{"lineNumber":423,"author":{"gitId":"warrencxw"},"content":"| List all sessions                        | Format: `session /list`                                                                                                                                                                                            |","lastModifiedDate":"2022-03-22"},{"lineNumber":424,"author":{"gitId":"warrencxw"},"content":"| Create activity and split costs evenly   | Format: `activity /create /sid [SESSION_ID] /n [ACTIVITY_NAME] /p [PAYER] /i [NAME1 NAME2 …] /co [TOTAL_COST]`\u003cbr\u003e\u003cbr\u003eExample: `activity /create /sid 1 /n Lunch /p Warren /i Warren, Ivan, Roy /co 7.5`           |","lastModifiedDate":"2022-03-22"},{"lineNumber":425,"author":{"gitId":"warrencxw"},"content":"| Create activity and split costs manually | Format: `activity /create /sid [SESSION_ID] /n [ACTIVITY_NAME] /p [PAYER] /i [NAME1 NAME2 …] /cl [COST1] [COST2]...`\u003cbr\u003e\u003cbr\u003eExample: `activity /create /sid 1 /n Lunch /p Warren /i Warren, Ivan, Roy /cl 1 1 5.5` |","lastModifiedDate":"2022-03-22"},{"lineNumber":426,"author":{"gitId":"froststein"},"content":"| Delete an existing activity              | Format: `activity /delete /sid [SESSION_ID] /aid [ACTIVITY_ID]`\u003cbr\u003e\u003cbr\u003eExample: `activity /delete /sid 2 /aid 1`                                                                                                   |","lastModifiedDate":"2022-03-24"},{"lineNumber":427,"author":{"gitId":"warrencxw"},"content":"| View an existing activity                | Format: `activity /view /sid [SESSION_ID] /aid [ACTIVITY_ID]` \u003cbr\u003e\u003cbr\u003eExample: `activity /view /sid 1 /aid 1`                                                                                                      |","lastModifiedDate":"2022-03-22"},{"lineNumber":428,"author":{"gitId":"warrencxw"},"content":"| List all activities                      | Format: `activity /list /sid [SESSION_ID]` \u003cbr\u003e\u003cbr\u003eExample: `activity /list /sid 1`                                                                                                                                |","lastModifiedDate":"2022-03-22"},{"lineNumber":429,"author":{"gitId":"matheril"},"content":"| Show session summary                     | Format: `session /summary /sid [SESSION_ID]`\u003cbr\u003e\u003cbr\u003eExample: `session /summary /sid 1`                                                                                                                             |","lastModifiedDate":"2022-03-12"},{"lineNumber":430,"author":{"gitId":"warrencxw"},"content":"| Create a new group                       | Format: `group /create /n [GROUP_NAME] /pl [NAME1 NAME2 …]`\u003cbr\u003e\u003cbr\u003eExample: `group /create /n SplitLah /pl Roy Ivan Warren Saurav Tianle`                                                                          |","lastModifiedDate":"2022-03-22"},{"lineNumber":431,"author":{"gitId":"warrencxw"},"content":"| Delete an existing group                 | Format: `group /delete /gid [GROUP_ID]`\u003cbr\u003e\u003cbr\u003eExample: `group /delete /gid 1`                                                                                                                                     |","lastModifiedDate":"2022-03-22"},{"lineNumber":432,"author":{"gitId":"warrencxw"},"content":"| View an existing group                   | Format: `group /view /gid [GROUP_ID]`\u003cbr\u003e\u003cbr\u003eExample: `group /view /gid 1`                                                                                                                                         |","lastModifiedDate":"2022-03-22"},{"lineNumber":433,"author":{"gitId":"warrencxw"},"content":"| List all groups                          | Format: `group /list`                                                                                                                                                                                              |","lastModifiedDate":"2022-03-22"},{"lineNumber":434,"author":{"gitId":"warrencxw"},"content":"| List all available commands              | Format: `help`                                                                                                                                                                                                     |","lastModifiedDate":"2022-03-22"},{"lineNumber":435,"author":{"gitId":"warrencxw"},"content":"| Exit                                     | Format: `exit`                                                                                                                                                                                                     |","lastModifiedDate":"2022-03-22"}],"authorContributionMap":{"lelerer":69,"ivanaitzliddat":86,"warrencxw":30,"-":32,"froststein":115,"matheril":103}},{"path":"src/main/java/seedu/splitlah/SplitLah.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.command.Command;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.data.Manager;","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.parser.Parser;","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-17"},{"lineNumber":7,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":8,"author":{"gitId":"froststein"},"content":"import java.util.logging.Level;","lastModifiedDate":"2022-03-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"froststein"},"content":"/**","lastModifiedDate":"2022-03-03"},{"lineNumber":11,"author":{"gitId":"froststein"},"content":" * Entry point of the SplitLah application.","lastModifiedDate":"2022-03-03"},{"lineNumber":12,"author":{"gitId":"froststein"},"content":" * Initializes SplitLah and starts interacting with the user.","lastModifiedDate":"2022-03-03"},{"lineNumber":13,"author":{"gitId":"froststein"},"content":" */","lastModifiedDate":"2022-03-03"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":"public class SplitLah {","lastModifiedDate":"2022-03-07"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":"    Manager manager;","lastModifiedDate":"2022-03-06"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"        new SplitLah().run();","lastModifiedDate":"2022-03-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":21,"author":{"gitId":"froststein"},"content":"    /** Sets up the required objects for application.  */","lastModifiedDate":"2022-03-03"},{"lineNumber":22,"author":{"gitId":"froststein"},"content":"    public SplitLah() {","lastModifiedDate":"2022-03-07"},{"lineNumber":23,"author":{"gitId":"froststein"},"content":"        manager \u003d new Manager(true);","lastModifiedDate":"2022-03-22"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-03"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":26,"author":{"gitId":"froststein"},"content":"    /** Runs the program until it terminates.  */","lastModifiedDate":"2022-03-03"},{"lineNumber":27,"author":{"gitId":"froststein"},"content":"    private void run() {","lastModifiedDate":"2022-03-03"},{"lineNumber":28,"author":{"gitId":"froststein"},"content":"        showWelcomeMessage();","lastModifiedDate":"2022-03-03"},{"lineNumber":29,"author":{"gitId":"froststein"},"content":"        runProcessLoop();","lastModifiedDate":"2022-03-03"},{"lineNumber":30,"author":{"gitId":"froststein"},"content":"        exitApplication();","lastModifiedDate":"2022-03-05"},{"lineNumber":31,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-03"},{"lineNumber":32,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":33,"author":{"gitId":"froststein"},"content":"    /** Prints welcome message.  */","lastModifiedDate":"2022-03-03"},{"lineNumber":34,"author":{"gitId":"froststein"},"content":"    private void showWelcomeMessage() {","lastModifiedDate":"2022-03-03"},{"lineNumber":35,"author":{"gitId":"froststein"},"content":"        manager.getUi().printWelcome();","lastModifiedDate":"2022-03-06"},{"lineNumber":36,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-03"},{"lineNumber":37,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":38,"author":{"gitId":"froststein"},"content":"    /** Exits the program.  */","lastModifiedDate":"2022-03-05"},{"lineNumber":39,"author":{"gitId":"froststein"},"content":"    private void exitApplication() {","lastModifiedDate":"2022-03-05"},{"lineNumber":40,"author":{"gitId":"froststein"},"content":"        manager.getLogger().log(Level.INFO, Message.LOGGER_SPLITLAH_APPLICATION_EXIT);","lastModifiedDate":"2022-03-17"},{"lineNumber":41,"author":{"gitId":"froststein"},"content":"        System.exit(0);","lastModifiedDate":"2022-03-03"},{"lineNumber":42,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-03"},{"lineNumber":43,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":44,"author":{"gitId":"froststein"},"content":"    /** Reads the user input until the user enters the exit command.  */","lastModifiedDate":"2022-03-05"},{"lineNumber":45,"author":{"gitId":"froststein"},"content":"    private void runProcessLoop() {","lastModifiedDate":"2022-03-03"},{"lineNumber":46,"author":{"gitId":"froststein"},"content":"        Command command;","lastModifiedDate":"2022-03-05"},{"lineNumber":47,"author":{"gitId":"froststein"},"content":"        do {","lastModifiedDate":"2022-03-03"},{"lineNumber":48,"author":{"gitId":"froststein"},"content":"            String userInput \u003d manager.getUi().readNextLine();","lastModifiedDate":"2022-03-06"},{"lineNumber":49,"author":{"gitId":"froststein"},"content":"            command \u003d Parser.getCommand(userInput);","lastModifiedDate":"2022-03-05"},{"lineNumber":50,"author":{"gitId":"froststein"},"content":"            command.run(manager);","lastModifiedDate":"2022-03-06"},{"lineNumber":51,"author":{"gitId":"froststein"},"content":"        } while (!Command.isExitCommand(command));","lastModifiedDate":"2022-03-05"},{"lineNumber":52,"author":{"gitId":"froststein"},"content":"        manager.saveProfile();","lastModifiedDate":"2022-03-22"},{"lineNumber":53,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"froststein":49,"-":5}},{"path":"src/main/java/seedu/splitlah/command/ActivityCreateCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah.command;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.data.Activity;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.data.Manager;","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.data.Person;","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.data.PersonList;","lastModifiedDate":"2022-03-25"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.data.Session;","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.exceptions.InvalidDataException;","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-08"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-03-08"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":"import java.util.logging.Level;","lastModifiedDate":"2022-03-17"},{"lineNumber":14,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":15,"author":{"gitId":"ivanaitzliddat"},"content":"/**","lastModifiedDate":"2022-03-04"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":" * Represents a command that creates an Activity object from user input and stores it in the Session object.","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":" *","lastModifiedDate":"2022-03-21"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":" * @author Ivan","lastModifiedDate":"2022-03-21"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":" */","lastModifiedDate":"2022-03-04"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"public class ActivityCreateCommand extends Command {","lastModifiedDate":"2022-03-04"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"  ","lastModifiedDate":"2022-03-04"},{"lineNumber":22,"author":{"gitId":"ivanaitzliddat"},"content":"    private static final String COMMAND_SUCCESS \u003d \"The activity was created successfully.\\n\";","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-11"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"    private int sessionId;","lastModifiedDate":"2022-03-04"},{"lineNumber":25,"author":{"gitId":"ivanaitzliddat"},"content":"    private String activityName;","lastModifiedDate":"2022-03-04"},{"lineNumber":26,"author":{"gitId":"ivanaitzliddat"},"content":"    private double totalCost;","lastModifiedDate":"2022-03-09"},{"lineNumber":27,"author":{"gitId":"ivanaitzliddat"},"content":"    private String payer;","lastModifiedDate":"2022-03-04"},{"lineNumber":28,"author":{"gitId":"ivanaitzliddat"},"content":"    private String[] involvedList;","lastModifiedDate":"2022-03-04"},{"lineNumber":29,"author":{"gitId":"ivanaitzliddat"},"content":"    private double[] costList;","lastModifiedDate":"2022-03-04"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":"    private double gst;","lastModifiedDate":"2022-03-21"},{"lineNumber":31,"author":{"gitId":"warrencxw"},"content":"    private double serviceCharge;","lastModifiedDate":"2022-03-21"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":33,"author":{"gitId":"ivanaitzliddat"},"content":"    private static final double ZERO_COST_PAID \u003d 0;","lastModifiedDate":"2022-03-14"},{"lineNumber":34,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final double ZERO_COST_OWED \u003d 0;","lastModifiedDate":"2022-03-15"},{"lineNumber":35,"author":{"gitId":"ivanaitzliddat"},"content":"    private static final int NO_COST \u003d 0;","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":37,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-04"},{"lineNumber":38,"author":{"gitId":"froststein"},"content":"     * Initializes an ActivityCreateCommand object.","lastModifiedDate":"2022-03-23"},{"lineNumber":39,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-03-04"},{"lineNumber":40,"author":{"gitId":"warrencxw"},"content":"     * @param sessionId     An integer that uniquely identifies a session.","lastModifiedDate":"2022-03-09"},{"lineNumber":41,"author":{"gitId":"warrencxw"},"content":"     * @param activityName  A String object that represents the Activity object\u0027s name.","lastModifiedDate":"2022-03-09"},{"lineNumber":42,"author":{"gitId":"warrencxw"},"content":"     * @param totalCost     A double that represents total cost of the activity.","lastModifiedDate":"2022-03-09"},{"lineNumber":43,"author":{"gitId":"froststein"},"content":"     * @param payer         A String object that represents the name of the person who paid for the activity.","lastModifiedDate":"2022-03-23"},{"lineNumber":44,"author":{"gitId":"froststein"},"content":"     * @param involvedList  An array of String objects that represents the names of the persons","lastModifiedDate":"2022-03-23"},{"lineNumber":45,"author":{"gitId":"froststein"},"content":"     *                      who are involved in the activity.","lastModifiedDate":"2022-03-23"},{"lineNumber":46,"author":{"gitId":"froststein"},"content":"     * @param costList      A double array object that represents the respective costs of","lastModifiedDate":"2022-03-23"},{"lineNumber":47,"author":{"gitId":"froststein"},"content":"     *                      each person involved in the activity.","lastModifiedDate":"2022-03-23"},{"lineNumber":48,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param gst           A double that represents the GST percentage to be included for the cost of the activity.","lastModifiedDate":"2022-03-25"},{"lineNumber":49,"author":{"gitId":"froststein"},"content":"     * @param serviceCharge A double that represents the service charge to be included for the cost of the activity.","lastModifiedDate":"2022-03-23"},{"lineNumber":50,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-04"},{"lineNumber":51,"author":{"gitId":"ivanaitzliddat"},"content":"    public ActivityCreateCommand(int sessionId, String activityName, double totalCost, String payer,","lastModifiedDate":"2022-03-09"},{"lineNumber":52,"author":{"gitId":"warrencxw"},"content":"                                 String[] involvedList, double[] costList, double gst, double serviceCharge) {","lastModifiedDate":"2022-03-21"},{"lineNumber":53,"author":{"gitId":"ivanaitzliddat"},"content":"        assert sessionId \u003e 0 : Message.ASSERT_ACTIVITYCREATE_SESSION_ID_LESS_THAN_ONE;","lastModifiedDate":"2022-03-17"},{"lineNumber":54,"author":{"gitId":"ivanaitzliddat"},"content":"        assert activityName !\u003d null : Message.ASSERT_ACTIVITYCREATE_ACTIVITY_NAME_MISSING;","lastModifiedDate":"2022-03-17"},{"lineNumber":55,"author":{"gitId":"ivanaitzliddat"},"content":"        assert payer !\u003d null : Message.ASSERT_ACTIVITYCREATE_PAYER_NAME_MISSING;","lastModifiedDate":"2022-03-17"},{"lineNumber":56,"author":{"gitId":"ivanaitzliddat"},"content":"        assert involvedList !\u003d null : Message.ASSERT_ACTIVITYCREATE_INVOLVED_LIST_ARRAY_NULL;","lastModifiedDate":"2022-03-18"},{"lineNumber":57,"author":{"gitId":"ivanaitzliddat"},"content":"        this.sessionId \u003d sessionId;","lastModifiedDate":"2022-03-04"},{"lineNumber":58,"author":{"gitId":"ivanaitzliddat"},"content":"        this.activityName \u003d activityName;","lastModifiedDate":"2022-03-04"},{"lineNumber":59,"author":{"gitId":"ivanaitzliddat"},"content":"        this.totalCost \u003d totalCost;","lastModifiedDate":"2022-03-09"},{"lineNumber":60,"author":{"gitId":"ivanaitzliddat"},"content":"        this.payer \u003d payer;","lastModifiedDate":"2022-03-04"},{"lineNumber":61,"author":{"gitId":"ivanaitzliddat"},"content":"        this.involvedList \u003d involvedList;","lastModifiedDate":"2022-03-04"},{"lineNumber":62,"author":{"gitId":"ivanaitzliddat"},"content":"        this.costList \u003d costList;","lastModifiedDate":"2022-03-04"},{"lineNumber":63,"author":{"gitId":"ivanaitzliddat"},"content":"        this.gst \u003d gst;","lastModifiedDate":"2022-03-04"},{"lineNumber":64,"author":{"gitId":"ivanaitzliddat"},"content":"        this.serviceCharge \u003d serviceCharge;","lastModifiedDate":"2022-03-04"},{"lineNumber":65,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-04"},{"lineNumber":66,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":67,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":68,"author":{"gitId":"ivanaitzliddat"},"content":"     * Adds all relevant activity costs to each involved person\u0027s list of activity costs.","lastModifiedDate":"2022-03-09"},{"lineNumber":69,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-03-09"},{"lineNumber":70,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param involvedPersonList An ArrayList object containing Person objects","lastModifiedDate":"2022-03-21"},{"lineNumber":71,"author":{"gitId":"ivanaitzliddat"},"content":"     *                           each representing a person involved in the activity.","lastModifiedDate":"2022-03-21"},{"lineNumber":72,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param personPaid         A Person object representing the person who paid for the activity.","lastModifiedDate":"2022-03-21"},{"lineNumber":73,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param activityId         An integer that uniquely identifies an activity.","lastModifiedDate":"2022-03-21"},{"lineNumber":74,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws InvalidDataException If the activityCost cannot be created from the given parameters.","lastModifiedDate":"2022-03-09"},{"lineNumber":75,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":76,"author":{"gitId":"ivanaitzliddat"},"content":"    private void addAllActivityCost(ArrayList\u003cPerson\u003e involvedPersonList, Person personPaid, int activityId)","lastModifiedDate":"2022-03-15"},{"lineNumber":77,"author":{"gitId":"ivanaitzliddat"},"content":"            throws InvalidDataException {","lastModifiedDate":"2022-03-15"},{"lineNumber":78,"author":{"gitId":"ivanaitzliddat"},"content":"        boolean hasAddedForPersonPaid \u003d false;","lastModifiedDate":"2022-03-15"},{"lineNumber":79,"author":{"gitId":"ivanaitzliddat"},"content":"        for (int i \u003d 0; i \u003c involvedPersonList.size(); i++) {","lastModifiedDate":"2022-03-08"},{"lineNumber":80,"author":{"gitId":"ivanaitzliddat"},"content":"            Person person \u003d involvedPersonList.get(i);","lastModifiedDate":"2022-03-08"},{"lineNumber":81,"author":{"gitId":"ivanaitzliddat"},"content":"            addCostOwedAndCostPaid(personPaid, activityId, i, person);","lastModifiedDate":"2022-03-15"},{"lineNumber":82,"author":{"gitId":"ivanaitzliddat"},"content":"            hasAddedForPersonPaid \u003d isPersonPaid(personPaid, hasAddedForPersonPaid, person);","lastModifiedDate":"2022-03-15"},{"lineNumber":83,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":84,"author":{"gitId":"ivanaitzliddat"},"content":"        if (!hasAddedForPersonPaid) {","lastModifiedDate":"2022-03-15"},{"lineNumber":85,"author":{"gitId":"ivanaitzliddat"},"content":"            personPaid.addActivityCost(activityId, totalCost, ZERO_COST_OWED);","lastModifiedDate":"2022-03-15"},{"lineNumber":86,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":87,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":88,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":89,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-15"},{"lineNumber":90,"author":{"gitId":"ivanaitzliddat"},"content":"     * Checks if the Person object currently referred to represents the person who paid for the activity.","lastModifiedDate":"2022-03-15"},{"lineNumber":91,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-03-15"},{"lineNumber":92,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param personPaid            A Person object representing the person who paid for the activity.","lastModifiedDate":"2022-03-21"},{"lineNumber":93,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param hasAddedForPersonPaid A boolean representing whether the activity cost has been added for the person who","lastModifiedDate":"2022-03-15"},{"lineNumber":94,"author":{"gitId":"ivanaitzliddat"},"content":"     *                              paid for the activity.","lastModifiedDate":"2022-03-15"},{"lineNumber":95,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param person                A Person object representing the person currently referred to","lastModifiedDate":"2022-03-21"},{"lineNumber":96,"author":{"gitId":"ivanaitzliddat"},"content":"     *                              among the persons involved.","lastModifiedDate":"2022-03-21"},{"lineNumber":97,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return true if the Person object currently referred to represents the person who paid for the activity,","lastModifiedDate":"2022-03-15"},{"lineNumber":98,"author":{"gitId":"ivanaitzliddat"},"content":"     *         hasAddedForPersonPaid otherwise.","lastModifiedDate":"2022-03-15"},{"lineNumber":99,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-15"},{"lineNumber":100,"author":{"gitId":"ivanaitzliddat"},"content":"    private boolean isPersonPaid(Person personPaid, boolean hasAddedForPersonPaid, Person person) {","lastModifiedDate":"2022-03-15"},{"lineNumber":101,"author":{"gitId":"ivanaitzliddat"},"content":"        if (person \u003d\u003d personPaid) {","lastModifiedDate":"2022-03-15"},{"lineNumber":102,"author":{"gitId":"ivanaitzliddat"},"content":"            hasAddedForPersonPaid \u003d true;","lastModifiedDate":"2022-03-15"},{"lineNumber":103,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":104,"author":{"gitId":"ivanaitzliddat"},"content":"        return hasAddedForPersonPaid;","lastModifiedDate":"2022-03-15"},{"lineNumber":105,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":106,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":107,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":108,"author":{"gitId":"ivanaitzliddat"},"content":"     * Adds cost owed and cost paid to each individual\u0027s list of activity costs.","lastModifiedDate":"2022-03-09"},{"lineNumber":109,"author":{"gitId":"ivanaitzliddat"},"content":"     * Checks if the current person is the person who paid for the activity.","lastModifiedDate":"2022-03-09"},{"lineNumber":110,"author":{"gitId":"ivanaitzliddat"},"content":"     * If it is, the cost paid is set to the total cost of the activity.","lastModifiedDate":"2022-03-09"},{"lineNumber":111,"author":{"gitId":"ivanaitzliddat"},"content":"     * Else, the cost paid is set to 0.","lastModifiedDate":"2022-03-09"},{"lineNumber":112,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-03-09"},{"lineNumber":113,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param personPaid      A Person object representing the person who paid for the activity.","lastModifiedDate":"2022-03-21"},{"lineNumber":114,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param activityId      An integer that uniquely identifies an activity.","lastModifiedDate":"2022-03-21"},{"lineNumber":115,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param indexOfCostOwed An integer representing the index of the cost owed in the list of costs.","lastModifiedDate":"2022-03-21"},{"lineNumber":116,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param person          A person object representing the person whose costs are added to the","lastModifiedDate":"2022-03-21"},{"lineNumber":117,"author":{"gitId":"ivanaitzliddat"},"content":"     *                        list of activity costs.","lastModifiedDate":"2022-03-21"},{"lineNumber":118,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws InvalidDataException If the activityCost cannot be created from the given parameters.","lastModifiedDate":"2022-03-09"},{"lineNumber":119,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":120,"author":{"gitId":"ivanaitzliddat"},"content":"    private void addCostOwedAndCostPaid(Person personPaid, int activityId, int indexOfCostOwed, Person person)","lastModifiedDate":"2022-03-15"},{"lineNumber":121,"author":{"gitId":"ivanaitzliddat"},"content":"            throws InvalidDataException {","lastModifiedDate":"2022-03-15"},{"lineNumber":122,"author":{"gitId":"ivanaitzliddat"},"content":"        if (person \u003d\u003d personPaid) {","lastModifiedDate":"2022-03-08"},{"lineNumber":123,"author":{"gitId":"ivanaitzliddat"},"content":"            person.addActivityCost(activityId, totalCost, costList[indexOfCostOwed]);","lastModifiedDate":"2022-03-09"},{"lineNumber":124,"author":{"gitId":"ivanaitzliddat"},"content":"        } else {","lastModifiedDate":"2022-03-08"},{"lineNumber":125,"author":{"gitId":"ivanaitzliddat"},"content":"            person.addActivityCost(activityId, ZERO_COST_PAID, costList[indexOfCostOwed]);","lastModifiedDate":"2022-03-09"},{"lineNumber":126,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":127,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":128,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":129,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":130,"author":{"gitId":"ivanaitzliddat"},"content":"     * Updates cost and list of costs by adding the extra charges and","lastModifiedDate":"2022-03-09"},{"lineNumber":131,"author":{"gitId":"ivanaitzliddat"},"content":"     * checks if cost list or cost was provided by the user.","lastModifiedDate":"2022-03-09"},{"lineNumber":132,"author":{"gitId":"ivanaitzliddat"},"content":"     * If cost was not provided by the user, the list of costs is summed up to get the total cost of the activity.","lastModifiedDate":"2022-03-09"},{"lineNumber":133,"author":{"gitId":"ivanaitzliddat"},"content":"     * Else, the total cost is distributed evenly.","lastModifiedDate":"2022-03-09"},{"lineNumber":134,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":135,"author":{"gitId":"ivanaitzliddat"},"content":"    private void updateCostAndCostList() {","lastModifiedDate":"2022-03-08"},{"lineNumber":136,"author":{"gitId":"ivanaitzliddat"},"content":"        boolean isZeroCost \u003d totalCost \u003d\u003d NO_COST;","lastModifiedDate":"2022-03-09"},{"lineNumber":137,"author":{"gitId":"ivanaitzliddat"},"content":"        if (isZeroCost) {","lastModifiedDate":"2022-03-08"},{"lineNumber":138,"author":{"gitId":"ivanaitzliddat"},"content":"            updateCostListWithExtraCharges();","lastModifiedDate":"2022-03-15"},{"lineNumber":139,"author":{"gitId":"ivanaitzliddat"},"content":"            calculateTotalCost();","lastModifiedDate":"2022-03-15"},{"lineNumber":140,"author":{"gitId":"ivanaitzliddat"},"content":"        } else {","lastModifiedDate":"2022-03-08"},{"lineNumber":141,"author":{"gitId":"ivanaitzliddat"},"content":"            updateCostWithExtraCharges();","lastModifiedDate":"2022-03-15"},{"lineNumber":142,"author":{"gitId":"ivanaitzliddat"},"content":"            int numberOfPeopleInvolved \u003d involvedList.length;","lastModifiedDate":"2022-03-08"},{"lineNumber":143,"author":{"gitId":"ivanaitzliddat"},"content":"            costList \u003d distributeCostEvenly(numberOfPeopleInvolved);","lastModifiedDate":"2022-03-15"},{"lineNumber":144,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":145,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":146,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":147,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":148,"author":{"gitId":"ivanaitzliddat"},"content":"     * Updates cost list by including the extra charges.","lastModifiedDate":"2022-03-09"},{"lineNumber":149,"author":{"gitId":"ivanaitzliddat"},"content":"     * Extra charges may include GST and service charge.","lastModifiedDate":"2022-03-25"},{"lineNumber":150,"author":{"gitId":"ivanaitzliddat"},"content":"     * Assumption: GST and service charge are non-negative values.","lastModifiedDate":"2022-03-25"},{"lineNumber":151,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":152,"author":{"gitId":"ivanaitzliddat"},"content":"    private void updateCostListWithExtraCharges() {","lastModifiedDate":"2022-03-15"},{"lineNumber":153,"author":{"gitId":"ivanaitzliddat"},"content":"        double extraCharges \u003d getExtraCharges();","lastModifiedDate":"2022-03-15"},{"lineNumber":154,"author":{"gitId":"ivanaitzliddat"},"content":"        for (int i \u003d 0; i \u003c costList.length; i++) {","lastModifiedDate":"2022-03-08"},{"lineNumber":155,"author":{"gitId":"ivanaitzliddat"},"content":"            costList[i] *\u003d extraCharges;","lastModifiedDate":"2022-03-08"},{"lineNumber":156,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":157,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":158,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":159,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":160,"author":{"gitId":"ivanaitzliddat"},"content":"     * Updates the total cost of the activity by summing up the costs in the list of costs.","lastModifiedDate":"2022-03-21"},{"lineNumber":161,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":162,"author":{"gitId":"ivanaitzliddat"},"content":"    private void calculateTotalCost() {","lastModifiedDate":"2022-03-15"},{"lineNumber":163,"author":{"gitId":"ivanaitzliddat"},"content":"        for (double cost : costList) {","lastModifiedDate":"2022-03-15"},{"lineNumber":164,"author":{"gitId":"ivanaitzliddat"},"content":"            totalCost +\u003d cost;","lastModifiedDate":"2022-03-15"},{"lineNumber":165,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":166,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":167,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":168,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":169,"author":{"gitId":"ivanaitzliddat"},"content":"     * Updates total cost by including the extra charges.","lastModifiedDate":"2022-03-21"},{"lineNumber":170,"author":{"gitId":"ivanaitzliddat"},"content":"     * Extra charges may include GST and service charge.","lastModifiedDate":"2022-03-25"},{"lineNumber":171,"author":{"gitId":"ivanaitzliddat"},"content":"     * Assumption: GST and service charge are non-negative values.","lastModifiedDate":"2022-03-25"},{"lineNumber":172,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":173,"author":{"gitId":"ivanaitzliddat"},"content":"    private void updateCostWithExtraCharges() {","lastModifiedDate":"2022-03-15"},{"lineNumber":174,"author":{"gitId":"ivanaitzliddat"},"content":"        double extraCharges \u003d getExtraCharges();","lastModifiedDate":"2022-03-15"},{"lineNumber":175,"author":{"gitId":"ivanaitzliddat"},"content":"        totalCost *\u003d extraCharges;","lastModifiedDate":"2022-03-15"},{"lineNumber":176,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":177,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":178,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":179,"author":{"gitId":"ivanaitzliddat"},"content":"     * Returns a double representing the extra charges that is to be included in costs of the activity.","lastModifiedDate":"2022-03-09"},{"lineNumber":180,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-03-09"},{"lineNumber":181,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return A double representing the extra charges.","lastModifiedDate":"2022-03-09"},{"lineNumber":182,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":183,"author":{"gitId":"ivanaitzliddat"},"content":"    private double getExtraCharges() {","lastModifiedDate":"2022-03-15"},{"lineNumber":184,"author":{"gitId":"warrencxw"},"content":"        double gstMultiplier \u003d 1 + gst / 100;","lastModifiedDate":"2022-03-21"},{"lineNumber":185,"author":{"gitId":"warrencxw"},"content":"        double serviceChargeMultiplier \u003d 1 + serviceCharge / 100;","lastModifiedDate":"2022-03-21"},{"lineNumber":186,"author":{"gitId":"ivanaitzliddat"},"content":"        return gstMultiplier * serviceChargeMultiplier;","lastModifiedDate":"2022-03-08"},{"lineNumber":187,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":188,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":189,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":190,"author":{"gitId":"ivanaitzliddat"},"content":"     * Returns an array of doubles of the costs that has been distributed evenly","lastModifiedDate":"2022-03-09"},{"lineNumber":191,"author":{"gitId":"ivanaitzliddat"},"content":"     * among the persons involved in the activity.","lastModifiedDate":"2022-03-09"},{"lineNumber":192,"author":{"gitId":"ivanaitzliddat"},"content":"     * Divides the total cost by the number of people involved in the activity.","lastModifiedDate":"2022-03-09"},{"lineNumber":193,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-03-09"},{"lineNumber":194,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param numberOfPeopleInvolved An integer representing the number of people involved in the activity.","lastModifiedDate":"2022-03-21"},{"lineNumber":195,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return An array of doubles representing the costs of each person involved in the activity.","lastModifiedDate":"2022-03-09"},{"lineNumber":196,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":197,"author":{"gitId":"ivanaitzliddat"},"content":"    private double[] distributeCostEvenly(int numberOfPeopleInvolved) {","lastModifiedDate":"2022-03-15"},{"lineNumber":198,"author":{"gitId":"ivanaitzliddat"},"content":"        double dividedCost \u003d totalCost / numberOfPeopleInvolved;","lastModifiedDate":"2022-03-09"},{"lineNumber":199,"author":{"gitId":"ivanaitzliddat"},"content":"        double[] costList \u003d new double[numberOfPeopleInvolved];","lastModifiedDate":"2022-03-08"},{"lineNumber":200,"author":{"gitId":"ivanaitzliddat"},"content":"        Arrays.fill(costList, dividedCost);","lastModifiedDate":"2022-03-08"},{"lineNumber":201,"author":{"gitId":"ivanaitzliddat"},"content":"        return costList;","lastModifiedDate":"2022-03-08"},{"lineNumber":202,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":203,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":204,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":205,"author":{"gitId":"froststein"},"content":"     * Runs the command to create an Activity object to be stored in a Session object managed by the Profile object.","lastModifiedDate":"2022-03-23"},{"lineNumber":206,"author":{"gitId":"ivanaitzliddat"},"content":"     * Gets relevant parameters to create an Activity object.","lastModifiedDate":"2022-03-14"},{"lineNumber":207,"author":{"gitId":"ivanaitzliddat"},"content":"     * If no errors getting parameters, an Activity object is created and added to the session.","lastModifiedDate":"2022-03-14"},{"lineNumber":208,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-03-14"},{"lineNumber":209,"author":{"gitId":"froststein"},"content":"     * @param manager A Manager object that manages the TextUI, Profile and Storage object.","lastModifiedDate":"2022-03-23"},{"lineNumber":210,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":211,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-03-14"},{"lineNumber":212,"author":{"gitId":"ivanaitzliddat"},"content":"    public void run(Manager manager) {","lastModifiedDate":"2022-03-14"},{"lineNumber":213,"author":{"gitId":"ivanaitzliddat"},"content":"        boolean hasDuplicates \u003d PersonList.hasNameDuplicates(involvedList);","lastModifiedDate":"2022-03-25"},{"lineNumber":214,"author":{"gitId":"ivanaitzliddat"},"content":"        if (hasDuplicates) {","lastModifiedDate":"2022-03-14"},{"lineNumber":215,"author":{"gitId":"ivanaitzliddat"},"content":"            manager.getUi().printlnMessage(Message.ERROR_ACTIVITYCREATE_DUPLICATE_NAME);","lastModifiedDate":"2022-03-14"},{"lineNumber":216,"author":{"gitId":"ivanaitzliddat"},"content":"            Manager.getLogger().log(Level.FINEST,Message.LOGGER_ACTIVITYCREATE_DUPLICATE_NAMES_IN_INVOLVED_LIST);","lastModifiedDate":"2022-03-18"},{"lineNumber":217,"author":{"gitId":"ivanaitzliddat"},"content":"            return;","lastModifiedDate":"2022-03-14"},{"lineNumber":218,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":219,"author":{"gitId":"ivanaitzliddat"},"content":"        try {","lastModifiedDate":"2022-03-14"},{"lineNumber":220,"author":{"gitId":"ivanaitzliddat"},"content":"            updateCostAndCostList();","lastModifiedDate":"2022-03-14"},{"lineNumber":221,"author":{"gitId":"ivanaitzliddat"},"content":"            assert costList !\u003d null : Message.ASSERT_ACTIVITYCREATE_COST_LIST_ARRAY_NULL;","lastModifiedDate":"2022-03-18"},{"lineNumber":222,"author":{"gitId":"ivanaitzliddat"},"content":"            assert totalCost \u003e 0 : Message.ASSERT_ACTIVITYCREATE_TOTAL_COST_LESS_THAN_ONE;","lastModifiedDate":"2022-03-17"},{"lineNumber":223,"author":{"gitId":"ivanaitzliddat"},"content":"            Session session \u003d manager.getProfile().getSession(sessionId);","lastModifiedDate":"2022-03-14"},{"lineNumber":224,"author":{"gitId":"ivanaitzliddat"},"content":"            Person personPaid \u003d session.getPersonByName(payer);","lastModifiedDate":"2022-03-14"},{"lineNumber":225,"author":{"gitId":"ivanaitzliddat"},"content":"            ArrayList\u003cPerson\u003e involvedPersonList \u003d session.getPersonListByName(involvedList);","lastModifiedDate":"2022-03-14"},{"lineNumber":226,"author":{"gitId":"ivanaitzliddat"},"content":"            int activityId \u003d manager.getProfile().getNewActivityId();","lastModifiedDate":"2022-03-15"},{"lineNumber":227,"author":{"gitId":"ivanaitzliddat"},"content":"            addAllActivityCost(involvedPersonList, personPaid, activityId);","lastModifiedDate":"2022-03-15"},{"lineNumber":228,"author":{"gitId":"ivanaitzliddat"},"content":"            Activity activity \u003d new Activity(activityId, activityName, totalCost, personPaid, involvedPersonList);","lastModifiedDate":"2022-03-14"},{"lineNumber":229,"author":{"gitId":"ivanaitzliddat"},"content":"            session.addActivity(activity);","lastModifiedDate":"2022-03-14"},{"lineNumber":230,"author":{"gitId":"froststein"},"content":"            manager.saveProfile();","lastModifiedDate":"2022-03-22"},{"lineNumber":231,"author":{"gitId":"ivanaitzliddat"},"content":"            manager.getUi().printlnMessageWithDivider(COMMAND_SUCCESS + activity);","lastModifiedDate":"2022-03-14"},{"lineNumber":232,"author":{"gitId":"ivanaitzliddat"},"content":"            Manager.getLogger().log(Level.FINEST,Message.LOGGER_ACTIVITYCREATE_ACTIVITY_ADDED + activityId);","lastModifiedDate":"2022-03-18"},{"lineNumber":233,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (InvalidDataException e) {","lastModifiedDate":"2022-03-14"},{"lineNumber":234,"author":{"gitId":"ivanaitzliddat"},"content":"            manager.getUi().printlnMessage(e.getMessage());","lastModifiedDate":"2022-03-14"},{"lineNumber":235,"author":{"gitId":"ivanaitzliddat"},"content":"            Manager.getLogger().log(Level.FINEST,Message.LOGGER_ACTIVITYCREATE_FAILED_ADDING_ACTIVITY","lastModifiedDate":"2022-03-18"},{"lineNumber":236,"author":{"gitId":"ivanaitzliddat"},"content":"                    + \"\\n\" + e.getMessage());","lastModifiedDate":"2022-03-17"},{"lineNumber":237,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":238,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":239,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":240,"author":{"gitId":"ivanaitzliddat"},"content":"}","lastModifiedDate":"2022-03-04"}],"authorContributionMap":{"ivanaitzliddat":219,"warrencxw":9,"froststein":12}},{"path":"src/main/java/seedu/splitlah/command/ActivityDeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah.command;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.data.Manager;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.data.Session;","lastModifiedDate":"2022-03-12"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.exceptions.InvalidDataException;","lastModifiedDate":"2022-03-12"},{"lineNumber":6,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.exceptions.InvalidFormatException;","lastModifiedDate":"2022-03-12"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.parser.Parser;","lastModifiedDate":"2022-03-12"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.parser.ParserUtils;","lastModifiedDate":"2022-03-20"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-12"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":"import java.util.logging.Level;","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":"/**","lastModifiedDate":"2022-03-06"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":" * Represents a command which deletes an Activity object from a Session object.","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"ivanaitzliddat"},"content":" *","lastModifiedDate":"2022-03-12"},{"lineNumber":16,"author":{"gitId":"ivanaitzliddat"},"content":" * @author Ivan","lastModifiedDate":"2022-03-12"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":" */","lastModifiedDate":"2022-03-06"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"public class ActivityDeleteCommand extends Command {","lastModifiedDate":"2022-03-06"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String COMMAND_TEXT \u003d \"activity /delete\";","lastModifiedDate":"2022-03-06"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"    public static final String COMMAND_FORMAT \u003d \"Syntax: activity /delete /sid [SESSION_ID] /aid [ACTIVITY_ID]\";","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"    private static final String COMMAND_SUCCESS \u003d \"The activity was deleted successfully.\";","lastModifiedDate":"2022-03-12"},{"lineNumber":25,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"    public static final String[] COMMAND_DELIMITERS \u003d {","lastModifiedDate":"2022-03-15"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"        ParserUtils.SESSION_ID_DELIMITER,","lastModifiedDate":"2022-03-20"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"        ParserUtils.ACTIVITY_ID_DELIMITER ","lastModifiedDate":"2022-03-20"},{"lineNumber":29,"author":{"gitId":"warrencxw"},"content":"    };","lastModifiedDate":"2022-03-15"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":"    ","lastModifiedDate":"2022-03-15"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"    private int sessionId;","lastModifiedDate":"2022-03-06"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"    private int activityId;","lastModifiedDate":"2022-03-06"},{"lineNumber":33,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":34,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-06"},{"lineNumber":35,"author":{"gitId":"ivanaitzliddat"},"content":"     * Initializes an ActivityDeleteCommand object.","lastModifiedDate":"2022-03-21"},{"lineNumber":36,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-03-06"},{"lineNumber":37,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param sessionId  An integer that uniquely identifies a session.","lastModifiedDate":"2022-03-21"},{"lineNumber":38,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param activityId An integer that uniquely identifies an activity.","lastModifiedDate":"2022-03-21"},{"lineNumber":39,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-06"},{"lineNumber":40,"author":{"gitId":"ivanaitzliddat"},"content":"    public ActivityDeleteCommand(int sessionId, int activityId) {","lastModifiedDate":"2022-03-06"},{"lineNumber":41,"author":{"gitId":"ivanaitzliddat"},"content":"        assert sessionId \u003e 0 : Message.ASSERT_ACTIVITYDELETE_SESSION_ID_NOT_INITIALIZED;","lastModifiedDate":"2022-03-19"},{"lineNumber":42,"author":{"gitId":"ivanaitzliddat"},"content":"        assert activityId \u003e 0 : Message.ASSERT_ACTIVITYDELETE_ACTIVITY_ID_NOT_INITIALIZED;","lastModifiedDate":"2022-03-19"},{"lineNumber":43,"author":{"gitId":"ivanaitzliddat"},"content":"        this.sessionId \u003d sessionId;","lastModifiedDate":"2022-03-06"},{"lineNumber":44,"author":{"gitId":"ivanaitzliddat"},"content":"        this.activityId \u003d activityId;","lastModifiedDate":"2022-03-06"},{"lineNumber":45,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":46,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":47,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-12"},{"lineNumber":48,"author":{"gitId":"ivanaitzliddat"},"content":"     * Prepares user arguments for the creation of an ActivityDeleteCommand object.","lastModifiedDate":"2022-03-12"},{"lineNumber":49,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-03-12"},{"lineNumber":50,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param commandArgs A String object representing the user\u0027s arguments.","lastModifiedDate":"2022-03-21"},{"lineNumber":51,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return An ActivityDeleteCommand object if necessary parameters were found in user arguments,","lastModifiedDate":"2022-03-12"},{"lineNumber":52,"author":{"gitId":"ivanaitzliddat"},"content":"     *         an InvalidCommand object otherwise.","lastModifiedDate":"2022-03-12"},{"lineNumber":53,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-12"},{"lineNumber":54,"author":{"gitId":"ivanaitzliddat"},"content":"    public static Command prepare(String commandArgs) {","lastModifiedDate":"2022-03-12"},{"lineNumber":55,"author":{"gitId":"ivanaitzliddat"},"content":"        try {","lastModifiedDate":"2022-03-12"},{"lineNumber":56,"author":{"gitId":"ivanaitzliddat"},"content":"            int sessionId \u003d Parser.parseSessionId(commandArgs);","lastModifiedDate":"2022-03-12"},{"lineNumber":57,"author":{"gitId":"ivanaitzliddat"},"content":"            int activityId \u003d Parser.parseActivityId(commandArgs);","lastModifiedDate":"2022-03-12"},{"lineNumber":58,"author":{"gitId":"ivanaitzliddat"},"content":"            return new ActivityDeleteCommand(sessionId, activityId);","lastModifiedDate":"2022-03-12"},{"lineNumber":59,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (InvalidFormatException e) {","lastModifiedDate":"2022-03-12"},{"lineNumber":60,"author":{"gitId":"ivanaitzliddat"},"content":"            return new InvalidCommand(e.getMessage() + \"\\n\" + COMMAND_FORMAT);","lastModifiedDate":"2022-03-12"},{"lineNumber":61,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-12"},{"lineNumber":62,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-12"},{"lineNumber":63,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":64,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-12"},{"lineNumber":65,"author":{"gitId":"froststein"},"content":"     * Runs the command to delete an Activity object from the list of activities in a Session object","lastModifiedDate":"2022-03-23"},{"lineNumber":66,"author":{"gitId":"froststein"},"content":"     * managed by the Profile object.","lastModifiedDate":"2022-03-23"},{"lineNumber":67,"author":{"gitId":"ivanaitzliddat"},"content":"     * Gets the Session object using a unique session identifier.","lastModifiedDate":"2022-03-12"},{"lineNumber":68,"author":{"gitId":"ivanaitzliddat"},"content":"     * Requests for confirmation from user to delete the Activity object.","lastModifiedDate":"2022-03-12"},{"lineNumber":69,"author":{"gitId":"ivanaitzliddat"},"content":"     * If user confirms, proceeds to remove activity from a Session object,","lastModifiedDate":"2022-03-12"},{"lineNumber":70,"author":{"gitId":"ivanaitzliddat"},"content":"     * the command aborts otherwise.","lastModifiedDate":"2022-03-12"},{"lineNumber":71,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-03-12"},{"lineNumber":72,"author":{"gitId":"froststein"},"content":"     * @param manager A Manager object that manages the TextUI, Profile and Storage object.","lastModifiedDate":"2022-03-23"},{"lineNumber":73,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-12"},{"lineNumber":74,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-03-06"},{"lineNumber":75,"author":{"gitId":"ivanaitzliddat"},"content":"    public void run(Manager manager) {","lastModifiedDate":"2022-03-06"},{"lineNumber":76,"author":{"gitId":"ivanaitzliddat"},"content":"        Session session \u003d null;","lastModifiedDate":"2022-03-12"},{"lineNumber":77,"author":{"gitId":"ivanaitzliddat"},"content":"        try {","lastModifiedDate":"2022-03-12"},{"lineNumber":78,"author":{"gitId":"ivanaitzliddat"},"content":"            session \u003d manager.getProfile().getSession(sessionId);","lastModifiedDate":"2022-03-12"},{"lineNumber":79,"author":{"gitId":"ivanaitzliddat"},"content":"            assert session !\u003d null : Message.ASSERT_ACTIVITYDELETE_SESSION_IS_NULL;","lastModifiedDate":"2022-03-19"},{"lineNumber":80,"author":{"gitId":"ivanaitzliddat"},"content":"            session.removeActivity(activityId);","lastModifiedDate":"2022-03-12"},{"lineNumber":81,"author":{"gitId":"froststein"},"content":"            manager.saveProfile();","lastModifiedDate":"2022-03-22"},{"lineNumber":82,"author":{"gitId":"lelerer"},"content":"            manager.getUi().printlnMessageWithDivider(COMMAND_SUCCESS);","lastModifiedDate":"2022-03-24"},{"lineNumber":83,"author":{"gitId":"ivanaitzliddat"},"content":"            Manager.getLogger().log(Level.FINEST, Message.LOGGER_ACTIVITYDELETE_ACTIVITY_REMOVED + activityId);","lastModifiedDate":"2022-03-19"},{"lineNumber":84,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (InvalidDataException e) {","lastModifiedDate":"2022-03-12"},{"lineNumber":85,"author":{"gitId":"lelerer"},"content":"            manager.getUi().printlnMessageWithDivider(e.getMessage());","lastModifiedDate":"2022-03-24"},{"lineNumber":86,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-12"},{"lineNumber":87,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":88,"author":{"gitId":"ivanaitzliddat"},"content":"}","lastModifiedDate":"2022-03-06"}],"authorContributionMap":{"ivanaitzliddat":72,"lelerer":2,"warrencxw":8,"froststein":6}},{"path":"src/main/java/seedu/splitlah/command/ActivityListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah.command;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":3,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.data.Activity;","lastModifiedDate":"2022-03-12"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.data.Manager;","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.data.Session;","lastModifiedDate":"2022-03-12"},{"lineNumber":6,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.exceptions.InvalidDataException;","lastModifiedDate":"2022-03-12"},{"lineNumber":7,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.exceptions.InvalidFormatException;","lastModifiedDate":"2022-03-12"},{"lineNumber":8,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.parser.Parser;","lastModifiedDate":"2022-03-12"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.parser.ParserUtils;","lastModifiedDate":"2022-03-20"},{"lineNumber":10,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-12"},{"lineNumber":11,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":12,"author":{"gitId":"lelerer"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-12"},{"lineNumber":13,"author":{"gitId":"lelerer"},"content":"import java.util.logging.Level;","lastModifiedDate":"2022-03-17"},{"lineNumber":14,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":15,"author":{"gitId":"lelerer"},"content":"/**","lastModifiedDate":"2022-03-05"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":" * Represents a command which displays the details of each Activity object within a Session object.","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"lelerer"},"content":" */","lastModifiedDate":"2022-03-05"},{"lineNumber":18,"author":{"gitId":"lelerer"},"content":"public class ActivityListCommand extends Command {","lastModifiedDate":"2022-03-05"},{"lineNumber":19,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":20,"author":{"gitId":"lelerer"},"content":"    public static final String COMMAND_TEXT \u003d \"activity /list\";","lastModifiedDate":"2022-03-05"},{"lineNumber":21,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"    public static final String COMMAND_FORMAT \u003d \"Syntax: activity /list /sid [SESSION_ID]\";","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"    public static final String[] COMMAND_DELIMITERS \u003d {","lastModifiedDate":"2022-03-15"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"        ParserUtils.SESSION_ID_DELIMITER","lastModifiedDate":"2022-03-20"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"    };","lastModifiedDate":"2022-03-15"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":28,"author":{"gitId":"lelerer"},"content":"    private int sessionId;","lastModifiedDate":"2022-03-05"},{"lineNumber":29,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":30,"author":{"gitId":"froststein"},"content":"    private static final String LIST_HEADER_PREPEND \u003d \"List of activities (Session Id #\";","lastModifiedDate":"2022-03-15"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"    private static final String LIST_CLOSER_POSTPEND \u003d \")\";","lastModifiedDate":"2022-03-12"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":33,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":34,"author":{"gitId":"froststein"},"content":"     * Initializes an ActivityListCommand object.","lastModifiedDate":"2022-03-23"},{"lineNumber":35,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-22"},{"lineNumber":36,"author":{"gitId":"froststein"},"content":"     * @param sessionId An integer that uniquely identifies a session.","lastModifiedDate":"2022-03-22"},{"lineNumber":37,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":38,"author":{"gitId":"lelerer"},"content":"    public ActivityListCommand(int sessionId) {","lastModifiedDate":"2022-03-05"},{"lineNumber":39,"author":{"gitId":"lelerer"},"content":"        assert sessionId \u003e 0 : Message.ASSERT_ACTIVITYLIST_SESSION_ID_LESS_THAN_ONE;","lastModifiedDate":"2022-03-17"},{"lineNumber":40,"author":{"gitId":"lelerer"},"content":"        this.sessionId \u003d sessionId;","lastModifiedDate":"2022-03-05"},{"lineNumber":41,"author":{"gitId":"lelerer"},"content":"    }","lastModifiedDate":"2022-03-05"},{"lineNumber":42,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":43,"author":{"gitId":"lelerer"},"content":"    /**","lastModifiedDate":"2022-03-05"},{"lineNumber":44,"author":{"gitId":"froststein"},"content":"     * Runs the command to list all existing activities in a Session object managed by the Profile Object.","lastModifiedDate":"2022-03-23"},{"lineNumber":45,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-03-09"},{"lineNumber":46,"author":{"gitId":"froststein"},"content":"     * @param manager A Manager object that manages the TextUI, Profile and Storage object.","lastModifiedDate":"2022-03-23"},{"lineNumber":47,"author":{"gitId":"lelerer"},"content":"     */","lastModifiedDate":"2022-03-05"},{"lineNumber":48,"author":{"gitId":"lelerer"},"content":"    @Override","lastModifiedDate":"2022-03-05"},{"lineNumber":49,"author":{"gitId":"froststein"},"content":"    public void run(Manager manager) {","lastModifiedDate":"2022-03-06"},{"lineNumber":50,"author":{"gitId":"lelerer"},"content":"        try {","lastModifiedDate":"2022-03-12"},{"lineNumber":51,"author":{"gitId":"lelerer"},"content":"            Session sessionToBePrinted \u003d manager.getProfile().getSession(sessionId);","lastModifiedDate":"2022-03-12"},{"lineNumber":52,"author":{"gitId":"lelerer"},"content":"            ArrayList\u003cActivity\u003e activityListToBePrinted \u003d sessionToBePrinted.getActivityList();","lastModifiedDate":"2022-03-12"},{"lineNumber":53,"author":{"gitId":"froststein"},"content":"            int activityListSize \u003d activityListToBePrinted.size();","lastModifiedDate":"2022-03-15"},{"lineNumber":54,"author":{"gitId":"lelerer"},"content":"            if (activityListToBePrinted.isEmpty()) {","lastModifiedDate":"2022-03-12"},{"lineNumber":55,"author":{"gitId":"lelerer"},"content":"                manager.getUi().printlnMessage(Message.ERROR_ACTIVITYLIST_ACTIVITY_EMPTY);","lastModifiedDate":"2022-03-12"},{"lineNumber":56,"author":{"gitId":"lelerer"},"content":"                return;","lastModifiedDate":"2022-03-12"},{"lineNumber":57,"author":{"gitId":"lelerer"},"content":"            }","lastModifiedDate":"2022-03-12"},{"lineNumber":58,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":59,"author":{"gitId":"froststein"},"content":"            manager.getUi().printlnMessageWithDashDivider(LIST_HEADER_PREPEND + sessionId + LIST_CLOSER_POSTPEND);","lastModifiedDate":"2022-03-15"},{"lineNumber":60,"author":{"gitId":"froststein"},"content":"            for (int i \u003d 0; i \u003c activityListSize - 1; i++) {","lastModifiedDate":"2022-03-15"},{"lineNumber":61,"author":{"gitId":"froststein"},"content":"                manager.getUi().printlnMessage(activityListToBePrinted.get(i).getActivitySummaryString());","lastModifiedDate":"2022-03-15"},{"lineNumber":62,"author":{"gitId":"lelerer"},"content":"            }","lastModifiedDate":"2022-03-12"},{"lineNumber":63,"author":{"gitId":"froststein"},"content":"            String lastActivityToPrint \u003d activityListToBePrinted.get(activityListSize - 1).getActivitySummaryString();","lastModifiedDate":"2022-03-15"},{"lineNumber":64,"author":{"gitId":"froststein"},"content":"            manager.getUi().printlnMessageWithDivider(lastActivityToPrint);","lastModifiedDate":"2022-03-15"},{"lineNumber":65,"author":{"gitId":"lelerer"},"content":"        } catch (InvalidDataException e) {","lastModifiedDate":"2022-03-12"},{"lineNumber":66,"author":{"gitId":"lelerer"},"content":"            manager.getUi().printlnMessage(e.getMessage());","lastModifiedDate":"2022-03-12"},{"lineNumber":67,"author":{"gitId":"lelerer"},"content":"            manager.getLogger().log(Level.FINEST, Message.LOGGER_ACTIVITYLIST_SESSION_ID_NOT_FOUND + sessionId);","lastModifiedDate":"2022-03-17"},{"lineNumber":68,"author":{"gitId":"lelerer"},"content":"        }","lastModifiedDate":"2022-03-12"},{"lineNumber":69,"author":{"gitId":"lelerer"},"content":"    }","lastModifiedDate":"2022-03-12"},{"lineNumber":70,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":71,"author":{"gitId":"lelerer"},"content":"    /**","lastModifiedDate":"2022-03-12"},{"lineNumber":72,"author":{"gitId":"froststein"},"content":"     * Prepares user arguments for the creation of an ActivityListCommand object.","lastModifiedDate":"2022-03-23"},{"lineNumber":73,"author":{"gitId":"lelerer"},"content":"     *","lastModifiedDate":"2022-03-12"},{"lineNumber":74,"author":{"gitId":"lelerer"},"content":"     * @param  commandArgs A String object that represents the user\u0027s arguments.","lastModifiedDate":"2022-03-12"},{"lineNumber":75,"author":{"gitId":"lelerer"},"content":"     * @return An ActivityListCommand object if sessionId was found in user argument,","lastModifiedDate":"2022-03-12"},{"lineNumber":76,"author":{"gitId":"lelerer"},"content":"     *         an InvalidCommand object otherwise.","lastModifiedDate":"2022-03-12"},{"lineNumber":77,"author":{"gitId":"lelerer"},"content":"     */","lastModifiedDate":"2022-03-12"},{"lineNumber":78,"author":{"gitId":"lelerer"},"content":"    public static Command prepare(String commandArgs) {","lastModifiedDate":"2022-03-12"},{"lineNumber":79,"author":{"gitId":"lelerer"},"content":"        try {","lastModifiedDate":"2022-03-12"},{"lineNumber":80,"author":{"gitId":"lelerer"},"content":"            int sessionId \u003d Parser.parseSessionId(commandArgs);","lastModifiedDate":"2022-03-12"},{"lineNumber":81,"author":{"gitId":"lelerer"},"content":"            return new ActivityListCommand(sessionId);","lastModifiedDate":"2022-03-12"},{"lineNumber":82,"author":{"gitId":"lelerer"},"content":"        } catch (InvalidFormatException e) {","lastModifiedDate":"2022-03-12"},{"lineNumber":83,"author":{"gitId":"lelerer"},"content":"            String invalidCommandMessage \u003d e.getMessage() + \"\\n\" + COMMAND_FORMAT;","lastModifiedDate":"2022-03-12"},{"lineNumber":84,"author":{"gitId":"lelerer"},"content":"            return new InvalidCommand(invalidCommandMessage);","lastModifiedDate":"2022-03-12"},{"lineNumber":85,"author":{"gitId":"lelerer"},"content":"        }","lastModifiedDate":"2022-03-12"},{"lineNumber":86,"author":{"gitId":"lelerer"},"content":"    }","lastModifiedDate":"2022-03-05"},{"lineNumber":87,"author":{"gitId":"lelerer"},"content":"}","lastModifiedDate":"2022-03-05"}],"authorContributionMap":{"lelerer":59,"ivanaitzliddat":2,"warrencxw":8,"froststein":18}},{"path":"src/main/java/seedu/splitlah/command/ActivityViewCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah.command;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":3,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.data.Activity;","lastModifiedDate":"2022-03-12"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.data.Manager;","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.data.Session;","lastModifiedDate":"2022-03-12"},{"lineNumber":6,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.exceptions.InvalidDataException;","lastModifiedDate":"2022-03-12"},{"lineNumber":7,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.exceptions.InvalidFormatException;","lastModifiedDate":"2022-03-12"},{"lineNumber":8,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.parser.Parser;","lastModifiedDate":"2022-03-12"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.parser.ParserUtils;","lastModifiedDate":"2022-03-20"},{"lineNumber":10,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":11,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"lelerer"},"content":"/**","lastModifiedDate":"2022-03-05"},{"lineNumber":13,"author":{"gitId":"froststein"},"content":" * Represents a command which displays the full details of an Activity object in a Session object.","lastModifiedDate":"2022-03-23"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":" * ","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":" * @author Tianle","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"lelerer"},"content":" */","lastModifiedDate":"2022-03-05"},{"lineNumber":17,"author":{"gitId":"lelerer"},"content":"public class ActivityViewCommand extends Command {","lastModifiedDate":"2022-03-05"},{"lineNumber":18,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":19,"author":{"gitId":"lelerer"},"content":"    public static final String COMMAND_TEXT \u003d \"activity /view\";","lastModifiedDate":"2022-03-05"},{"lineNumber":20,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"    public static final String COMMAND_FORMAT \u003d \"Syntax: activity /view /sid [SESSION_ID] /aid [ACTIVITY_ID]\";","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"    public static final String[] COMMAND_DELIMITERS \u003d { ","lastModifiedDate":"2022-03-15"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"        ParserUtils.SESSION_ID_DELIMITER,","lastModifiedDate":"2022-03-20"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"        ParserUtils.ACTIVITY_ID_DELIMITER","lastModifiedDate":"2022-03-20"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"    };","lastModifiedDate":"2022-03-15"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":28,"author":{"gitId":"lelerer"},"content":"    private int sessionId;","lastModifiedDate":"2022-03-05"},{"lineNumber":29,"author":{"gitId":"lelerer"},"content":"    private int activityId;","lastModifiedDate":"2022-03-05"},{"lineNumber":30,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"    private static final String SESSION_ID_HEADER \u003d \"Session Id #\";","lastModifiedDate":"2022-03-12"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"    private static final String SEPARATOR \u003d \" | \";","lastModifiedDate":"2022-03-12"},{"lineNumber":33,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":34,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":35,"author":{"gitId":"froststein"},"content":"     * Initializes an ActivityViewCommand object.","lastModifiedDate":"2022-03-22"},{"lineNumber":36,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-22"},{"lineNumber":37,"author":{"gitId":"froststein"},"content":"     * @param sessionId  An integer that uniquely identifies a session.","lastModifiedDate":"2022-03-22"},{"lineNumber":38,"author":{"gitId":"froststein"},"content":"     * @param activityId An integer that uniquely identifies an activity.","lastModifiedDate":"2022-03-22"},{"lineNumber":39,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":40,"author":{"gitId":"lelerer"},"content":"    public ActivityViewCommand(int sessionId, int activityId) {","lastModifiedDate":"2022-03-05"},{"lineNumber":41,"author":{"gitId":"lelerer"},"content":"        this.sessionId \u003d sessionId;","lastModifiedDate":"2022-03-05"},{"lineNumber":42,"author":{"gitId":"lelerer"},"content":"        this.activityId \u003d activityId;","lastModifiedDate":"2022-03-05"},{"lineNumber":43,"author":{"gitId":"lelerer"},"content":"    }","lastModifiedDate":"2022-03-05"},{"lineNumber":44,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":45,"author":{"gitId":"lelerer"},"content":"    /**","lastModifiedDate":"2022-03-05"},{"lineNumber":46,"author":{"gitId":"froststein"},"content":"     * Runs the command with the session and activity unique identifier as provided by the user input and","lastModifiedDate":"2022-03-22"},{"lineNumber":47,"author":{"gitId":"froststein"},"content":"     * prints the details of the activity.","lastModifiedDate":"2022-03-22"},{"lineNumber":48,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-03-09"},{"lineNumber":49,"author":{"gitId":"froststein"},"content":"     * @param manager A Manager object that manages the TextUI, Profile and Storage object.","lastModifiedDate":"2022-03-23"},{"lineNumber":50,"author":{"gitId":"lelerer"},"content":"     */","lastModifiedDate":"2022-03-05"},{"lineNumber":51,"author":{"gitId":"lelerer"},"content":"    @Override","lastModifiedDate":"2022-03-05"},{"lineNumber":52,"author":{"gitId":"froststein"},"content":"    public void run(Manager manager) {","lastModifiedDate":"2022-03-06"},{"lineNumber":53,"author":{"gitId":"lelerer"},"content":"        try {","lastModifiedDate":"2022-03-12"},{"lineNumber":54,"author":{"gitId":"ivanaitzliddat"},"content":"            Session session \u003d manager.getProfile().getSession(sessionId);","lastModifiedDate":"2022-03-12"},{"lineNumber":55,"author":{"gitId":"ivanaitzliddat"},"content":"            Activity activityToBePrinted \u003d session.getActivity(activityId);","lastModifiedDate":"2022-03-12"},{"lineNumber":56,"author":{"gitId":"ivanaitzliddat"},"content":"            String messageToBePrinted \u003d SESSION_ID_HEADER + sessionId + SEPARATOR + activityToBePrinted.toString();","lastModifiedDate":"2022-03-12"},{"lineNumber":57,"author":{"gitId":"ivanaitzliddat"},"content":"            manager.getUi().printlnMessageWithDivider(messageToBePrinted);","lastModifiedDate":"2022-03-12"},{"lineNumber":58,"author":{"gitId":"lelerer"},"content":"        } catch (InvalidDataException e) {","lastModifiedDate":"2022-03-12"},{"lineNumber":59,"author":{"gitId":"lelerer"},"content":"            manager.getUi().printlnMessage(e.getMessage());","lastModifiedDate":"2022-03-12"},{"lineNumber":60,"author":{"gitId":"lelerer"},"content":"        }","lastModifiedDate":"2022-03-12"},{"lineNumber":61,"author":{"gitId":"lelerer"},"content":"    }","lastModifiedDate":"2022-03-05"},{"lineNumber":62,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":63,"author":{"gitId":"lelerer"},"content":"    /**","lastModifiedDate":"2022-03-12"},{"lineNumber":64,"author":{"gitId":"lelerer"},"content":"     * Prepares user argument for activity view command.","lastModifiedDate":"2022-03-12"},{"lineNumber":65,"author":{"gitId":"lelerer"},"content":"     *","lastModifiedDate":"2022-03-12"},{"lineNumber":66,"author":{"gitId":"lelerer"},"content":"     * @param  commandArgs  A String object that represents the user\u0027s arguments.","lastModifiedDate":"2022-03-12"},{"lineNumber":67,"author":{"gitId":"lelerer"},"content":"     * @return An ActivityViewCommand object if sessionId and activityId were found in user arguments,","lastModifiedDate":"2022-03-12"},{"lineNumber":68,"author":{"gitId":"lelerer"},"content":"     *         an InvalidCommand object otherwise.","lastModifiedDate":"2022-03-12"},{"lineNumber":69,"author":{"gitId":"lelerer"},"content":"     */","lastModifiedDate":"2022-03-12"},{"lineNumber":70,"author":{"gitId":"lelerer"},"content":"    public static Command prepare(String commandArgs) {","lastModifiedDate":"2022-03-12"},{"lineNumber":71,"author":{"gitId":"lelerer"},"content":"        try {","lastModifiedDate":"2022-03-12"},{"lineNumber":72,"author":{"gitId":"lelerer"},"content":"            int sessionId \u003d Parser.parseSessionId(commandArgs);","lastModifiedDate":"2022-03-12"},{"lineNumber":73,"author":{"gitId":"lelerer"},"content":"            int activityId \u003d Parser.parseActivityId(commandArgs);","lastModifiedDate":"2022-03-12"},{"lineNumber":74,"author":{"gitId":"lelerer"},"content":"            return new ActivityViewCommand(sessionId, activityId);","lastModifiedDate":"2022-03-12"},{"lineNumber":75,"author":{"gitId":"lelerer"},"content":"        } catch (InvalidFormatException e) {","lastModifiedDate":"2022-03-12"},{"lineNumber":76,"author":{"gitId":"lelerer"},"content":"            String invalidCommandMessage \u003d e.getMessage() + \"\\n\" + COMMAND_FORMAT;","lastModifiedDate":"2022-03-12"},{"lineNumber":77,"author":{"gitId":"lelerer"},"content":"            return new InvalidCommand(invalidCommandMessage);","lastModifiedDate":"2022-03-12"},{"lineNumber":78,"author":{"gitId":"lelerer"},"content":"        }","lastModifiedDate":"2022-03-12"},{"lineNumber":79,"author":{"gitId":"lelerer"},"content":"    }","lastModifiedDate":"2022-03-12"},{"lineNumber":80,"author":{"gitId":"lelerer"},"content":"}","lastModifiedDate":"2022-03-05"}],"authorContributionMap":{"lelerer":50,"ivanaitzliddat":7,"warrencxw":10,"froststein":13}},{"path":"src/main/java/seedu/splitlah/command/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah.command;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.data.Manager;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-03-04"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":" * Represents a generic command that the user has entered into the application","lastModifiedDate":"2022-03-04"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":" * that can be run to produce a change or outcome.","lastModifiedDate":"2022-03-04"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":" * ","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":" * @author Warren","lastModifiedDate":"2022-03-04"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-03-04"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"public abstract class Command {","lastModifiedDate":"2022-03-03"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-04"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"     * Runs the command with the information parsed from the user input, using the specified","lastModifiedDate":"2022-03-04"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"     * Profile and TextUI objects.","lastModifiedDate":"2022-03-04"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":"     * @param manager A Manager object that manages the TextUI, Profile and Storage object.","lastModifiedDate":"2022-03-23"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-04"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":"    public abstract void run(Manager manager);","lastModifiedDate":"2022-03-06"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":19,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-05"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"     * Checks if command object is an instance of an ExitCommand.","lastModifiedDate":"2022-03-05"},{"lineNumber":21,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-05"},{"lineNumber":22,"author":{"gitId":"froststein"},"content":"     * @param command A command object to be checked.","lastModifiedDate":"2022-03-05"},{"lineNumber":23,"author":{"gitId":"froststein"},"content":"     * @return true if it is an ExitCommand, else false.","lastModifiedDate":"2022-03-17"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-05"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"    public static boolean isExitCommand(Command command) {","lastModifiedDate":"2022-03-05"},{"lineNumber":26,"author":{"gitId":"froststein"},"content":"        return command instanceof ExitCommand;","lastModifiedDate":"2022-03-05"},{"lineNumber":27,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-05"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-03-03"}],"authorContributionMap":{"warrencxw":14,"froststein":14}},{"path":"src/main/java/seedu/splitlah/command/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah.command;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.data.Manager;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"/**","lastModifiedDate":"2022-03-05"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":" * Represents a command that prints the farewell message.","lastModifiedDate":"2022-03-23"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":" * ","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":" * @author Roy","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"froststein"},"content":" */","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"froststein"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"froststein"},"content":"    public static final String COMMAND_TEXT \u003d \"exit\";","lastModifiedDate":"2022-03-05"},{"lineNumber":13,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"    public static final String COMMAND_FORMAT \u003d \"Syntax: exit\";","lastModifiedDate":"2022-03-14"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-05"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":"     * Runs the command to print a farewell message.","lastModifiedDate":"2022-03-23"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-05"},{"lineNumber":19,"author":{"gitId":"froststein"},"content":"     * @param manager A Manager object that manages the TextUI, Profile and Storage object.","lastModifiedDate":"2022-03-23"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-05"},{"lineNumber":21,"author":{"gitId":"froststein"},"content":"    @Override","lastModifiedDate":"2022-03-05"},{"lineNumber":22,"author":{"gitId":"froststein"},"content":"    public void run(Manager manager) {","lastModifiedDate":"2022-03-06"},{"lineNumber":23,"author":{"gitId":"froststein"},"content":"        manager.getUi().printFarewell();","lastModifiedDate":"2022-03-06"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-05"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"}","lastModifiedDate":"2022-03-05"}],"authorContributionMap":{"warrencxw":3,"froststein":22}},{"path":"src/main/java/seedu/splitlah/command/GroupCreateCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lelerer"},"content":"package seedu.splitlah.command;","lastModifiedDate":"2022-03-18"},{"lineNumber":2,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":3,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.data.Group;","lastModifiedDate":"2022-03-18"},{"lineNumber":4,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.data.Manager;","lastModifiedDate":"2022-03-18"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.data.PersonList;","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.exceptions.InvalidFormatException;","lastModifiedDate":"2022-03-18"},{"lineNumber":7,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.parser.Parser;","lastModifiedDate":"2022-03-18"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.parser.ParserUtils;","lastModifiedDate":"2022-03-20"},{"lineNumber":9,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-18"},{"lineNumber":10,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":11,"author":{"gitId":"lelerer"},"content":"/**","lastModifiedDate":"2022-03-18"},{"lineNumber":12,"author":{"gitId":"lelerer"},"content":" * Represents a command that creates a Group object from user input and stores it in the Profile object.","lastModifiedDate":"2022-03-18"},{"lineNumber":13,"author":{"gitId":"lelerer"},"content":" *","lastModifiedDate":"2022-03-18"},{"lineNumber":14,"author":{"gitId":"lelerer"},"content":" * @author Tianle","lastModifiedDate":"2022-03-18"},{"lineNumber":15,"author":{"gitId":"lelerer"},"content":" */","lastModifiedDate":"2022-03-18"},{"lineNumber":16,"author":{"gitId":"lelerer"},"content":"public class GroupCreateCommand extends Command {","lastModifiedDate":"2022-03-18"},{"lineNumber":17,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":18,"author":{"gitId":"lelerer"},"content":"    public static final String COMMAND_TEXT \u003d \"group /create\";","lastModifiedDate":"2022-03-18"},{"lineNumber":19,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":20,"author":{"gitId":"lelerer"},"content":"    public static final String COMMAND_FORMAT \u003d","lastModifiedDate":"2022-03-18"},{"lineNumber":21,"author":{"gitId":"lelerer"},"content":"        \"Syntax: group /create /n [GROUP_NAME] /pl [NAME1 NAME2...]\";","lastModifiedDate":"2022-03-24"},{"lineNumber":22,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":23,"author":{"gitId":"lelerer"},"content":"    private static final String SUCCESS_MESSAGE \u003d","lastModifiedDate":"2022-03-18"},{"lineNumber":24,"author":{"gitId":"lelerer"},"content":"        \"The group was created successfully.\\n\";","lastModifiedDate":"2022-03-18"},{"lineNumber":25,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":26,"author":{"gitId":"lelerer"},"content":"    public static final String[] COMMAND_DELIMITERS \u003d {","lastModifiedDate":"2022-03-18"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"        ParserUtils.NAME_DELIMITER,","lastModifiedDate":"2022-03-20"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"        ParserUtils.PERSON_LIST_DELIMITER","lastModifiedDate":"2022-03-20"},{"lineNumber":29,"author":{"gitId":"lelerer"},"content":"    };","lastModifiedDate":"2022-03-18"},{"lineNumber":30,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":31,"author":{"gitId":"lelerer"},"content":"    private String groupName;","lastModifiedDate":"2022-03-18"},{"lineNumber":32,"author":{"gitId":"lelerer"},"content":"    private String[] personNames;","lastModifiedDate":"2022-03-18"},{"lineNumber":33,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":34,"author":{"gitId":"lelerer"},"content":"    /**","lastModifiedDate":"2022-03-18"},{"lineNumber":35,"author":{"gitId":"froststein"},"content":"     * Initializes a GroupCreateCommand object.","lastModifiedDate":"2022-03-22"},{"lineNumber":36,"author":{"gitId":"lelerer"},"content":"     *","lastModifiedDate":"2022-03-18"},{"lineNumber":37,"author":{"gitId":"lelerer"},"content":"     * @param groupName   A String object that represents the group name.","lastModifiedDate":"2022-03-18"},{"lineNumber":38,"author":{"gitId":"froststein"},"content":"     * @param personNames An array of String objects that represents the involved persons for the group.","lastModifiedDate":"2022-03-23"},{"lineNumber":39,"author":{"gitId":"lelerer"},"content":"     */","lastModifiedDate":"2022-03-18"},{"lineNumber":40,"author":{"gitId":"lelerer"},"content":"    public GroupCreateCommand(String groupName, String[] personNames) {","lastModifiedDate":"2022-03-18"},{"lineNumber":41,"author":{"gitId":"lelerer"},"content":"        this.groupName \u003d groupName;","lastModifiedDate":"2022-03-18"},{"lineNumber":42,"author":{"gitId":"lelerer"},"content":"        this.personNames \u003d personNames;","lastModifiedDate":"2022-03-18"},{"lineNumber":43,"author":{"gitId":"lelerer"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":44,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":45,"author":{"gitId":"lelerer"},"content":"    /**","lastModifiedDate":"2022-03-18"},{"lineNumber":46,"author":{"gitId":"lelerer"},"content":"     * Prepares user arguments for the creation of a GroupCreateCommand object.","lastModifiedDate":"2022-03-18"},{"lineNumber":47,"author":{"gitId":"lelerer"},"content":"     *","lastModifiedDate":"2022-03-18"},{"lineNumber":48,"author":{"gitId":"lelerer"},"content":"     * @param commandArgs A String object that represents the user\u0027s arguments.","lastModifiedDate":"2022-03-18"},{"lineNumber":49,"author":{"gitId":"lelerer"},"content":"     * @return A GroupCreateCommand object if group name and person list were found in user arguments,","lastModifiedDate":"2022-03-18"},{"lineNumber":50,"author":{"gitId":"lelerer"},"content":"     *         an InvalidCommand object otherwise.","lastModifiedDate":"2022-03-18"},{"lineNumber":51,"author":{"gitId":"lelerer"},"content":"     */","lastModifiedDate":"2022-03-18"},{"lineNumber":52,"author":{"gitId":"lelerer"},"content":"    public static Command prepare(String commandArgs) {","lastModifiedDate":"2022-03-18"},{"lineNumber":53,"author":{"gitId":"lelerer"},"content":"        try {","lastModifiedDate":"2022-03-18"},{"lineNumber":54,"author":{"gitId":"lelerer"},"content":"            String parsedGroupName \u003d Parser.parseName(commandArgs);","lastModifiedDate":"2022-03-18"},{"lineNumber":55,"author":{"gitId":"lelerer"},"content":"            String[] parsedNameList \u003d Parser.parsePersonList(commandArgs);","lastModifiedDate":"2022-03-18"},{"lineNumber":56,"author":{"gitId":"lelerer"},"content":"            return new GroupCreateCommand(parsedGroupName, parsedNameList);","lastModifiedDate":"2022-03-18"},{"lineNumber":57,"author":{"gitId":"lelerer"},"content":"        } catch (InvalidFormatException formatException) {","lastModifiedDate":"2022-03-18"},{"lineNumber":58,"author":{"gitId":"lelerer"},"content":"            String invalidCommandMessage \u003d formatException.getMessage() + \"\\n\" + COMMAND_FORMAT;","lastModifiedDate":"2022-03-18"},{"lineNumber":59,"author":{"gitId":"lelerer"},"content":"            return new InvalidCommand(invalidCommandMessage);","lastModifiedDate":"2022-03-18"},{"lineNumber":60,"author":{"gitId":"lelerer"},"content":"        }","lastModifiedDate":"2022-03-18"},{"lineNumber":61,"author":{"gitId":"lelerer"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":62,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":63,"author":{"gitId":"lelerer"},"content":"    /**","lastModifiedDate":"2022-03-18"},{"lineNumber":64,"author":{"gitId":"lelerer"},"content":"     * Runs the command to create a Group object to be stored in the list of groups managed by the Profile Object.","lastModifiedDate":"2022-03-18"},{"lineNumber":65,"author":{"gitId":"lelerer"},"content":"     * Checks if array of names has duplicates and if group name exists.","lastModifiedDate":"2022-03-18"},{"lineNumber":66,"author":{"gitId":"lelerer"},"content":"     * If check fails, no group will be created and prints error message.","lastModifiedDate":"2022-03-18"},{"lineNumber":67,"author":{"gitId":"lelerer"},"content":"     * Else a group is created and prints success message.","lastModifiedDate":"2022-03-18"},{"lineNumber":68,"author":{"gitId":"lelerer"},"content":"     *","lastModifiedDate":"2022-03-18"},{"lineNumber":69,"author":{"gitId":"froststein"},"content":"     * @param manager A Manager object that manages the TextUI, Profile and Storage object.","lastModifiedDate":"2022-03-23"},{"lineNumber":70,"author":{"gitId":"lelerer"},"content":"     */","lastModifiedDate":"2022-03-18"},{"lineNumber":71,"author":{"gitId":"lelerer"},"content":"    @Override","lastModifiedDate":"2022-03-18"},{"lineNumber":72,"author":{"gitId":"lelerer"},"content":"    public void run(Manager manager) {","lastModifiedDate":"2022-03-18"},{"lineNumber":73,"author":{"gitId":"froststein"},"content":"        boolean hasDuplicates \u003d PersonList.hasNameDuplicates(personNames);","lastModifiedDate":"2022-03-22"},{"lineNumber":74,"author":{"gitId":"lelerer"},"content":"        if (hasDuplicates) {","lastModifiedDate":"2022-03-18"},{"lineNumber":75,"author":{"gitId":"lelerer"},"content":"            manager.getUi().printlnMessage(Message.ERROR_GROUPCREATE_DUPLICATE_NAMES);","lastModifiedDate":"2022-03-18"},{"lineNumber":76,"author":{"gitId":"lelerer"},"content":"            return;","lastModifiedDate":"2022-03-18"},{"lineNumber":77,"author":{"gitId":"lelerer"},"content":"        }","lastModifiedDate":"2022-03-18"},{"lineNumber":78,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":79,"author":{"gitId":"froststein"},"content":"        PersonList personList \u003d new PersonList();","lastModifiedDate":"2022-03-22"},{"lineNumber":80,"author":{"gitId":"froststein"},"content":"        personList.convertToPersonList(personNames);","lastModifiedDate":"2022-03-22"},{"lineNumber":81,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":82,"author":{"gitId":"lelerer"},"content":"        boolean isGroupExists \u003d manager.getProfile().hasGroupName(groupName);","lastModifiedDate":"2022-03-18"},{"lineNumber":83,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":84,"author":{"gitId":"lelerer"},"content":"        if (isGroupExists) {","lastModifiedDate":"2022-03-18"},{"lineNumber":85,"author":{"gitId":"lelerer"},"content":"            manager.getUi().printlnMessage(Message.ERROR_GROUPCREATE_DUPLICATE_GROUP_NAME);","lastModifiedDate":"2022-03-18"},{"lineNumber":86,"author":{"gitId":"lelerer"},"content":"            return;","lastModifiedDate":"2022-03-18"},{"lineNumber":87,"author":{"gitId":"lelerer"},"content":"        }","lastModifiedDate":"2022-03-18"},{"lineNumber":88,"author":{"gitId":"lelerer"},"content":"        int newGroupId \u003d manager.getProfile().getNewGroupId();","lastModifiedDate":"2022-03-18"},{"lineNumber":89,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":90,"author":{"gitId":"lelerer"},"content":"        Group newGroup \u003d new Group(groupName, newGroupId, personList);","lastModifiedDate":"2022-03-18"},{"lineNumber":91,"author":{"gitId":"lelerer"},"content":"        manager.getProfile().addGroup(newGroup);","lastModifiedDate":"2022-03-18"},{"lineNumber":92,"author":{"gitId":"froststein"},"content":"        manager.saveProfile();","lastModifiedDate":"2022-03-22"},{"lineNumber":93,"author":{"gitId":"lelerer"},"content":"        manager.getUi().printlnMessageWithDivider(SUCCESS_MESSAGE + newGroup);","lastModifiedDate":"2022-03-18"},{"lineNumber":94,"author":{"gitId":"lelerer"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":95,"author":{"gitId":"lelerer"},"content":"}","lastModifiedDate":"2022-03-18"}],"authorContributionMap":{"lelerer":84,"warrencxw":3,"froststein":8}},{"path":"src/main/java/seedu/splitlah/command/GroupDeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lelerer"},"content":"package seedu.splitlah.command;","lastModifiedDate":"2022-03-19"},{"lineNumber":2,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":3,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.data.Manager;","lastModifiedDate":"2022-03-19"},{"lineNumber":4,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.exceptions.InvalidDataException;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.exceptions.InvalidFormatException;","lastModifiedDate":"2022-03-19"},{"lineNumber":6,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.parser.Parser;","lastModifiedDate":"2022-03-19"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.parser.ParserUtils;","lastModifiedDate":"2022-03-20"},{"lineNumber":8,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":9,"author":{"gitId":"lelerer"},"content":"/**","lastModifiedDate":"2022-03-19"},{"lineNumber":10,"author":{"gitId":"froststein"},"content":" * Represents a command which deletes a Group object from a list of groups managed by the Profile object.","lastModifiedDate":"2022-03-23"},{"lineNumber":11,"author":{"gitId":"lelerer"},"content":" *","lastModifiedDate":"2022-03-19"},{"lineNumber":12,"author":{"gitId":"lelerer"},"content":" * @author Tianle","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"lelerer"},"content":" */","lastModifiedDate":"2022-03-19"},{"lineNumber":14,"author":{"gitId":"lelerer"},"content":"public class GroupDeleteCommand extends Command {","lastModifiedDate":"2022-03-19"},{"lineNumber":15,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":16,"author":{"gitId":"lelerer"},"content":"    public static final String COMMAND_TEXT \u003d \"group /delete\";","lastModifiedDate":"2022-03-19"},{"lineNumber":17,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":18,"author":{"gitId":"lelerer"},"content":"    public static final String COMMAND_FORMAT \u003d \"Syntax: group /delete /gid [GROUP_ID]\";","lastModifiedDate":"2022-03-19"},{"lineNumber":19,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":20,"author":{"gitId":"lelerer"},"content":"    private static final String SUCCESS_MESSAGE \u003d \"The group was deleted successfully.\";","lastModifiedDate":"2022-03-19"},{"lineNumber":21,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":22,"author":{"gitId":"lelerer"},"content":"    public static final String[] COMMAND_DELIMITERS \u003d {","lastModifiedDate":"2022-03-19"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"        ParserUtils.GROUP_ID_DELIMITER,","lastModifiedDate":"2022-03-20"},{"lineNumber":24,"author":{"gitId":"lelerer"},"content":"    };","lastModifiedDate":"2022-03-19"},{"lineNumber":25,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":26,"author":{"gitId":"lelerer"},"content":"    private int groupId;","lastModifiedDate":"2022-03-19"},{"lineNumber":27,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":28,"author":{"gitId":"lelerer"},"content":"    /**","lastModifiedDate":"2022-03-19"},{"lineNumber":29,"author":{"gitId":"froststein"},"content":"     * Initializes a GroupDeleteCommand object.","lastModifiedDate":"2022-03-22"},{"lineNumber":30,"author":{"gitId":"lelerer"},"content":"     *","lastModifiedDate":"2022-03-19"},{"lineNumber":31,"author":{"gitId":"froststein"},"content":"     * @param groupId An integer that represents the group unique identifier for the group to be deleted.","lastModifiedDate":"2022-03-22"},{"lineNumber":32,"author":{"gitId":"lelerer"},"content":"     */","lastModifiedDate":"2022-03-19"},{"lineNumber":33,"author":{"gitId":"lelerer"},"content":"    public GroupDeleteCommand(int groupId) {","lastModifiedDate":"2022-03-19"},{"lineNumber":34,"author":{"gitId":"lelerer"},"content":"        // TODO: Add assert to check whether groupId is valid.","lastModifiedDate":"2022-03-19"},{"lineNumber":35,"author":{"gitId":"lelerer"},"content":"        this.groupId \u003d groupId;","lastModifiedDate":"2022-03-19"},{"lineNumber":36,"author":{"gitId":"lelerer"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":37,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":38,"author":{"gitId":"lelerer"},"content":"    /**","lastModifiedDate":"2022-03-19"},{"lineNumber":39,"author":{"gitId":"lelerer"},"content":"     * Prepares user arguments for the creation of an GroupDeleteCommand object.","lastModifiedDate":"2022-03-19"},{"lineNumber":40,"author":{"gitId":"lelerer"},"content":"     *","lastModifiedDate":"2022-03-19"},{"lineNumber":41,"author":{"gitId":"lelerer"},"content":"     * @param commandArgs The user\u0027s arguments.","lastModifiedDate":"2022-03-19"},{"lineNumber":42,"author":{"gitId":"lelerer"},"content":"     * @return A GroupDeleteCommand object if necessary parameters were found in user arguments,","lastModifiedDate":"2022-03-20"},{"lineNumber":43,"author":{"gitId":"lelerer"},"content":"     *         an InvalidCommand object otherwise.","lastModifiedDate":"2022-03-19"},{"lineNumber":44,"author":{"gitId":"lelerer"},"content":"     */","lastModifiedDate":"2022-03-19"},{"lineNumber":45,"author":{"gitId":"lelerer"},"content":"    public static Command prepare(String commandArgs) {","lastModifiedDate":"2022-03-19"},{"lineNumber":46,"author":{"gitId":"lelerer"},"content":"        try {","lastModifiedDate":"2022-03-19"},{"lineNumber":47,"author":{"gitId":"lelerer"},"content":"            int groupId \u003d Parser.parseGroupId(commandArgs);","lastModifiedDate":"2022-03-19"},{"lineNumber":48,"author":{"gitId":"lelerer"},"content":"            return new GroupDeleteCommand(groupId);","lastModifiedDate":"2022-03-19"},{"lineNumber":49,"author":{"gitId":"lelerer"},"content":"        } catch (InvalidFormatException e) {","lastModifiedDate":"2022-03-19"},{"lineNumber":50,"author":{"gitId":"lelerer"},"content":"            return new InvalidCommand(e.getMessage() + \"\\n\" + COMMAND_FORMAT);","lastModifiedDate":"2022-03-19"},{"lineNumber":51,"author":{"gitId":"lelerer"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":52,"author":{"gitId":"lelerer"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":53,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":54,"author":{"gitId":"lelerer"},"content":"    /**","lastModifiedDate":"2022-03-19"},{"lineNumber":55,"author":{"gitId":"froststein"},"content":"     * Runs the command to delete a Group object from the list of groups managed by a Manager Object.","lastModifiedDate":"2022-03-23"},{"lineNumber":56,"author":{"gitId":"lelerer"},"content":"     *","lastModifiedDate":"2022-03-19"},{"lineNumber":57,"author":{"gitId":"froststein"},"content":"     * @param manager A Manager object that manages the TextUI, Profile and Storage object.","lastModifiedDate":"2022-03-23"},{"lineNumber":58,"author":{"gitId":"lelerer"},"content":"     */","lastModifiedDate":"2022-03-19"},{"lineNumber":59,"author":{"gitId":"lelerer"},"content":"    @Override","lastModifiedDate":"2022-03-19"},{"lineNumber":60,"author":{"gitId":"lelerer"},"content":"    public void run(Manager manager) {","lastModifiedDate":"2022-03-19"},{"lineNumber":61,"author":{"gitId":"lelerer"},"content":"        try {","lastModifiedDate":"2022-03-19"},{"lineNumber":62,"author":{"gitId":"lelerer"},"content":"            manager.getProfile().removeGroup(groupId);","lastModifiedDate":"2022-03-19"},{"lineNumber":63,"author":{"gitId":"froststein"},"content":"            manager.saveProfile();","lastModifiedDate":"2022-03-22"},{"lineNumber":64,"author":{"gitId":"lelerer"},"content":"            manager.getUi().printlnMessageWithDivider(SUCCESS_MESSAGE);","lastModifiedDate":"2022-03-24"},{"lineNumber":65,"author":{"gitId":"lelerer"},"content":"        } catch (InvalidDataException e) {","lastModifiedDate":"2022-03-19"},{"lineNumber":66,"author":{"gitId":"lelerer"},"content":"            manager.getUi().printlnMessageWithDivider(e.getMessage());","lastModifiedDate":"2022-03-24"},{"lineNumber":67,"author":{"gitId":"lelerer"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":68,"author":{"gitId":"lelerer"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":69,"author":{"gitId":"lelerer"},"content":"}","lastModifiedDate":"2022-03-19"}],"authorContributionMap":{"lelerer":61,"warrencxw":2,"froststein":6}},{"path":"src/main/java/seedu/splitlah/command/GroupListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ivanaitzliddat"},"content":"package seedu.splitlah.command;","lastModifiedDate":"2022-03-21"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.data.Group;","lastModifiedDate":"2022-03-21"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.data.Manager;","lastModifiedDate":"2022-03-21"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-21"},{"lineNumber":6,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-21"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":"import java.util.logging.Level;","lastModifiedDate":"2022-03-21"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"/**","lastModifiedDate":"2022-03-21"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":" * Represents a command that displays the details of each Group object within a Profile object.","lastModifiedDate":"2022-03-21"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":" *","lastModifiedDate":"2022-03-21"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":" * @author Ivan","lastModifiedDate":"2022-03-21"},{"lineNumber":14,"author":{"gitId":"ivanaitzliddat"},"content":" */","lastModifiedDate":"2022-03-21"},{"lineNumber":15,"author":{"gitId":"ivanaitzliddat"},"content":"public class GroupListCommand extends Command {","lastModifiedDate":"2022-03-21"},{"lineNumber":16,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String COMMAND_TEXT \u003d \"group /list\";","lastModifiedDate":"2022-03-21"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String COMMAND_FORMAT \u003d \"Syntax: group /list\";","lastModifiedDate":"2022-03-21"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"    private static final String GROUP_LIST_HEADER \u003d \"List of Groups\";","lastModifiedDate":"2022-03-21"},{"lineNumber":22,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":23,"author":{"gitId":"ivanaitzliddat"},"content":"    private static final String GROUP_LIST_TITLE \u003d \"# | Name | Number of Persons\";","lastModifiedDate":"2022-03-21"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":25,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-21"},{"lineNumber":26,"author":{"gitId":"froststein"},"content":"     * Runs the command to list all existing groups managed by the Profile Object.","lastModifiedDate":"2022-03-23"},{"lineNumber":27,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-03-21"},{"lineNumber":28,"author":{"gitId":"froststein"},"content":"     * @param manager A Manager object that manages the TextUI, Profile and Storage object.","lastModifiedDate":"2022-03-23"},{"lineNumber":29,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-21"},{"lineNumber":30,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-03-21"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"    public void run(Manager manager) {","lastModifiedDate":"2022-03-21"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"        ArrayList\u003cGroup\u003e groupsToBePrinted \u003d manager.getProfile().getGroupList();","lastModifiedDate":"2022-03-21"},{"lineNumber":33,"author":{"gitId":"ivanaitzliddat"},"content":"        if (groupsToBePrinted.isEmpty()) {","lastModifiedDate":"2022-03-21"},{"lineNumber":34,"author":{"gitId":"ivanaitzliddat"},"content":"            manager.getUi().printlnMessage(Message.ERROR_PROFILE_GROUP_LIST_EMPTY);","lastModifiedDate":"2022-03-21"},{"lineNumber":35,"author":{"gitId":"ivanaitzliddat"},"content":"            Manager.getLogger().log(Level.FINEST, Message.LOGGER_GROUPLIST_GROUPS_NOT_LISTED);","lastModifiedDate":"2022-03-21"},{"lineNumber":36,"author":{"gitId":"ivanaitzliddat"},"content":"            return;","lastModifiedDate":"2022-03-21"},{"lineNumber":37,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-21"},{"lineNumber":38,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":39,"author":{"gitId":"ivanaitzliddat"},"content":"        manager.getUi().printlnMessageWithDashDivider(GROUP_LIST_HEADER);","lastModifiedDate":"2022-03-21"},{"lineNumber":40,"author":{"gitId":"ivanaitzliddat"},"content":"        manager.getUi().printlnMessage(GROUP_LIST_TITLE);","lastModifiedDate":"2022-03-21"},{"lineNumber":41,"author":{"gitId":"ivanaitzliddat"},"content":"        int groupListSize \u003d groupsToBePrinted.size();","lastModifiedDate":"2022-03-21"},{"lineNumber":42,"author":{"gitId":"ivanaitzliddat"},"content":"        assert groupListSize \u003e 0 : Message.ASSERT_GROUPLIST_GROUP_SIZE_LESS_THAN_ONE;","lastModifiedDate":"2022-03-21"},{"lineNumber":43,"author":{"gitId":"ivanaitzliddat"},"content":"        for (int i \u003d 0; i \u003c groupListSize - 1; i++) {","lastModifiedDate":"2022-03-21"},{"lineNumber":44,"author":{"gitId":"ivanaitzliddat"},"content":"            manager.getUi().printlnMessage(groupsToBePrinted.get(i).getGroupSummary());","lastModifiedDate":"2022-03-21"},{"lineNumber":45,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-21"},{"lineNumber":46,"author":{"gitId":"ivanaitzliddat"},"content":"        String lastGroupToPrint \u003d groupsToBePrinted.get(groupListSize - 1).getGroupSummary();","lastModifiedDate":"2022-03-21"},{"lineNumber":47,"author":{"gitId":"ivanaitzliddat"},"content":"        manager.getUi().printlnMessageWithDivider(lastGroupToPrint);","lastModifiedDate":"2022-03-21"},{"lineNumber":48,"author":{"gitId":"ivanaitzliddat"},"content":"        Manager.getLogger().log(Level.FINEST, Message.LOGGER_GROUPLIST_GROUPS_LISTED);","lastModifiedDate":"2022-03-21"},{"lineNumber":49,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-21"},{"lineNumber":50,"author":{"gitId":"ivanaitzliddat"},"content":"}","lastModifiedDate":"2022-03-21"}],"authorContributionMap":{"ivanaitzliddat":48,"froststein":2}},{"path":"src/main/java/seedu/splitlah/command/GroupViewCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ivanaitzliddat"},"content":"package seedu.splitlah.command;","lastModifiedDate":"2022-03-20"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.data.Group;","lastModifiedDate":"2022-03-20"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.data.Manager;","lastModifiedDate":"2022-03-20"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.exceptions.InvalidDataException;","lastModifiedDate":"2022-03-20"},{"lineNumber":6,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.exceptions.InvalidFormatException;","lastModifiedDate":"2022-03-20"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.parser.Parser;","lastModifiedDate":"2022-03-20"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.parser.ParserUtils;","lastModifiedDate":"2022-03-20"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-20"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":"import java.util.logging.Level;","lastModifiedDate":"2022-03-20"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":"/**","lastModifiedDate":"2022-03-21"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":" * Represents a command which displays the full details of a Group object in the list of groups","lastModifiedDate":"2022-03-23"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":" * managed by the Profile object.","lastModifiedDate":"2022-03-23"},{"lineNumber":16,"author":{"gitId":"ivanaitzliddat"},"content":" *","lastModifiedDate":"2022-03-21"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":" * @author Ivan","lastModifiedDate":"2022-03-21"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":" */","lastModifiedDate":"2022-03-21"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":"public class GroupViewCommand extends Command {","lastModifiedDate":"2022-03-20"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String COMMAND_TEXT \u003d \"group /view\";","lastModifiedDate":"2022-03-20"},{"lineNumber":22,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":23,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String COMMAND_FORMAT \u003d \"Syntax: group /view /gid [GROUP_ID]\";","lastModifiedDate":"2022-03-20"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":25,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String[] COMMAND_DELIMITERS \u003d {","lastModifiedDate":"2022-03-20"},{"lineNumber":26,"author":{"gitId":"ivanaitzliddat"},"content":"        ParserUtils.GROUP_ID_DELIMITER","lastModifiedDate":"2022-03-20"},{"lineNumber":27,"author":{"gitId":"ivanaitzliddat"},"content":"    };","lastModifiedDate":"2022-03-20"},{"lineNumber":28,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":29,"author":{"gitId":"ivanaitzliddat"},"content":"    private int groupId;","lastModifiedDate":"2022-03-20"},{"lineNumber":30,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"     * Initializes a GroupViewCommand object.","lastModifiedDate":"2022-03-20"},{"lineNumber":33,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-03-20"},{"lineNumber":34,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param groupId An integer that represents the group unique identifier for the group to be viewed.","lastModifiedDate":"2022-03-21"},{"lineNumber":35,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":36,"author":{"gitId":"ivanaitzliddat"},"content":"    public GroupViewCommand(int groupId) {","lastModifiedDate":"2022-03-20"},{"lineNumber":37,"author":{"gitId":"ivanaitzliddat"},"content":"        assert groupId \u003e 0 : Message.ASSERT_GROUPVIEW_GROUP_ID_LESS_THAN_ONE;","lastModifiedDate":"2022-03-20"},{"lineNumber":38,"author":{"gitId":"ivanaitzliddat"},"content":"        this.groupId \u003d groupId;","lastModifiedDate":"2022-03-20"},{"lineNumber":39,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":40,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":41,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":42,"author":{"gitId":"ivanaitzliddat"},"content":"     * Prepares user arguments for the creation of a GroupViewCommand object.","lastModifiedDate":"2022-03-20"},{"lineNumber":43,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-03-20"},{"lineNumber":44,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param commandArgs A String object that represents the user\u0027s arguments.","lastModifiedDate":"2022-03-20"},{"lineNumber":45,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return A GroupViewCommand object if group unique identifier was found in user arguments,","lastModifiedDate":"2022-03-20"},{"lineNumber":46,"author":{"gitId":"ivanaitzliddat"},"content":"     *         an InvalidCommand object otherwise.","lastModifiedDate":"2022-03-20"},{"lineNumber":47,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":48,"author":{"gitId":"ivanaitzliddat"},"content":"    public static Command prepare(String commandArgs) {","lastModifiedDate":"2022-03-20"},{"lineNumber":49,"author":{"gitId":"ivanaitzliddat"},"content":"        try {","lastModifiedDate":"2022-03-20"},{"lineNumber":50,"author":{"gitId":"ivanaitzliddat"},"content":"            int groupId \u003d Parser.parseGroupId(commandArgs);","lastModifiedDate":"2022-03-20"},{"lineNumber":51,"author":{"gitId":"ivanaitzliddat"},"content":"            assert groupId \u003e 0 : Message.ASSERT_GROUPVIEW_GROUP_ID_NOT_INITIALIZED;","lastModifiedDate":"2022-03-20"},{"lineNumber":52,"author":{"gitId":"ivanaitzliddat"},"content":"            return new GroupViewCommand(groupId);","lastModifiedDate":"2022-03-20"},{"lineNumber":53,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (InvalidFormatException e) {","lastModifiedDate":"2022-03-20"},{"lineNumber":54,"author":{"gitId":"ivanaitzliddat"},"content":"            return new InvalidCommand(e.getMessage() + \"\\n\" + COMMAND_FORMAT);","lastModifiedDate":"2022-03-20"},{"lineNumber":55,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-20"},{"lineNumber":56,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":57,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":58,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":59,"author":{"gitId":"ivanaitzliddat"},"content":"     * Runs the command with the group unique identifier as provided by the user input and","lastModifiedDate":"2022-03-20"},{"lineNumber":60,"author":{"gitId":"ivanaitzliddat"},"content":"     * prints the details of the group.","lastModifiedDate":"2022-03-20"},{"lineNumber":61,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-03-20"},{"lineNumber":62,"author":{"gitId":"froststein"},"content":"     * @param manager A Manager object that manages the TextUI, Profile and Storage object.","lastModifiedDate":"2022-03-23"},{"lineNumber":63,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":64,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-03-20"},{"lineNumber":65,"author":{"gitId":"ivanaitzliddat"},"content":"    public void run(Manager manager) {","lastModifiedDate":"2022-03-20"},{"lineNumber":66,"author":{"gitId":"ivanaitzliddat"},"content":"        try {","lastModifiedDate":"2022-03-20"},{"lineNumber":67,"author":{"gitId":"ivanaitzliddat"},"content":"            Group group \u003d manager.getProfile().getGroup(groupId);","lastModifiedDate":"2022-03-20"},{"lineNumber":68,"author":{"gitId":"ivanaitzliddat"},"content":"            assert group.getGroupId() \u003d\u003d groupId : Message.ASSERT_GROUPVIEW_INCORRECT_GROUP;","lastModifiedDate":"2022-03-20"},{"lineNumber":69,"author":{"gitId":"ivanaitzliddat"},"content":"            manager.getUi().printlnMessageWithDivider(group.toString());","lastModifiedDate":"2022-03-20"},{"lineNumber":70,"author":{"gitId":"ivanaitzliddat"},"content":"            Manager.getLogger().log(Level.FINEST, Message.LOGGER_GROUPVIEW_GROUP_VIEWED + groupId);","lastModifiedDate":"2022-03-20"},{"lineNumber":71,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (InvalidDataException e) {","lastModifiedDate":"2022-03-20"},{"lineNumber":72,"author":{"gitId":"ivanaitzliddat"},"content":"            manager.getUi().printlnMessage(e.getMessage());","lastModifiedDate":"2022-03-20"},{"lineNumber":73,"author":{"gitId":"ivanaitzliddat"},"content":"            Manager.getLogger().log(Level.FINEST, Message.LOGGER_GROUPVIEW_GROUP_NOT_VIEWED + groupId);","lastModifiedDate":"2022-03-20"},{"lineNumber":74,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-20"},{"lineNumber":75,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":76,"author":{"gitId":"ivanaitzliddat"},"content":"}","lastModifiedDate":"2022-03-20"}],"authorContributionMap":{"ivanaitzliddat":73,"froststein":3}},{"path":"src/main/java/seedu/splitlah/command/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah.command;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.data.Manager;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-03-06"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":" * Represents a command that prints a help menu to inform the user of all available commands.","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":" * ","lastModifiedDate":"2022-03-06"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":" * @author Warren","lastModifiedDate":"2022-03-06"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-03-06"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2022-03-06"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-06"},{"lineNumber":13,"author":{"gitId":"froststein"},"content":"     * Runs the command to print help messages and displays all available commands.","lastModifiedDate":"2022-03-23"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-06"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":"     * @param manager A Manager object that manages the TextUI, Profile and Storage object.","lastModifiedDate":"2022-03-23"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-06"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"    @Override","lastModifiedDate":"2022-03-06"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"    public void run(Manager manager) {","lastModifiedDate":"2022-03-06"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"        manager.getUi().printHelpMenu();","lastModifiedDate":"2022-03-06"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-03-06"}],"authorContributionMap":{"warrencxw":17,"froststein":4}},{"path":"src/main/java/seedu/splitlah/command/InvalidCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah.command;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.data.Manager;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"matheril"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-17"},{"lineNumber":5,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":6,"author":{"gitId":"matheril"},"content":"/**","lastModifiedDate":"2022-03-04"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":" * Represents a command that takes in an error message and prints \"Invalid command\" followed by the error message.","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":" * ","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":" * @author Saurav","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"matheril"},"content":" */","lastModifiedDate":"2022-03-04"},{"lineNumber":11,"author":{"gitId":"matheril"},"content":"public class InvalidCommand extends Command {","lastModifiedDate":"2022-03-04"},{"lineNumber":12,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":13,"author":{"gitId":"matheril"},"content":"    private final String errorMessage;","lastModifiedDate":"2022-03-04"},{"lineNumber":14,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":"     * Initializes an InvalidCommand object.","lastModifiedDate":"2022-03-23"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-22"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"     * @param errorMessage A String object that represents the error message.","lastModifiedDate":"2022-03-22"},{"lineNumber":19,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"matheril"},"content":"    public InvalidCommand(String errorMessage) {","lastModifiedDate":"2022-03-04"},{"lineNumber":21,"author":{"gitId":"matheril"},"content":"        this.errorMessage \u003d errorMessage;","lastModifiedDate":"2022-03-04"},{"lineNumber":22,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-04"},{"lineNumber":23,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"     * Runs the command to print the error message.","lastModifiedDate":"2022-03-22"},{"lineNumber":26,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-22"},{"lineNumber":27,"author":{"gitId":"froststein"},"content":"     * @param manager A Manager object that manages the TextUI, Profile and Storage object.","lastModifiedDate":"2022-03-23"},{"lineNumber":28,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":29,"author":{"gitId":"matheril"},"content":"    @Override","lastModifiedDate":"2022-03-04"},{"lineNumber":30,"author":{"gitId":"froststein"},"content":"    public void run(Manager manager) {","lastModifiedDate":"2022-03-06"},{"lineNumber":31,"author":{"gitId":"matheril"},"content":"        assert manager !\u003d null : Message.ASSERT_INVALIDCOMMAND_MANAGER_DOES_NOT_EXIST;","lastModifiedDate":"2022-03-17"},{"lineNumber":32,"author":{"gitId":"froststein"},"content":"        manager.getUi().printlnMessage(\"Invalid command\");","lastModifiedDate":"2022-03-06"},{"lineNumber":33,"author":{"gitId":"froststein"},"content":"        manager.getUi().printlnMessage(errorMessage);","lastModifiedDate":"2022-03-06"},{"lineNumber":34,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-04"},{"lineNumber":35,"author":{"gitId":"matheril"},"content":"}","lastModifiedDate":"2022-03-04"}],"authorContributionMap":{"warrencxw":3,"froststein":15,"matheril":17}},{"path":"src/main/java/seedu/splitlah/command/SessionCreateCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah.command;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.data.Group;","lastModifiedDate":"2022-03-20"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.data.Manager;","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.data.PersonList;","lastModifiedDate":"2022-03-20"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.data.Session;","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.exceptions.InvalidDataException;","lastModifiedDate":"2022-03-20"},{"lineNumber":8,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-08"},{"lineNumber":9,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":10,"author":{"gitId":"froststein"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-03-04"},{"lineNumber":11,"author":{"gitId":"froststein"},"content":"import java.util.logging.Level;","lastModifiedDate":"2022-03-17"},{"lineNumber":12,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":13,"author":{"gitId":"froststein"},"content":"/**","lastModifiedDate":"2022-03-04"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":" * Represents a command that creates a Session object from user input and stores it in the Profile object.","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":" *","lastModifiedDate":"2022-03-04"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":" * @author Roy","lastModifiedDate":"2022-03-04"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":" */","lastModifiedDate":"2022-03-04"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"public class SessionCreateCommand extends Command {","lastModifiedDate":"2022-03-04"},{"lineNumber":19,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"    private static final String COMMAND_SUCCESS \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":21,"author":{"gitId":"froststein"},"content":"            \"The session was created successfully.\\n\";","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":23,"author":{"gitId":"froststein"},"content":"    private String sessionName;","lastModifiedDate":"2022-03-04"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"    private String[] personNames;","lastModifiedDate":"2022-03-04"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"    private LocalDate sessionDate;","lastModifiedDate":"2022-03-04"},{"lineNumber":26,"author":{"gitId":"froststein"},"content":"    private int groupId;","lastModifiedDate":"2022-03-20"},{"lineNumber":27,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":28,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"froststein"},"content":"     * Initializes a SessionCreateCommand object.","lastModifiedDate":"2022-03-21"},{"lineNumber":30,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-09"},{"lineNumber":31,"author":{"gitId":"froststein"},"content":"     * @param sessionName A String object that represents the session name.","lastModifiedDate":"2022-03-09"},{"lineNumber":32,"author":{"gitId":"froststein"},"content":"     * @param personNames An array of String objects that represents the involved persons for the session.","lastModifiedDate":"2022-03-23"},{"lineNumber":33,"author":{"gitId":"froststein"},"content":"     * @param date        A LocalDate object that represents the date of the session.","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"froststein"},"content":"     * @param groupId     An integer that represents the group unique identifier.","lastModifiedDate":"2022-03-20"},{"lineNumber":35,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"froststein"},"content":"    public SessionCreateCommand(String sessionName, String[] personNames, LocalDate date, int groupId) {","lastModifiedDate":"2022-03-20"},{"lineNumber":37,"author":{"gitId":"froststein"},"content":"        assert sessionName !\u003d null : Message.ASSERT_SESSIONCREATE_SESSION_NAME_NULL;","lastModifiedDate":"2022-03-20"},{"lineNumber":38,"author":{"gitId":"froststein"},"content":"        assert personNames !\u003d null || groupId !\u003d -1 :","lastModifiedDate":"2022-03-20"},{"lineNumber":39,"author":{"gitId":"froststein"},"content":"                Message.ASSERT_SESSIONCREATE_MISSING_PERSONLIST_AND_GROUP_DELIMITERS;","lastModifiedDate":"2022-03-20"},{"lineNumber":40,"author":{"gitId":"froststein"},"content":"        assert date !\u003d null : Message.ASSERT_SESSIONCREATE_SESSION_DATE_NULL;","lastModifiedDate":"2022-03-20"},{"lineNumber":41,"author":{"gitId":"froststein"},"content":"        this.sessionName \u003d sessionName;","lastModifiedDate":"2022-03-04"},{"lineNumber":42,"author":{"gitId":"froststein"},"content":"        this.personNames \u003d personNames;","lastModifiedDate":"2022-03-04"},{"lineNumber":43,"author":{"gitId":"froststein"},"content":"        this.sessionDate \u003d date;","lastModifiedDate":"2022-03-04"},{"lineNumber":44,"author":{"gitId":"froststein"},"content":"        this.groupId \u003d groupId;","lastModifiedDate":"2022-03-20"},{"lineNumber":45,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-04"},{"lineNumber":46,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":47,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-04"},{"lineNumber":48,"author":{"gitId":"froststein"},"content":"     * Runs the command to create a Session object to be stored in the list of sessions managed by the Profile object.","lastModifiedDate":"2022-03-21"},{"lineNumber":49,"author":{"gitId":"froststein"},"content":"     * Checks if array of names has duplicates and if session name exists.","lastModifiedDate":"2022-03-09"},{"lineNumber":50,"author":{"gitId":"froststein"},"content":"     * If check fails, no session is created and prints error message.","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"froststein"},"content":"     * Else a session is created and prints success message.","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-04"},{"lineNumber":53,"author":{"gitId":"froststein"},"content":"     * @param manager A Manager object that manages the TextUI, Profile and Storage object.","lastModifiedDate":"2022-03-23"},{"lineNumber":54,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-04"},{"lineNumber":55,"author":{"gitId":"froststein"},"content":"    @Override","lastModifiedDate":"2022-03-04"},{"lineNumber":56,"author":{"gitId":"froststein"},"content":"    public void run(Manager manager) {","lastModifiedDate":"2022-03-06"},{"lineNumber":57,"author":{"gitId":"froststein"},"content":"        PersonList personList \u003d new PersonList();","lastModifiedDate":"2022-03-20"},{"lineNumber":58,"author":{"gitId":"froststein"},"content":"        if (personNames !\u003d null) {","lastModifiedDate":"2022-03-20"},{"lineNumber":59,"author":{"gitId":"froststein"},"content":"            boolean hasDuplicates \u003d PersonList.hasNameDuplicates(personNames);","lastModifiedDate":"2022-03-21"},{"lineNumber":60,"author":{"gitId":"froststein"},"content":"            if (hasDuplicates) {","lastModifiedDate":"2022-03-12"},{"lineNumber":61,"author":{"gitId":"froststein"},"content":"                manager.getUi().printlnMessage(Message.ERROR_PROFILE_DUPLICATE_NAME);","lastModifiedDate":"2022-03-08"},{"lineNumber":62,"author":{"gitId":"froststein"},"content":"                return;","lastModifiedDate":"2022-03-08"},{"lineNumber":63,"author":{"gitId":"froststein"},"content":"            }","lastModifiedDate":"2022-03-08"},{"lineNumber":64,"author":{"gitId":"froststein"},"content":"            personList.convertToPersonList(personNames);","lastModifiedDate":"2022-03-20"},{"lineNumber":65,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-20"},{"lineNumber":66,"author":{"gitId":"froststein"},"content":"        Group group \u003d null;","lastModifiedDate":"2022-03-20"},{"lineNumber":67,"author":{"gitId":"froststein"},"content":"        if (groupId !\u003d -1) {","lastModifiedDate":"2022-03-20"},{"lineNumber":68,"author":{"gitId":"froststein"},"content":"            try {","lastModifiedDate":"2022-03-20"},{"lineNumber":69,"author":{"gitId":"froststein"},"content":"                group \u003d manager.getProfile().getGroup(groupId);","lastModifiedDate":"2022-03-20"},{"lineNumber":70,"author":{"gitId":"froststein"},"content":"                personList.mergeListOfPersons(group.getPersonList());","lastModifiedDate":"2022-03-20"},{"lineNumber":71,"author":{"gitId":"froststein"},"content":"            } catch (InvalidDataException dataException) {","lastModifiedDate":"2022-03-20"},{"lineNumber":72,"author":{"gitId":"froststein"},"content":"                manager.getUi().printlnMessage(dataException.getMessage());","lastModifiedDate":"2022-03-20"},{"lineNumber":73,"author":{"gitId":"froststein"},"content":"                return;","lastModifiedDate":"2022-03-20"},{"lineNumber":74,"author":{"gitId":"froststein"},"content":"            }","lastModifiedDate":"2022-03-20"},{"lineNumber":75,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-20"},{"lineNumber":76,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":77,"author":{"gitId":"froststein"},"content":"        boolean isSessionExists \u003d manager.getProfile().hasSessionName(sessionName);","lastModifiedDate":"2022-03-09"},{"lineNumber":78,"author":{"gitId":"froststein"},"content":"        if (isSessionExists) {","lastModifiedDate":"2022-03-08"},{"lineNumber":79,"author":{"gitId":"froststein"},"content":"            manager.getUi().printlnMessage(Message.ERROR_PROFILE_DUPLICATE_SESSION);","lastModifiedDate":"2022-03-08"},{"lineNumber":80,"author":{"gitId":"froststein"},"content":"            return;","lastModifiedDate":"2022-03-08"},{"lineNumber":81,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":82,"author":{"gitId":"froststein"},"content":"        int newSessionId \u003d manager.getProfile().getNewSessionId();","lastModifiedDate":"2022-03-08"},{"lineNumber":83,"author":{"gitId":"froststein"},"content":"        Session newSession \u003d new Session(sessionName, newSessionId, sessionDate, personList, group);","lastModifiedDate":"2022-03-20"},{"lineNumber":84,"author":{"gitId":"froststein"},"content":"        manager.getProfile().addSession(newSession);","lastModifiedDate":"2022-03-09"},{"lineNumber":85,"author":{"gitId":"froststein"},"content":"        manager.saveProfile();","lastModifiedDate":"2022-03-22"},{"lineNumber":86,"author":{"gitId":"froststein"},"content":"        manager.getUi().printlnMessageWithDivider(COMMAND_SUCCESS + newSession);","lastModifiedDate":"2022-03-14"},{"lineNumber":87,"author":{"gitId":"froststein"},"content":"        Manager.getLogger().log(Level.FINEST,Message.LOGGER_SESSIONCREATE_SESSION_ADDED + newSessionId);","lastModifiedDate":"2022-03-20"},{"lineNumber":88,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-04"},{"lineNumber":89,"author":{"gitId":"froststein"},"content":"}","lastModifiedDate":"2022-03-04"}],"authorContributionMap":{"warrencxw":1,"froststein":88}},{"path":"src/main/java/seedu/splitlah/command/SessionDeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah.command;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.data.Manager;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.data.Session;","lastModifiedDate":"2022-03-19"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.exceptions.InvalidDataException;","lastModifiedDate":"2022-03-11"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.exceptions.InvalidFormatException;","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.parser.Parser;","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.parser.ParserUtils;","lastModifiedDate":"2022-03-20"},{"lineNumber":9,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-11"},{"lineNumber":10,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":11,"author":{"gitId":"froststein"},"content":"import java.util.logging.Level;","lastModifiedDate":"2022-03-17"},{"lineNumber":12,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":13,"author":{"gitId":"froststein"},"content":"/**","lastModifiedDate":"2022-03-04"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":" * Represents a command which deletes a Session object from a list of sessions managed by the Profile object.","lastModifiedDate":"2022-03-23"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":" *","lastModifiedDate":"2022-03-04"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":" * @author Roy","lastModifiedDate":"2022-03-04"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":" */","lastModifiedDate":"2022-03-04"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"public class SessionDeleteCommand extends Command {","lastModifiedDate":"2022-03-04"},{"lineNumber":19,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"    public static final String COMMAND_TEXT \u003d \"session /delete\";","lastModifiedDate":"2022-03-04"},{"lineNumber":21,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"    public static final String COMMAND_FORMAT \u003d \"Syntax: session /delete /sid [SESSION_ID]\";","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"    private static final String COMMAND_SUCCESS \u003d","lastModifiedDate":"2022-03-11"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"            \"The session was deleted successfully.\";","lastModifiedDate":"2022-03-11"},{"lineNumber":26,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-11"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"    public static final String[] COMMAND_DELIMITERS \u003d {","lastModifiedDate":"2022-03-15"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"        ParserUtils.SESSION_ID_DELIMITER","lastModifiedDate":"2022-03-20"},{"lineNumber":29,"author":{"gitId":"warrencxw"},"content":"    };","lastModifiedDate":"2022-03-15"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":31,"author":{"gitId":"froststein"},"content":"    private int sessionId;","lastModifiedDate":"2022-03-04"},{"lineNumber":32,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":33,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"froststein"},"content":"     * Initializes a SessionDeleteCommand object.","lastModifiedDate":"2022-03-21"},{"lineNumber":35,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"froststein"},"content":"     * @param sessionId An integer that uniquely identifies a session.","lastModifiedDate":"2022-03-09"},{"lineNumber":37,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":38,"author":{"gitId":"froststein"},"content":"    public SessionDeleteCommand(int sessionId) {","lastModifiedDate":"2022-03-04"},{"lineNumber":39,"author":{"gitId":"froststein"},"content":"        this.sessionId \u003d sessionId;","lastModifiedDate":"2022-03-04"},{"lineNumber":40,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-04"},{"lineNumber":41,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":42,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":43,"author":{"gitId":"froststein"},"content":"     * Prepares user arguments for the creation of a SessionDeleteCommand object.","lastModifiedDate":"2022-03-12"},{"lineNumber":44,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-09"},{"lineNumber":45,"author":{"gitId":"froststein"},"content":"     * @param commandArgs A String object that represents the user\u0027s arguments.","lastModifiedDate":"2022-03-09"},{"lineNumber":46,"author":{"gitId":"froststein"},"content":"     * @return A SessionDeleteCommand object if session id was found in user arguments,","lastModifiedDate":"2022-03-09"},{"lineNumber":47,"author":{"gitId":"froststein"},"content":"     *         an InvalidCommand object otherwise.","lastModifiedDate":"2022-03-09"},{"lineNumber":48,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":49,"author":{"gitId":"froststein"},"content":"    public static Command prepare(String commandArgs) {","lastModifiedDate":"2022-03-09"},{"lineNumber":50,"author":{"gitId":"froststein"},"content":"        try {","lastModifiedDate":"2022-03-09"},{"lineNumber":51,"author":{"gitId":"froststein"},"content":"            int sessionId \u003d Parser.parseSessionId(commandArgs);","lastModifiedDate":"2022-03-09"},{"lineNumber":52,"author":{"gitId":"froststein"},"content":"            return new SessionDeleteCommand(sessionId);","lastModifiedDate":"2022-03-09"},{"lineNumber":53,"author":{"gitId":"froststein"},"content":"        } catch (InvalidFormatException formatException) {","lastModifiedDate":"2022-03-09"},{"lineNumber":54,"author":{"gitId":"froststein"},"content":"            String invalidCommandMessage \u003d formatException.getMessage() + \"\\n\" + COMMAND_FORMAT;","lastModifiedDate":"2022-03-09"},{"lineNumber":55,"author":{"gitId":"froststein"},"content":"            return new InvalidCommand(invalidCommandMessage);","lastModifiedDate":"2022-03-09"},{"lineNumber":56,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":57,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":58,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":59,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-04"},{"lineNumber":60,"author":{"gitId":"froststein"},"content":"     * Runs the command to delete a Session object from the list of sessions managed by a Manager Object.","lastModifiedDate":"2022-03-22"},{"lineNumber":61,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-04"},{"lineNumber":62,"author":{"gitId":"froststein"},"content":"     * @param manager A Manager object that manages the TextUI, Profile and Storage object.","lastModifiedDate":"2022-03-23"},{"lineNumber":63,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-04"},{"lineNumber":64,"author":{"gitId":"froststein"},"content":"    @Override","lastModifiedDate":"2022-03-04"},{"lineNumber":65,"author":{"gitId":"froststein"},"content":"    public void run(Manager manager) {","lastModifiedDate":"2022-03-06"},{"lineNumber":66,"author":{"gitId":"froststein"},"content":"        Session session \u003d null;","lastModifiedDate":"2022-03-19"},{"lineNumber":67,"author":{"gitId":"froststein"},"content":"        try {","lastModifiedDate":"2022-03-11"},{"lineNumber":68,"author":{"gitId":"froststein"},"content":"            session \u003d manager.getProfile().getSession(sessionId);","lastModifiedDate":"2022-03-19"},{"lineNumber":69,"author":{"gitId":"froststein"},"content":"            manager.getProfile().removeSession(session);","lastModifiedDate":"2022-03-19"},{"lineNumber":70,"author":{"gitId":"froststein"},"content":"            manager.saveProfile();","lastModifiedDate":"2022-03-22"},{"lineNumber":71,"author":{"gitId":"froststein"},"content":"            manager.getUi().printlnMessageWithDivider(COMMAND_SUCCESS);","lastModifiedDate":"2022-03-15"},{"lineNumber":72,"author":{"gitId":"froststein"},"content":"            Manager.getLogger().log(Level.FINEST, Message.LOGGER_SESSIONDELETE_SESSION_REMOVED + sessionId);","lastModifiedDate":"2022-03-22"},{"lineNumber":73,"author":{"gitId":"froststein"},"content":"        } catch (InvalidDataException dataException) {","lastModifiedDate":"2022-03-11"},{"lineNumber":74,"author":{"gitId":"froststein"},"content":"            manager.getUi().printlnMessage(dataException.getMessage());","lastModifiedDate":"2022-03-11"},{"lineNumber":75,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-11"},{"lineNumber":76,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-04"},{"lineNumber":77,"author":{"gitId":"froststein"},"content":"}","lastModifiedDate":"2022-03-04"}],"authorContributionMap":{"warrencxw":6,"froststein":71}},{"path":"src/main/java/seedu/splitlah/command/SessionListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah.command;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.data.Manager;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.data.Session;","lastModifiedDate":"2022-03-11"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-11"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-11"},{"lineNumber":7,"author":{"gitId":"froststein"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-11"},{"lineNumber":8,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":9,"author":{"gitId":"froststein"},"content":"/**","lastModifiedDate":"2022-03-06"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":" * Represents a command that displays the details of each Session object within a Profile object.","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"froststein"},"content":" *","lastModifiedDate":"2022-03-06"},{"lineNumber":12,"author":{"gitId":"froststein"},"content":" * @author Roy","lastModifiedDate":"2022-03-06"},{"lineNumber":13,"author":{"gitId":"froststein"},"content":" */","lastModifiedDate":"2022-03-06"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":"public class SessionListCommand extends Command {","lastModifiedDate":"2022-03-06"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":"    private static final String SESSION_LIST_HEADER \u003d \"List of Sessions\";","lastModifiedDate":"2022-03-13"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-13"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-06"},{"lineNumber":19,"author":{"gitId":"froststein"},"content":"     * Runs the command to list all existing sessions managed by the Profile Object.","lastModifiedDate":"2022-03-23"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-06"},{"lineNumber":21,"author":{"gitId":"froststein"},"content":"     * @param manager A Manager object that manages the TextUI, Profile and Storage object.","lastModifiedDate":"2022-03-23"},{"lineNumber":22,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-06"},{"lineNumber":23,"author":{"gitId":"froststein"},"content":"    @Override","lastModifiedDate":"2022-03-06"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"    public void run(Manager manager) {","lastModifiedDate":"2022-03-06"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"        ArrayList\u003cSession\u003e sessionsToBePrinted \u003d manager.getProfile().getSessionList();","lastModifiedDate":"2022-03-11"},{"lineNumber":26,"author":{"gitId":"froststein"},"content":"        int sessionListSize \u003d sessionsToBePrinted.size();","lastModifiedDate":"2022-03-12"},{"lineNumber":27,"author":{"gitId":"froststein"},"content":"        if (sessionsToBePrinted.isEmpty()) {","lastModifiedDate":"2022-03-11"},{"lineNumber":28,"author":{"gitId":"froststein"},"content":"            manager.getUi().printlnMessage(Message.ERROR_PROFILE_SESSION_LIST_EMPTY);","lastModifiedDate":"2022-03-11"},{"lineNumber":29,"author":{"gitId":"froststein"},"content":"            return;","lastModifiedDate":"2022-03-11"},{"lineNumber":30,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-11"},{"lineNumber":31,"author":{"gitId":"froststein"},"content":"        manager.getUi().printlnMessageWithDashDivider(SESSION_LIST_HEADER);","lastModifiedDate":"2022-03-15"},{"lineNumber":32,"author":{"gitId":"froststein"},"content":"        for (int i \u003d 0; i \u003c sessionListSize - 1; i++) {","lastModifiedDate":"2022-03-12"},{"lineNumber":33,"author":{"gitId":"froststein"},"content":"            manager.getUi().printlnMessage(sessionsToBePrinted.get(i).getSessionSimplifiedString());","lastModifiedDate":"2022-03-12"},{"lineNumber":34,"author":{"gitId":"froststein"},"content":"            manager.getUi().printDashDivider();","lastModifiedDate":"2022-03-12"},{"lineNumber":35,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-11"},{"lineNumber":36,"author":{"gitId":"froststein"},"content":"        String lastSessionToPrint \u003d sessionsToBePrinted.get(sessionListSize - 1).getSessionSimplifiedString();","lastModifiedDate":"2022-03-12"},{"lineNumber":37,"author":{"gitId":"froststein"},"content":"        manager.getUi().printlnMessageWithDivider(lastSessionToPrint);","lastModifiedDate":"2022-03-12"},{"lineNumber":38,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":39,"author":{"gitId":"froststein"},"content":"}","lastModifiedDate":"2022-03-06"}],"authorContributionMap":{"warrencxw":1,"froststein":38}},{"path":"src/main/java/seedu/splitlah/command/SessionSummaryCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah.command;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.data.Manager;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.data.Person;","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.data.Profile;","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.data.Session;","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.exceptions.InvalidDataException;","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-11"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.ui.TextUI;","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.util.PersonCostPair;","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-03-12"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"import java.util.logging.Level;","lastModifiedDate":"2022-03-17"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-03-05"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":" * Represents a command object that produces a summary of expenditure for a specified Session object.","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":" *","lastModifiedDate":"2022-03-05"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":" * @author Warren","lastModifiedDate":"2022-03-05"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-03-05"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"public class SessionSummaryCommand extends Command {","lastModifiedDate":"2022-03-05"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"    private int sessionId;","lastModifiedDate":"2022-03-12"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"    // MISC CONSTANTS","lastModifiedDate":"2022-03-12"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"    private static final String SUMMARY_HEADER_PREPEND \u003d \"Summary (Session Id #\";","lastModifiedDate":"2022-03-12"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"    private static final String SUMMARY_HEADER_POSTPEND \u003d \") --\";","lastModifiedDate":"2022-03-12"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"    private static final String PREPEND_SESSION_NAME \u003d \"\\nName: \";","lastModifiedDate":"2022-03-12"},{"lineNumber":29,"author":{"gitId":"warrencxw"},"content":"    private static final String PREPEND_SESSION_DATE \u003d \"\\nDate: \";","lastModifiedDate":"2022-03-12"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":"    private static final String PREPEND_PAYMENTS \u003d \"\\nTransactions to be made:\";","lastModifiedDate":"2022-03-12"},{"lineNumber":31,"author":{"gitId":"warrencxw"},"content":"    private static final String PREPEND_TRANSACTION \u003d \"\\n - \";","lastModifiedDate":"2022-03-12"},{"lineNumber":32,"author":{"gitId":"warrencxw"},"content":"    private static final DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");","lastModifiedDate":"2022-03-12"},{"lineNumber":33,"author":{"gitId":"warrencxw"},"content":"    private static final int ZERO_INDEXING_OFFSET \u003d 1;","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"warrencxw"},"content":"    private static final double SMALL_DIFFERENCE_LIMIT \u003d 0.0001;","lastModifiedDate":"2022-03-09"},{"lineNumber":35,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":37,"author":{"gitId":"froststein"},"content":"     * Initializes a SessionSummaryCommand object.","lastModifiedDate":"2022-03-21"},{"lineNumber":38,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-09"},{"lineNumber":39,"author":{"gitId":"warrencxw"},"content":"     * @param sessionId An integer that uniquely identifies a session.","lastModifiedDate":"2022-03-12"},{"lineNumber":40,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":41,"author":{"gitId":"warrencxw"},"content":"    public SessionSummaryCommand(int sessionId) {","lastModifiedDate":"2022-03-09"},{"lineNumber":42,"author":{"gitId":"warrencxw"},"content":"        this.sessionId \u003d sessionId;","lastModifiedDate":"2022-03-09"},{"lineNumber":43,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":44,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":45,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-12"},{"lineNumber":46,"author":{"gitId":"warrencxw"},"content":"     * Checks whether the difference between two double values is negligible to minimise floating point errors.","lastModifiedDate":"2022-03-12"},{"lineNumber":47,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-03-12"},{"lineNumber":48,"author":{"gitId":"warrencxw"},"content":"     * @param cost1 A double that represents a monetary value to be compared.","lastModifiedDate":"2022-03-12"},{"lineNumber":49,"author":{"gitId":"warrencxw"},"content":"     * @param cost2 Another double that represents a monetary value to be compared.","lastModifiedDate":"2022-03-12"},{"lineNumber":50,"author":{"gitId":"warrencxw"},"content":"     * @return true if the difference is negligible,","lastModifiedDate":"2022-03-12"},{"lineNumber":51,"author":{"gitId":"warrencxw"},"content":"     *         false otherwise.","lastModifiedDate":"2022-03-12"},{"lineNumber":52,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-12"},{"lineNumber":53,"author":{"gitId":"warrencxw"},"content":"    private static boolean isDifferenceSmall(double cost1, double cost2) {","lastModifiedDate":"2022-03-09"},{"lineNumber":54,"author":{"gitId":"warrencxw"},"content":"        return Math.abs(cost1 - cost2) \u003c\u003d SMALL_DIFFERENCE_LIMIT;","lastModifiedDate":"2022-03-09"},{"lineNumber":55,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":56,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":57,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-12"},{"lineNumber":58,"author":{"gitId":"warrencxw"},"content":"     * Checks whether a double value is negligible in monetary value.","lastModifiedDate":"2022-03-12"},{"lineNumber":59,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-03-12"},{"lineNumber":60,"author":{"gitId":"warrencxw"},"content":"     * @param cost A double that represents a monetary value to be checked for.","lastModifiedDate":"2022-03-12"},{"lineNumber":61,"author":{"gitId":"warrencxw"},"content":"     * @return true if the value is negligible,","lastModifiedDate":"2022-03-12"},{"lineNumber":62,"author":{"gitId":"warrencxw"},"content":"     *         false otherwise.","lastModifiedDate":"2022-03-12"},{"lineNumber":63,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-12"},{"lineNumber":64,"author":{"gitId":"warrencxw"},"content":"    private static boolean isValueSmall(double cost) {","lastModifiedDate":"2022-03-09"},{"lineNumber":65,"author":{"gitId":"warrencxw"},"content":"        return Math.abs(cost) \u003c\u003d SMALL_DIFFERENCE_LIMIT;","lastModifiedDate":"2022-03-09"},{"lineNumber":66,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":67,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":68,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-12"},{"lineNumber":69,"author":{"gitId":"warrencxw"},"content":"     * Returns an ArrayList object of PersonCostPair objects which represent the total cost borne by each","lastModifiedDate":"2022-03-12"},{"lineNumber":70,"author":{"gitId":"warrencxw"},"content":"     * Person object in the ArrayList object of Person object provided in the parameter.","lastModifiedDate":"2022-03-12"},{"lineNumber":71,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-03-12"},{"lineNumber":72,"author":{"gitId":"warrencxw"},"content":"     * @param personList An ArrayList object of Person objects representing a list of participants in a Session object.","lastModifiedDate":"2022-03-12"},{"lineNumber":73,"author":{"gitId":"warrencxw"},"content":"     * @return An ArrayList object of PersonCostPair objects each corresponding to a Person object in the","lastModifiedDate":"2022-03-12"},{"lineNumber":74,"author":{"gitId":"warrencxw"},"content":"     *         ArrayList object provided in the parameter.","lastModifiedDate":"2022-03-12"},{"lineNumber":75,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-12"},{"lineNumber":76,"author":{"gitId":"warrencxw"},"content":"    private static ArrayList\u003cPersonCostPair\u003e getPersonCostPairList(ArrayList\u003cPerson\u003e personList) {","lastModifiedDate":"2022-03-09"},{"lineNumber":77,"author":{"gitId":"warrencxw"},"content":"        ArrayList\u003cPersonCostPair\u003e personCostPairList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-09"},{"lineNumber":78,"author":{"gitId":"warrencxw"},"content":"        for (Person person : personList) {","lastModifiedDate":"2022-03-09"},{"lineNumber":79,"author":{"gitId":"warrencxw"},"content":"            PersonCostPair newPair \u003d new PersonCostPair(person);","lastModifiedDate":"2022-03-09"},{"lineNumber":80,"author":{"gitId":"warrencxw"},"content":"            if (!isValueSmall(newPair.getCost())) {","lastModifiedDate":"2022-03-09"},{"lineNumber":81,"author":{"gitId":"warrencxw"},"content":"                personCostPairList.add(newPair);","lastModifiedDate":"2022-03-09"},{"lineNumber":82,"author":{"gitId":"warrencxw"},"content":"            }","lastModifiedDate":"2022-03-09"},{"lineNumber":83,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":84,"author":{"gitId":"warrencxw"},"content":"        return personCostPairList;","lastModifiedDate":"2022-03-09"},{"lineNumber":85,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":86,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":87,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-12"},{"lineNumber":88,"author":{"gitId":"warrencxw"},"content":"     * Checks if an ArrayList object of PersonCostPair objects has a negligible total sum, representing that there","lastModifiedDate":"2022-03-12"},{"lineNumber":89,"author":{"gitId":"warrencxw"},"content":"     * is a matching owing sum of money for every owed sum of money in the Session object.","lastModifiedDate":"2022-03-12"},{"lineNumber":90,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-03-12"},{"lineNumber":91,"author":{"gitId":"warrencxw"},"content":"     * @param personCostPairList An ArrayList object of PersonCostPair objects that each represents the total cost borne","lastModifiedDate":"2022-03-12"},{"lineNumber":92,"author":{"gitId":"warrencxw"},"content":"     *                           by a Person object.","lastModifiedDate":"2022-03-12"},{"lineNumber":93,"author":{"gitId":"warrencxw"},"content":"     * @return true if the provided ArrayList object of PersonCostPair objects has a negligible total sum,","lastModifiedDate":"2022-03-12"},{"lineNumber":94,"author":{"gitId":"warrencxw"},"content":"     *         false otherwise.","lastModifiedDate":"2022-03-12"},{"lineNumber":95,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-12"},{"lineNumber":96,"author":{"gitId":"warrencxw"},"content":"    private static boolean isPersonCostPairListValid(ArrayList\u003cPersonCostPair\u003e personCostPairList) {","lastModifiedDate":"2022-03-09"},{"lineNumber":97,"author":{"gitId":"warrencxw"},"content":"        double total \u003d 0;","lastModifiedDate":"2022-03-09"},{"lineNumber":98,"author":{"gitId":"warrencxw"},"content":"        for (PersonCostPair personCostPair : personCostPairList) {","lastModifiedDate":"2022-03-09"},{"lineNumber":99,"author":{"gitId":"warrencxw"},"content":"            total +\u003d personCostPair.getCost();","lastModifiedDate":"2022-03-09"},{"lineNumber":100,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":101,"author":{"gitId":"warrencxw"},"content":"        return isValueSmall(total);","lastModifiedDate":"2022-03-09"},{"lineNumber":102,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":103,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":104,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-12"},{"lineNumber":105,"author":{"gitId":"warrencxw"},"content":"     * Returns a String object representing a transaction that should happen between two Person objects as described by","lastModifiedDate":"2022-03-12"},{"lineNumber":106,"author":{"gitId":"warrencxw"},"content":"     * the PersonCostPair objects provided as parameters, in order settle the debt/owed amount of at least one person","lastModifiedDate":"2022-03-12"},{"lineNumber":107,"author":{"gitId":"warrencxw"},"content":"     * out of the two persons described by the parameters.","lastModifiedDate":"2022-03-12"},{"lineNumber":108,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-03-12"},{"lineNumber":109,"author":{"gitId":"warrencxw"},"content":"     * @param payer    A PersonCostPair object that describes the total cost borne by a Person object representing a","lastModifiedDate":"2022-03-12"},{"lineNumber":110,"author":{"gitId":"warrencxw"},"content":"     *                 person that has to pay.","lastModifiedDate":"2022-03-12"},{"lineNumber":111,"author":{"gitId":"warrencxw"},"content":"     * @param receiver A PersonCostPair object that describes the total cost borne by a Person object representing a","lastModifiedDate":"2022-03-12"},{"lineNumber":112,"author":{"gitId":"warrencxw"},"content":"     *                 person that has to be paid.","lastModifiedDate":"2022-03-12"},{"lineNumber":113,"author":{"gitId":"warrencxw"},"content":"     * @return A String object representing a transaction between two Person objects if there are debts to settle,","lastModifiedDate":"2022-03-12"},{"lineNumber":114,"author":{"gitId":"warrencxw"},"content":"     *         an empty String object if both parties have a negligible debt/to-be-paid amount.","lastModifiedDate":"2022-03-12"},{"lineNumber":115,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-12"},{"lineNumber":116,"author":{"gitId":"warrencxw"},"content":"    private String processTransaction(PersonCostPair payer, PersonCostPair receiver) {","lastModifiedDate":"2022-03-09"},{"lineNumber":117,"author":{"gitId":"warrencxw"},"content":"        double payerCost \u003d Math.abs(payer.getCost());","lastModifiedDate":"2022-03-09"},{"lineNumber":118,"author":{"gitId":"warrencxw"},"content":"        double receiverAmount \u003d Math.abs(receiver.getCost());","lastModifiedDate":"2022-03-09"},{"lineNumber":119,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-09"},{"lineNumber":120,"author":{"gitId":"warrencxw"},"content":"        // Both parties have negligible debt/cost","lastModifiedDate":"2022-03-12"},{"lineNumber":121,"author":{"gitId":"warrencxw"},"content":"        if (isValueSmall(payerCost) \u0026\u0026 isValueSmall(receiverAmount)) {","lastModifiedDate":"2022-03-11"},{"lineNumber":122,"author":{"gitId":"warrencxw"},"content":"            payer.setProcessed(true);","lastModifiedDate":"2022-03-11"},{"lineNumber":123,"author":{"gitId":"warrencxw"},"content":"            receiver.setProcessed(true);","lastModifiedDate":"2022-03-11"},{"lineNumber":124,"author":{"gitId":"warrencxw"},"content":"            return \"\";","lastModifiedDate":"2022-03-11"},{"lineNumber":125,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-11"},{"lineNumber":126,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-11"},{"lineNumber":127,"author":{"gitId":"warrencxw"},"content":"        // Equal costs","lastModifiedDate":"2022-03-09"},{"lineNumber":128,"author":{"gitId":"warrencxw"},"content":"        if (isDifferenceSmall(payerCost, receiverAmount)) {","lastModifiedDate":"2022-03-09"},{"lineNumber":129,"author":{"gitId":"warrencxw"},"content":"            payer.setProcessed(true);","lastModifiedDate":"2022-03-09"},{"lineNumber":130,"author":{"gitId":"warrencxw"},"content":"            receiver.setProcessed(true);","lastModifiedDate":"2022-03-09"},{"lineNumber":131,"author":{"gitId":"warrencxw"},"content":"            return payer.getPerson().getName() + \" has to pay \" + receiver.getPerson().getName()","lastModifiedDate":"2022-03-09"},{"lineNumber":132,"author":{"gitId":"warrencxw"},"content":"                    + \" $\" + String.format(\"%.2f\", payerCost);","lastModifiedDate":"2022-03-09"},{"lineNumber":133,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":134,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-09"},{"lineNumber":135,"author":{"gitId":"warrencxw"},"content":"        // Payer has less debt than receiver has to collect","lastModifiedDate":"2022-03-09"},{"lineNumber":136,"author":{"gitId":"warrencxw"},"content":"        if (payerCost \u003c receiverAmount) {","lastModifiedDate":"2022-03-09"},{"lineNumber":137,"author":{"gitId":"warrencxw"},"content":"            payer.setProcessed(true);","lastModifiedDate":"2022-03-09"},{"lineNumber":138,"author":{"gitId":"warrencxw"},"content":"            receiver.setCost(receiverAmount - payerCost);","lastModifiedDate":"2022-03-09"},{"lineNumber":139,"author":{"gitId":"warrencxw"},"content":"            return payer.getPerson().getName() + \" has to pay \" + receiver.getPerson().getName()","lastModifiedDate":"2022-03-09"},{"lineNumber":140,"author":{"gitId":"warrencxw"},"content":"                    + \" $\" + String.format(\"%.2f\", payerCost);","lastModifiedDate":"2022-03-09"},{"lineNumber":141,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":142,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-09"},{"lineNumber":143,"author":{"gitId":"warrencxw"},"content":"        // Payer has more debt than receiver has to collect","lastModifiedDate":"2022-03-09"},{"lineNumber":144,"author":{"gitId":"warrencxw"},"content":"        receiver.setProcessed(true);","lastModifiedDate":"2022-03-09"},{"lineNumber":145,"author":{"gitId":"warrencxw"},"content":"        payer.setCost(receiverAmount - payerCost);","lastModifiedDate":"2022-03-09"},{"lineNumber":146,"author":{"gitId":"warrencxw"},"content":"        return payer.getPerson().getName() + \" has to pay \" + receiver.getPerson().getName()","lastModifiedDate":"2022-03-09"},{"lineNumber":147,"author":{"gitId":"warrencxw"},"content":"                + \" $\" + String.format(\"%.2f\", receiverAmount);","lastModifiedDate":"2022-03-09"},{"lineNumber":148,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":149,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":150,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-12"},{"lineNumber":151,"author":{"gitId":"warrencxw"},"content":"     * Processes the ArrayList object of PersonCostPair objects and returns a String object that represents a","lastModifiedDate":"2022-03-12"},{"lineNumber":152,"author":{"gitId":"warrencxw"},"content":"     * summary of all transactions that has to be made in order for the entire session to reach a settlement","lastModifiedDate":"2022-03-12"},{"lineNumber":153,"author":{"gitId":"warrencxw"},"content":"     * where no debts are owed or uncollected.","lastModifiedDate":"2022-03-12"},{"lineNumber":154,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-03-12"},{"lineNumber":155,"author":{"gitId":"warrencxw"},"content":"     * @param personCostPairList An ArrayList object of PersonCostPair objects that each represents the total cost borne","lastModifiedDate":"2022-03-12"},{"lineNumber":156,"author":{"gitId":"warrencxw"},"content":"     *                           by a Person object.","lastModifiedDate":"2022-03-12"},{"lineNumber":157,"author":{"gitId":"warrencxw"},"content":"     * @param session            A Session object of which the transactions are processed and summarised for.","lastModifiedDate":"2022-03-12"},{"lineNumber":158,"author":{"gitId":"warrencxw"},"content":"     * @return A String object representing the summary of all transactions to be made for the session.","lastModifiedDate":"2022-03-12"},{"lineNumber":159,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-12"},{"lineNumber":160,"author":{"gitId":"warrencxw"},"content":"    private String processAllTransactions(ArrayList\u003cPersonCostPair\u003e personCostPairList, Session session) {","lastModifiedDate":"2022-03-11"},{"lineNumber":161,"author":{"gitId":"warrencxw"},"content":"        String dateString \u003d session.getDateCreated().format(dateFormat);","lastModifiedDate":"2022-03-12"},{"lineNumber":162,"author":{"gitId":"warrencxw"},"content":"        StringBuilder sb \u003d new StringBuilder(SUMMARY_HEADER_PREPEND);","lastModifiedDate":"2022-03-12"},{"lineNumber":163,"author":{"gitId":"warrencxw"},"content":"        sb.append(sessionId).append(SUMMARY_HEADER_POSTPEND);","lastModifiedDate":"2022-03-12"},{"lineNumber":164,"author":{"gitId":"warrencxw"},"content":"        sb.append(PREPEND_SESSION_NAME).append(session.getSessionName());","lastModifiedDate":"2022-03-11"},{"lineNumber":165,"author":{"gitId":"warrencxw"},"content":"        sb.append(PREPEND_SESSION_DATE).append(dateString);","lastModifiedDate":"2022-03-12"},{"lineNumber":166,"author":{"gitId":"warrencxw"},"content":"        sb.append(PREPEND_PAYMENTS);","lastModifiedDate":"2022-03-11"},{"lineNumber":167,"author":{"gitId":"warrencxw"},"content":"        personCostPairList.sort(PersonCostPair::compareTo);","lastModifiedDate":"2022-03-09"},{"lineNumber":168,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-11"},{"lineNumber":169,"author":{"gitId":"warrencxw"},"content":"        int payerIndex \u003d 0;","lastModifiedDate":"2022-03-09"},{"lineNumber":170,"author":{"gitId":"warrencxw"},"content":"        int receiverIndex \u003d personCostPairList.size() - ZERO_INDEXING_OFFSET;","lastModifiedDate":"2022-03-09"},{"lineNumber":171,"author":{"gitId":"warrencxw"},"content":"        assert isPersonCostPairListValid(personCostPairList) : ","lastModifiedDate":"2022-03-12"},{"lineNumber":172,"author":{"gitId":"warrencxw"},"content":"                Message.ASSERT_SESSIONSUMMARY_INVALID_PERSONCOSTPAIR_LIST;","lastModifiedDate":"2022-03-12"},{"lineNumber":173,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":174,"author":{"gitId":"warrencxw"},"content":"        boolean hasInserted \u003d false;","lastModifiedDate":"2022-03-11"},{"lineNumber":175,"author":{"gitId":"warrencxw"},"content":"        while (payerIndex \u003c receiverIndex) {","lastModifiedDate":"2022-03-09"},{"lineNumber":176,"author":{"gitId":"warrencxw"},"content":"            PersonCostPair payer \u003d personCostPairList.get(payerIndex);","lastModifiedDate":"2022-03-09"},{"lineNumber":177,"author":{"gitId":"warrencxw"},"content":"            PersonCostPair receiver \u003d personCostPairList.get(receiverIndex);","lastModifiedDate":"2022-03-11"},{"lineNumber":178,"author":{"gitId":"warrencxw"},"content":"            assert payer.getCost() \u003e receiver.getCost() : ","lastModifiedDate":"2022-03-12"},{"lineNumber":179,"author":{"gitId":"warrencxw"},"content":"                    Message.ASSERT_SESSIONSUMMARY_PAYER_EXPECTS_FROM_RECEIVER;","lastModifiedDate":"2022-03-12"},{"lineNumber":180,"author":{"gitId":"warrencxw"},"content":"            String output \u003d processTransaction(payer, receiver);","lastModifiedDate":"2022-03-09"},{"lineNumber":181,"author":{"gitId":"warrencxw"},"content":"            ","lastModifiedDate":"2022-03-12"},{"lineNumber":182,"author":{"gitId":"warrencxw"},"content":"            if (!output.isEmpty()) {","lastModifiedDate":"2022-03-11"},{"lineNumber":183,"author":{"gitId":"warrencxw"},"content":"                sb.append(PREPEND_TRANSACTION).append(output);","lastModifiedDate":"2022-03-11"},{"lineNumber":184,"author":{"gitId":"warrencxw"},"content":"                hasInserted \u003d true;","lastModifiedDate":"2022-03-11"},{"lineNumber":185,"author":{"gitId":"warrencxw"},"content":"            }","lastModifiedDate":"2022-03-11"},{"lineNumber":186,"author":{"gitId":"warrencxw"},"content":"            if (payer.isProcessed()) {","lastModifiedDate":"2022-03-09"},{"lineNumber":187,"author":{"gitId":"warrencxw"},"content":"                payerIndex +\u003d 1;","lastModifiedDate":"2022-03-09"},{"lineNumber":188,"author":{"gitId":"warrencxw"},"content":"            }","lastModifiedDate":"2022-03-09"},{"lineNumber":189,"author":{"gitId":"warrencxw"},"content":"            if (receiver.isProcessed()) {","lastModifiedDate":"2022-03-09"},{"lineNumber":190,"author":{"gitId":"warrencxw"},"content":"                receiverIndex -\u003d 1;","lastModifiedDate":"2022-03-09"},{"lineNumber":191,"author":{"gitId":"warrencxw"},"content":"            }","lastModifiedDate":"2022-03-09"},{"lineNumber":192,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":193,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":194,"author":{"gitId":"warrencxw"},"content":"        if (!hasInserted) {","lastModifiedDate":"2022-03-11"},{"lineNumber":195,"author":{"gitId":"warrencxw"},"content":"            sb.append(PREPEND_TRANSACTION).append(Message.MESSAGE_SESSIONSUMMARY_NO_PAYMENTS_REQUIRED);","lastModifiedDate":"2022-03-11"},{"lineNumber":196,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-11"},{"lineNumber":197,"author":{"gitId":"warrencxw"},"content":"        return sb.toString();","lastModifiedDate":"2022-03-09"},{"lineNumber":198,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":199,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":200,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-05"},{"lineNumber":201,"author":{"gitId":"warrencxw"},"content":"     * Runs the command with the session identifier as provided by the user input and prints a","lastModifiedDate":"2022-03-05"},{"lineNumber":202,"author":{"gitId":"warrencxw"},"content":"     * summary of expenditure for the session specified by the session identifier.","lastModifiedDate":"2022-03-05"},{"lineNumber":203,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-05"},{"lineNumber":204,"author":{"gitId":"froststein"},"content":"     * @param manager A Manager object that manages the TextUI, Profile and Storage object.","lastModifiedDate":"2022-03-23"},{"lineNumber":205,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-05"},{"lineNumber":206,"author":{"gitId":"warrencxw"},"content":"    @Override","lastModifiedDate":"2022-03-05"},{"lineNumber":207,"author":{"gitId":"froststein"},"content":"    public void run(Manager manager) {","lastModifiedDate":"2022-03-06"},{"lineNumber":208,"author":{"gitId":"warrencxw"},"content":"        Profile profile \u003d manager.getProfile();","lastModifiedDate":"2022-03-09"},{"lineNumber":209,"author":{"gitId":"warrencxw"},"content":"        TextUI ui \u003d manager.getUi();","lastModifiedDate":"2022-03-09"},{"lineNumber":210,"author":{"gitId":"warrencxw"},"content":"        Session session;","lastModifiedDate":"2022-03-09"},{"lineNumber":211,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-09"},{"lineNumber":212,"author":{"gitId":"warrencxw"},"content":"            session \u003d profile.getSession(sessionId);","lastModifiedDate":"2022-03-09"},{"lineNumber":213,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidDataException exception) {","lastModifiedDate":"2022-03-09"},{"lineNumber":214,"author":{"gitId":"warrencxw"},"content":"            ui.printlnMessage(exception.getMessage());","lastModifiedDate":"2022-03-09"},{"lineNumber":215,"author":{"gitId":"warrencxw"},"content":"            Manager.getLogger().log(Level.FINEST, Message.LOGGER_SESSIONSUMMARY_SESSION_ID_NOT_FOUND + sessionId);","lastModifiedDate":"2022-03-22"},{"lineNumber":216,"author":{"gitId":"warrencxw"},"content":"            return;","lastModifiedDate":"2022-03-09"},{"lineNumber":217,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":218,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":219,"author":{"gitId":"warrencxw"},"content":"        ArrayList\u003cPerson\u003e personList \u003d session.getPersonList();","lastModifiedDate":"2022-03-09"},{"lineNumber":220,"author":{"gitId":"warrencxw"},"content":"        ArrayList\u003cPersonCostPair\u003e personCostPairList \u003d getPersonCostPairList(personList);","lastModifiedDate":"2022-03-09"},{"lineNumber":221,"author":{"gitId":"warrencxw"},"content":"        String output \u003d processAllTransactions(personCostPairList, session);","lastModifiedDate":"2022-03-11"},{"lineNumber":222,"author":{"gitId":"warrencxw"},"content":"        ui.printlnMessageWithDivider(output);","lastModifiedDate":"2022-03-12"},{"lineNumber":223,"author":{"gitId":"warrencxw"},"content":"        Manager.getLogger().log(Level.FINEST, Message.LOGGER_SESSIONSUMMARY_SESSION_SUMMARY_PRINTED + sessionId);","lastModifiedDate":"2022-03-22"},{"lineNumber":224,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-05"},{"lineNumber":225,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-03-05"}],"authorContributionMap":{"warrencxw":220,"froststein":5}},{"path":"src/main/java/seedu/splitlah/data/Activity.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah.data;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.exceptions.InvalidDataException;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-10"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":"import java.io.Serializable;","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-04"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"/**","lastModifiedDate":"2022-03-05"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":" * Represents an activity that was done during a group outing session.","lastModifiedDate":"2022-03-05"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":" *","lastModifiedDate":"2022-03-21"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":" * @author Ivan","lastModifiedDate":"2022-03-21"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":" */","lastModifiedDate":"2022-03-05"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":"public class Activity implements Serializable {","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":16,"author":{"gitId":"ivanaitzliddat"},"content":"    private int activityId;","lastModifiedDate":"2022-03-04"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":"    private String activityName;","lastModifiedDate":"2022-03-04"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"    private double totalCost;","lastModifiedDate":"2022-03-05"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":"    private Person personPaid;","lastModifiedDate":"2022-03-05"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"    private ArrayList\u003cPerson\u003e involvedPersonList;","lastModifiedDate":"2022-03-05"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":22,"author":{"gitId":"ivanaitzliddat"},"content":"    private static final String SUMMARY_STRING_SEPARATOR \u003d \" | \";","lastModifiedDate":"2022-03-10"},{"lineNumber":23,"author":{"gitId":"ivanaitzliddat"},"content":"    private static final int ZERO_INDEXING_OFFSET \u003d 1;","lastModifiedDate":"2022-03-10"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":25,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-05"},{"lineNumber":26,"author":{"gitId":"froststein"},"content":"     * Initializes an Activity object.","lastModifiedDate":"2022-03-22"},{"lineNumber":27,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-03-05"},{"lineNumber":28,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param activityId         An integer that uniquely identifies an activity.","lastModifiedDate":"2022-03-10"},{"lineNumber":29,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param activityName       A String object that represents the activity\u0027s name.","lastModifiedDate":"2022-03-10"},{"lineNumber":30,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param totalCost          A double that represents the total cost spent in the activity.","lastModifiedDate":"2022-03-10"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param personPaid         A Person object representing the person who paid for the activity.","lastModifiedDate":"2022-03-10"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param involvedPersonList An ArrayList object containing Person objects","lastModifiedDate":"2022-03-10"},{"lineNumber":33,"author":{"gitId":"ivanaitzliddat"},"content":"     *                           each representing a person involved in the activity.","lastModifiedDate":"2022-03-10"},{"lineNumber":34,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-05"},{"lineNumber":35,"author":{"gitId":"ivanaitzliddat"},"content":"    public Activity(int activityId, String activityName, double totalCost, Person personPaid,","lastModifiedDate":"2022-03-05"},{"lineNumber":36,"author":{"gitId":"ivanaitzliddat"},"content":"                    ArrayList\u003cPerson\u003e involvedPersonList) {","lastModifiedDate":"2022-03-05"},{"lineNumber":37,"author":{"gitId":"ivanaitzliddat"},"content":"        this.activityId \u003d activityId;","lastModifiedDate":"2022-03-05"},{"lineNumber":38,"author":{"gitId":"ivanaitzliddat"},"content":"        this.activityName \u003d activityName;","lastModifiedDate":"2022-03-05"},{"lineNumber":39,"author":{"gitId":"ivanaitzliddat"},"content":"        this.totalCost \u003d totalCost;","lastModifiedDate":"2022-03-05"},{"lineNumber":40,"author":{"gitId":"ivanaitzliddat"},"content":"        this.personPaid \u003d personPaid;","lastModifiedDate":"2022-03-05"},{"lineNumber":41,"author":{"gitId":"ivanaitzliddat"},"content":"        this.involvedPersonList \u003d involvedPersonList;","lastModifiedDate":"2022-03-05"},{"lineNumber":42,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-05"},{"lineNumber":43,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":44,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":45,"author":{"gitId":"ivanaitzliddat"},"content":"     * Returns an integer representing the activity\u0027s unique identifier.","lastModifiedDate":"2022-03-10"},{"lineNumber":46,"author":{"gitId":"ivanaitzliddat"},"content":"     * Assumption: The identifier number is unique across all activity identifiers in the Profile object.","lastModifiedDate":"2022-03-10"},{"lineNumber":47,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":48,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return An integer representing the activity\u0027s identifier.","lastModifiedDate":"2022-03-10"},{"lineNumber":49,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":50,"author":{"gitId":"ivanaitzliddat"},"content":"    public int getActivityId() {","lastModifiedDate":"2022-03-06"},{"lineNumber":51,"author":{"gitId":"ivanaitzliddat"},"content":"        return activityId;","lastModifiedDate":"2022-03-06"},{"lineNumber":52,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":53,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":54,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":55,"author":{"gitId":"ivanaitzliddat"},"content":"     * Returns a String object representing the activity\u0027s name.","lastModifiedDate":"2022-03-10"},{"lineNumber":56,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":57,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return A String object containing the name of the activity.","lastModifiedDate":"2022-03-07"},{"lineNumber":58,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":59,"author":{"gitId":"ivanaitzliddat"},"content":"    public String getActivityName() {","lastModifiedDate":"2022-03-06"},{"lineNumber":60,"author":{"gitId":"ivanaitzliddat"},"content":"        return activityName;","lastModifiedDate":"2022-03-06"},{"lineNumber":61,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":62,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":63,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":64,"author":{"gitId":"ivanaitzliddat"},"content":"     * Returns a double representing the activity\u0027s total cost.","lastModifiedDate":"2022-03-10"},{"lineNumber":65,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":66,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return A double representing the total cost spent in the activity.","lastModifiedDate":"2022-03-10"},{"lineNumber":67,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":68,"author":{"gitId":"ivanaitzliddat"},"content":"    public double getTotalCost() {","lastModifiedDate":"2022-03-06"},{"lineNumber":69,"author":{"gitId":"ivanaitzliddat"},"content":"        return totalCost;","lastModifiedDate":"2022-03-06"},{"lineNumber":70,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":71,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":72,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":73,"author":{"gitId":"ivanaitzliddat"},"content":"     * Returns a Person object representing the activity\u0027s payer.","lastModifiedDate":"2022-03-07"},{"lineNumber":74,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":75,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return A Person object representing the person who paid for the activity.","lastModifiedDate":"2022-03-07"},{"lineNumber":76,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":77,"author":{"gitId":"ivanaitzliddat"},"content":"    public Person getPersonPaid() {","lastModifiedDate":"2022-03-06"},{"lineNumber":78,"author":{"gitId":"ivanaitzliddat"},"content":"        return personPaid;","lastModifiedDate":"2022-03-06"},{"lineNumber":79,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":80,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":81,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":82,"author":{"gitId":"ivanaitzliddat"},"content":"     * Returns an ArrayList object of Person objects representing the persons involved in the activity.","lastModifiedDate":"2022-03-10"},{"lineNumber":83,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":84,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return An ArrayList object containing Person objects each representing a person involved in the activity.","lastModifiedDate":"2022-03-10"},{"lineNumber":85,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":86,"author":{"gitId":"ivanaitzliddat"},"content":"    public ArrayList\u003cPerson\u003e getInvolvedPersonList() {","lastModifiedDate":"2022-03-06"},{"lineNumber":87,"author":{"gitId":"ivanaitzliddat"},"content":"        return involvedPersonList;","lastModifiedDate":"2022-03-06"},{"lineNumber":88,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":89,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":90,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":91,"author":{"gitId":"ivanaitzliddat"},"content":"     * Returns a String object which summarises the activity, including the activity\u0027s unique identifier,","lastModifiedDate":"2022-03-10"},{"lineNumber":92,"author":{"gitId":"ivanaitzliddat"},"content":"     * the name of the activity, the total cost spent in the activity","lastModifiedDate":"2022-03-10"},{"lineNumber":93,"author":{"gitId":"ivanaitzliddat"},"content":"     * and the name of the person who paid for the activity.","lastModifiedDate":"2022-03-10"},{"lineNumber":94,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":95,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return A String object which summarises the activity.","lastModifiedDate":"2022-03-10"},{"lineNumber":96,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":97,"author":{"gitId":"ivanaitzliddat"},"content":"    public String getActivitySummaryString() {","lastModifiedDate":"2022-03-06"},{"lineNumber":98,"author":{"gitId":"ivanaitzliddat"},"content":"        String costInString \u003d \"$\" + String.format(\"%.2f\", totalCost);","lastModifiedDate":"2022-03-06"},{"lineNumber":99,"author":{"gitId":"ivanaitzliddat"},"content":"        String personName \u003d personPaid.getName();","lastModifiedDate":"2022-03-06"},{"lineNumber":100,"author":{"gitId":"ivanaitzliddat"},"content":"        return activityId + SUMMARY_STRING_SEPARATOR + activityName + SUMMARY_STRING_SEPARATOR + costInString","lastModifiedDate":"2022-03-07"},{"lineNumber":101,"author":{"gitId":"ivanaitzliddat"},"content":"                + SUMMARY_STRING_SEPARATOR + personName;","lastModifiedDate":"2022-03-07"},{"lineNumber":102,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":103,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":104,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":105,"author":{"gitId":"ivanaitzliddat"},"content":"     * Returns a String object of the persons involved in the activity and their respective costs for the activity,","lastModifiedDate":"2022-03-10"},{"lineNumber":106,"author":{"gitId":"ivanaitzliddat"},"content":"     * if the unique identifier of the activity exists and the persons involved indeed participated in the activity.","lastModifiedDate":"2022-03-10"},{"lineNumber":107,"author":{"gitId":"ivanaitzliddat"},"content":"     * Else, the method returns an error message.","lastModifiedDate":"2022-03-10"},{"lineNumber":108,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":109,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return A String object representing persons involved and their respective costs.","lastModifiedDate":"2022-03-07"},{"lineNumber":110,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws InvalidDataException If there is no activity found or if the person in the involvedPersonsList","lastModifiedDate":"2022-03-07"},{"lineNumber":111,"author":{"gitId":"ivanaitzliddat"},"content":"     *                              did not participate in the activity.","lastModifiedDate":"2022-03-07"},{"lineNumber":112,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":113,"author":{"gitId":"ivanaitzliddat"},"content":"    private String getInvolvedListString() {","lastModifiedDate":"2022-03-10"},{"lineNumber":114,"author":{"gitId":"ivanaitzliddat"},"content":"        String involvedListString;","lastModifiedDate":"2022-03-10"},{"lineNumber":115,"author":{"gitId":"ivanaitzliddat"},"content":"        try {","lastModifiedDate":"2022-03-10"},{"lineNumber":116,"author":{"gitId":"ivanaitzliddat"},"content":"            involvedListString \u003d convertInvolvedListToString();","lastModifiedDate":"2022-03-10"},{"lineNumber":117,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (InvalidDataException e) {","lastModifiedDate":"2022-03-10"},{"lineNumber":118,"author":{"gitId":"ivanaitzliddat"},"content":"            return Message.ERROR_ACTIVITY_INACCURATE_INVOLVED_LIST;","lastModifiedDate":"2022-03-10"},{"lineNumber":119,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-10"},{"lineNumber":120,"author":{"gitId":"ivanaitzliddat"},"content":"        return involvedListString;","lastModifiedDate":"2022-03-10"},{"lineNumber":121,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":122,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":123,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":124,"author":{"gitId":"ivanaitzliddat"},"content":"     * Returns a String object representing the name of the persons involved in the activity and the cost that each","lastModifiedDate":"2022-03-10"},{"lineNumber":125,"author":{"gitId":"ivanaitzliddat"},"content":"     * person owed for the activity in a proper format.","lastModifiedDate":"2022-03-10"},{"lineNumber":126,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-03-10"},{"lineNumber":127,"author":{"gitId":"froststein"},"content":"     * @return A String object that representing the name and costs of each person involved in the activity.","lastModifiedDate":"2022-03-23"},{"lineNumber":128,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws InvalidDataException If there is no activity found or if the person in the involvedPersonsList","lastModifiedDate":"2022-03-10"},{"lineNumber":129,"author":{"gitId":"ivanaitzliddat"},"content":"     *                              did not participate in the activity.","lastModifiedDate":"2022-03-10"},{"lineNumber":130,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":131,"author":{"gitId":"ivanaitzliddat"},"content":"    private String convertInvolvedListToString() throws InvalidDataException {","lastModifiedDate":"2022-03-10"},{"lineNumber":132,"author":{"gitId":"ivanaitzliddat"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-03-10"},{"lineNumber":133,"author":{"gitId":"ivanaitzliddat"},"content":"        for (int i \u003d 1; i \u003c involvedPersonList.size(); i++) {","lastModifiedDate":"2022-03-12"},{"lineNumber":134,"author":{"gitId":"ivanaitzliddat"},"content":"            Person person \u003d involvedPersonList.get(i - ZERO_INDEXING_OFFSET);","lastModifiedDate":"2022-03-07"},{"lineNumber":135,"author":{"gitId":"ivanaitzliddat"},"content":"            String personName \u003d person.getName();","lastModifiedDate":"2022-03-07"},{"lineNumber":136,"author":{"gitId":"ivanaitzliddat"},"content":"            Double costOwed \u003d person.getActivityCostOwed(activityId);","lastModifiedDate":"2022-03-07"},{"lineNumber":137,"author":{"gitId":"ivanaitzliddat"},"content":"            String nextLineToAppend \u003d formString(i, personName, costOwed);","lastModifiedDate":"2022-03-07"},{"lineNumber":138,"author":{"gitId":"ivanaitzliddat"},"content":"            sb.append(nextLineToAppend + \"\\n\");","lastModifiedDate":"2022-03-12"},{"lineNumber":139,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":140,"author":{"gitId":"ivanaitzliddat"},"content":"        Person person \u003d involvedPersonList.get(involvedPersonList.size() - ZERO_INDEXING_OFFSET);","lastModifiedDate":"2022-03-12"},{"lineNumber":141,"author":{"gitId":"ivanaitzliddat"},"content":"        String personName \u003d person.getName();","lastModifiedDate":"2022-03-12"},{"lineNumber":142,"author":{"gitId":"ivanaitzliddat"},"content":"        Double costOwed \u003d person.getActivityCostOwed(activityId);","lastModifiedDate":"2022-03-12"},{"lineNumber":143,"author":{"gitId":"ivanaitzliddat"},"content":"        String nextLineToAppend \u003d formString(involvedPersonList.size(), personName, costOwed);","lastModifiedDate":"2022-03-12"},{"lineNumber":144,"author":{"gitId":"ivanaitzliddat"},"content":"        sb.append(nextLineToAppend);","lastModifiedDate":"2022-03-12"},{"lineNumber":145,"author":{"gitId":"ivanaitzliddat"},"content":"        return sb.toString();","lastModifiedDate":"2022-03-07"},{"lineNumber":146,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":147,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":148,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":149,"author":{"gitId":"ivanaitzliddat"},"content":"     * Returns a String object with the correct format for the persons involved int the activity","lastModifiedDate":"2022-03-10"},{"lineNumber":150,"author":{"gitId":"ivanaitzliddat"},"content":"     * and their respective costs for the activity.","lastModifiedDate":"2022-03-10"},{"lineNumber":151,"author":{"gitId":"ivanaitzliddat"},"content":"     * Format: \u003c[INDEX]. [PERSON_NAME], $[COST_OWED]\u003e, e.g. \u003c1. Bob, $5.00\u003e","lastModifiedDate":"2022-03-07"},{"lineNumber":152,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":153,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param index      An integer representing index of the Person object involved in the activity.","lastModifiedDate":"2022-03-10"},{"lineNumber":154,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param personName A String object representing the name of the person involved in the activity.","lastModifiedDate":"2022-03-10"},{"lineNumber":155,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param costOwed   A double representing the cost that is owed by the person involved in the activity.","lastModifiedDate":"2022-03-10"},{"lineNumber":156,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return A String object with the correct format representing involved persons and costs.","lastModifiedDate":"2022-03-07"},{"lineNumber":157,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":158,"author":{"gitId":"ivanaitzliddat"},"content":"    private String formString(int index, String personName, Double costOwed) {","lastModifiedDate":"2022-03-07"},{"lineNumber":159,"author":{"gitId":"ivanaitzliddat"},"content":"        return \" \" + index + \". \" + personName + \", $\" + String.format(\"%.2f\", costOwed);","lastModifiedDate":"2022-03-12"},{"lineNumber":160,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":161,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":162,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":163,"author":{"gitId":"ivanaitzliddat"},"content":"     * Returns a String which provides the details of the activity, including the name of the activity,","lastModifiedDate":"2022-03-10"},{"lineNumber":164,"author":{"gitId":"ivanaitzliddat"},"content":"     * the activity\u0027s unique identifier, the name of the person who paid for the activity,","lastModifiedDate":"2022-03-10"},{"lineNumber":165,"author":{"gitId":"ivanaitzliddat"},"content":"     * the total cost of the activity, the persons involved in the activity","lastModifiedDate":"2022-03-10"},{"lineNumber":166,"author":{"gitId":"ivanaitzliddat"},"content":"     * and their respective costs for the activity.","lastModifiedDate":"2022-03-10"},{"lineNumber":167,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-03-10"},{"lineNumber":168,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return A String object representing the details of the activity.","lastModifiedDate":"2022-03-10"},{"lineNumber":169,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":170,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-03-10"},{"lineNumber":171,"author":{"gitId":"ivanaitzliddat"},"content":"    public String toString() {","lastModifiedDate":"2022-03-10"},{"lineNumber":172,"author":{"gitId":"ivanaitzliddat"},"content":"        return \"Activity Id #\" + activityId + \" --\\n\"","lastModifiedDate":"2022-03-12"},{"lineNumber":173,"author":{"gitId":"ivanaitzliddat"},"content":"                + \"Name:  \" + activityName + \u0027\\n\u0027","lastModifiedDate":"2022-03-10"},{"lineNumber":174,"author":{"gitId":"ivanaitzliddat"},"content":"                + \"Id:    \" + activityId + \u0027\\n\u0027","lastModifiedDate":"2022-03-10"},{"lineNumber":175,"author":{"gitId":"ivanaitzliddat"},"content":"                + \"Payer: \" + personPaid.getName() + \u0027\\n\u0027","lastModifiedDate":"2022-03-10"},{"lineNumber":176,"author":{"gitId":"ivanaitzliddat"},"content":"                + \"Cost:  $\" + String.format(\"%.2f\", totalCost) + \u0027\\n\u0027","lastModifiedDate":"2022-03-12"},{"lineNumber":177,"author":{"gitId":"ivanaitzliddat"},"content":"                + \"Involved: \\n\"","lastModifiedDate":"2022-03-12"},{"lineNumber":178,"author":{"gitId":"ivanaitzliddat"},"content":"                + getInvolvedListString();","lastModifiedDate":"2022-03-10"},{"lineNumber":179,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":180,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":181,"author":{"gitId":"ivanaitzliddat"},"content":"}","lastModifiedDate":"2022-03-04"}],"authorContributionMap":{"ivanaitzliddat":176,"froststein":5}},{"path":"src/main/java/seedu/splitlah/data/ActivityCost.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah.data;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":3,"author":{"gitId":"matheril"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-17"},{"lineNumber":4,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"import java.io.Serializable;","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"matheril"},"content":"import java.util.logging.Level;","lastModifiedDate":"2022-03-17"},{"lineNumber":7,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":8,"author":{"gitId":"matheril"},"content":"/**","lastModifiedDate":"2022-03-04"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":" * Represents the costs borne by a person for an activity.","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"matheril"},"content":" *","lastModifiedDate":"2022-03-04"},{"lineNumber":11,"author":{"gitId":"matheril"},"content":" * @author Saurav","lastModifiedDate":"2022-03-04"},{"lineNumber":12,"author":{"gitId":"matheril"},"content":" */","lastModifiedDate":"2022-03-04"},{"lineNumber":13,"author":{"gitId":"froststein"},"content":"public class ActivityCost implements Serializable {","lastModifiedDate":"2022-03-22"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"matheril"},"content":"    private int activityId;","lastModifiedDate":"2022-03-04"},{"lineNumber":16,"author":{"gitId":"matheril"},"content":"    private double costPaid;","lastModifiedDate":"2022-03-06"},{"lineNumber":17,"author":{"gitId":"matheril"},"content":"    private double costOwed;","lastModifiedDate":"2022-03-06"},{"lineNumber":18,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":19,"author":{"gitId":"matheril"},"content":"    /**","lastModifiedDate":"2022-03-04"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"     * Initializes an ActivityCost object.","lastModifiedDate":"2022-03-22"},{"lineNumber":21,"author":{"gitId":"matheril"},"content":"     * Assumption: Every field is non-negative.","lastModifiedDate":"2022-03-04"},{"lineNumber":22,"author":{"gitId":"matheril"},"content":"     *","lastModifiedDate":"2022-03-04"},{"lineNumber":23,"author":{"gitId":"matheril"},"content":"     * @param activityId An integer that uniquely identifies an activity.","lastModifiedDate":"2022-03-12"},{"lineNumber":24,"author":{"gitId":"matheril"},"content":"     * @param costPaid   A double that represents the cost paid by a Person object.","lastModifiedDate":"2022-03-12"},{"lineNumber":25,"author":{"gitId":"matheril"},"content":"     * @param costOwed   A double that represents the cost owed by a Person object.","lastModifiedDate":"2022-03-12"},{"lineNumber":26,"author":{"gitId":"matheril"},"content":"     */","lastModifiedDate":"2022-03-04"},{"lineNumber":27,"author":{"gitId":"matheril"},"content":"    public ActivityCost(int activityId, double costPaid, double costOwed) {","lastModifiedDate":"2022-03-06"},{"lineNumber":28,"author":{"gitId":"matheril"},"content":"        Manager.getLogger().log(Level.FINEST, Message.LOGGER_ACTIVITYCOST_CONSTRUCT_WITH_ALL_PARAMS);","lastModifiedDate":"2022-03-18"},{"lineNumber":29,"author":{"gitId":"matheril"},"content":"        this.activityId \u003d activityId;","lastModifiedDate":"2022-03-04"},{"lineNumber":30,"author":{"gitId":"matheril"},"content":"        this.costPaid \u003d costPaid;","lastModifiedDate":"2022-03-06"},{"lineNumber":31,"author":{"gitId":"matheril"},"content":"        this.costOwed \u003d costOwed;","lastModifiedDate":"2022-03-06"},{"lineNumber":32,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-04"},{"lineNumber":33,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":34,"author":{"gitId":"matheril"},"content":"    /**","lastModifiedDate":"2022-03-04"},{"lineNumber":35,"author":{"gitId":"matheril"},"content":"     * Constructs an ActivityCost object and sets cost to 0 if only activityId is supplied.","lastModifiedDate":"2022-03-04"},{"lineNumber":36,"author":{"gitId":"matheril"},"content":"     * Assumption: Every field is non-negative.","lastModifiedDate":"2022-03-04"},{"lineNumber":37,"author":{"gitId":"matheril"},"content":"     *","lastModifiedDate":"2022-03-04"},{"lineNumber":38,"author":{"gitId":"matheril"},"content":"     * @param activityId int representing the activityId.","lastModifiedDate":"2022-03-04"},{"lineNumber":39,"author":{"gitId":"matheril"},"content":"     */","lastModifiedDate":"2022-03-04"},{"lineNumber":40,"author":{"gitId":"matheril"},"content":"    public ActivityCost(int activityId) {","lastModifiedDate":"2022-03-04"},{"lineNumber":41,"author":{"gitId":"matheril"},"content":"        this(activityId, 0, 0);","lastModifiedDate":"2022-03-06"},{"lineNumber":42,"author":{"gitId":"matheril"},"content":"        Manager.getLogger().log(Level.FINEST, Message.LOGGER_ACTIVITYCOST_CONSTRUCT_WITH_ACTIVITYID);","lastModifiedDate":"2022-03-18"},{"lineNumber":43,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-04"},{"lineNumber":44,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":45,"author":{"gitId":"matheril"},"content":"    /**","lastModifiedDate":"2022-03-04"},{"lineNumber":46,"author":{"gitId":"matheril"},"content":"     * Default constructor, sets activityId to -1 to avoid conflict with other activityIds.","lastModifiedDate":"2022-03-04"},{"lineNumber":47,"author":{"gitId":"matheril"},"content":"     */","lastModifiedDate":"2022-03-04"},{"lineNumber":48,"author":{"gitId":"matheril"},"content":"    public ActivityCost() {","lastModifiedDate":"2022-03-04"},{"lineNumber":49,"author":{"gitId":"matheril"},"content":"        this.activityId \u003d -1;","lastModifiedDate":"2022-03-04"},{"lineNumber":50,"author":{"gitId":"matheril"},"content":"        this.costPaid \u003d 0;","lastModifiedDate":"2022-03-06"},{"lineNumber":51,"author":{"gitId":"matheril"},"content":"        this.costOwed \u003d 0;","lastModifiedDate":"2022-03-06"},{"lineNumber":52,"author":{"gitId":"matheril"},"content":"        Manager.getLogger().log(Level.FINEST, Message.LOGGER_ACTIVITYCOST_CONSTRUCT_WITH_DEFAULT_PARAMS);","lastModifiedDate":"2022-03-18"},{"lineNumber":53,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-04"},{"lineNumber":54,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":55,"author":{"gitId":"matheril"},"content":"    public int getActivityId() {","lastModifiedDate":"2022-03-04"},{"lineNumber":56,"author":{"gitId":"matheril"},"content":"        return activityId;","lastModifiedDate":"2022-03-04"},{"lineNumber":57,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-04"},{"lineNumber":58,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":59,"author":{"gitId":"matheril"},"content":"    public double getCostPaid() {","lastModifiedDate":"2022-03-06"},{"lineNumber":60,"author":{"gitId":"matheril"},"content":"        return costPaid;","lastModifiedDate":"2022-03-06"},{"lineNumber":61,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":62,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":63,"author":{"gitId":"matheril"},"content":"    public double getCostOwed() {","lastModifiedDate":"2022-03-06"},{"lineNumber":64,"author":{"gitId":"matheril"},"content":"        return costOwed;","lastModifiedDate":"2022-03-06"},{"lineNumber":65,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-04"},{"lineNumber":66,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":67,"author":{"gitId":"matheril"},"content":"    public void setActivityId(int activityId) {","lastModifiedDate":"2022-03-04"},{"lineNumber":68,"author":{"gitId":"matheril"},"content":"        this.activityId \u003d activityId;","lastModifiedDate":"2022-03-04"},{"lineNumber":69,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-04"},{"lineNumber":70,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":71,"author":{"gitId":"matheril"},"content":"    public void setCostPaid(int costPaid) {","lastModifiedDate":"2022-03-06"},{"lineNumber":72,"author":{"gitId":"matheril"},"content":"        this.costPaid \u003d costPaid;","lastModifiedDate":"2022-03-06"},{"lineNumber":73,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":74,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":75,"author":{"gitId":"matheril"},"content":"    public void setCostOwed(int costOwed) {","lastModifiedDate":"2022-03-06"},{"lineNumber":76,"author":{"gitId":"matheril"},"content":"        this.costOwed \u003d costOwed;","lastModifiedDate":"2022-03-06"},{"lineNumber":77,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-04"},{"lineNumber":78,"author":{"gitId":"matheril"},"content":"}","lastModifiedDate":"2022-03-04"}],"authorContributionMap":{"warrencxw":2,"froststein":4,"matheril":72}},{"path":"src/main/java/seedu/splitlah/data/Group.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lelerer"},"content":"package seedu.splitlah.data;","lastModifiedDate":"2022-03-17"},{"lineNumber":2,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":3,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.exceptions.InvalidDataException;","lastModifiedDate":"2022-03-17"},{"lineNumber":4,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-17"},{"lineNumber":5,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":"import java.io.Serializable;","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"lelerer"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-17"},{"lineNumber":8,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":9,"author":{"gitId":"lelerer"},"content":"/**","lastModifiedDate":"2022-03-17"},{"lineNumber":10,"author":{"gitId":"lelerer"},"content":" * Represents a group of people.","lastModifiedDate":"2022-03-17"},{"lineNumber":11,"author":{"gitId":"lelerer"},"content":" *","lastModifiedDate":"2022-03-17"},{"lineNumber":12,"author":{"gitId":"lelerer"},"content":" * @author Tianle","lastModifiedDate":"2022-03-17"},{"lineNumber":13,"author":{"gitId":"lelerer"},"content":" */","lastModifiedDate":"2022-03-17"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":"public class Group implements Serializable {","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":"    private PersonList personList;","lastModifiedDate":"2022-03-22"},{"lineNumber":17,"author":{"gitId":"lelerer"},"content":"    private String groupName;","lastModifiedDate":"2022-03-17"},{"lineNumber":18,"author":{"gitId":"lelerer"},"content":"    private int groupId;","lastModifiedDate":"2022-03-17"},{"lineNumber":19,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":20,"author":{"gitId":"lelerer"},"content":"    private static final int OFFSET \u003d 1;","lastModifiedDate":"2022-03-17"},{"lineNumber":21,"author":{"gitId":"lelerer"},"content":"    private static final String SEPARATOR \u003d \" | \";","lastModifiedDate":"2022-03-21"},{"lineNumber":22,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":23,"author":{"gitId":"lelerer"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"     * Initializes a Group object.","lastModifiedDate":"2022-03-22"},{"lineNumber":25,"author":{"gitId":"lelerer"},"content":"     *","lastModifiedDate":"2022-03-17"},{"lineNumber":26,"author":{"gitId":"lelerer"},"content":"     * @param groupName  A String object that represents the group\u0027s name.","lastModifiedDate":"2022-03-17"},{"lineNumber":27,"author":{"gitId":"lelerer"},"content":"     * @param groupId    An integer that uniquely identifies a group.","lastModifiedDate":"2022-03-17"},{"lineNumber":28,"author":{"gitId":"lelerer"},"content":"     * @param personList An ArrayList object containing Person objects","lastModifiedDate":"2022-03-18"},{"lineNumber":29,"author":{"gitId":"lelerer"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":30,"author":{"gitId":"froststein"},"content":"    public Group(String groupName, int groupId, PersonList personList) {","lastModifiedDate":"2022-03-22"},{"lineNumber":31,"author":{"gitId":"lelerer"},"content":"        this.groupName \u003d groupName;","lastModifiedDate":"2022-03-17"},{"lineNumber":32,"author":{"gitId":"lelerer"},"content":"        this.groupId \u003d groupId;","lastModifiedDate":"2022-03-17"},{"lineNumber":33,"author":{"gitId":"lelerer"},"content":"        this.personList \u003d personList;","lastModifiedDate":"2022-03-18"},{"lineNumber":34,"author":{"gitId":"lelerer"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":35,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":36,"author":{"gitId":"lelerer"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":37,"author":{"gitId":"lelerer"},"content":"     * Returns the group\u0027s name.","lastModifiedDate":"2022-03-17"},{"lineNumber":38,"author":{"gitId":"lelerer"},"content":"     *","lastModifiedDate":"2022-03-17"},{"lineNumber":39,"author":{"gitId":"lelerer"},"content":"     * @return A String object containing the name of the group.","lastModifiedDate":"2022-03-17"},{"lineNumber":40,"author":{"gitId":"lelerer"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":41,"author":{"gitId":"lelerer"},"content":"    public String getGroupName() {","lastModifiedDate":"2022-03-17"},{"lineNumber":42,"author":{"gitId":"lelerer"},"content":"        return groupName;","lastModifiedDate":"2022-03-17"},{"lineNumber":43,"author":{"gitId":"lelerer"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":44,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":45,"author":{"gitId":"lelerer"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":46,"author":{"gitId":"lelerer"},"content":"     * Returns the group\u0027s unique identifier.","lastModifiedDate":"2022-03-17"},{"lineNumber":47,"author":{"gitId":"lelerer"},"content":"     *","lastModifiedDate":"2022-03-17"},{"lineNumber":48,"author":{"gitId":"froststein"},"content":"     * @return An integer representing the group\u0027s identifier.","lastModifiedDate":"2022-03-23"},{"lineNumber":49,"author":{"gitId":"lelerer"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":50,"author":{"gitId":"lelerer"},"content":"    public int getGroupId() {","lastModifiedDate":"2022-03-17"},{"lineNumber":51,"author":{"gitId":"lelerer"},"content":"        return groupId;","lastModifiedDate":"2022-03-17"},{"lineNumber":52,"author":{"gitId":"lelerer"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":53,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":54,"author":{"gitId":"lelerer"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":55,"author":{"gitId":"lelerer"},"content":"     * Returns an ArrayList object containing Person objects representing the participants in the group.","lastModifiedDate":"2022-03-17"},{"lineNumber":56,"author":{"gitId":"lelerer"},"content":"     *","lastModifiedDate":"2022-03-17"},{"lineNumber":57,"author":{"gitId":"lelerer"},"content":"     * @return An ArrayList object containing Person objects in the group.","lastModifiedDate":"2022-03-17"},{"lineNumber":58,"author":{"gitId":"lelerer"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":59,"author":{"gitId":"lelerer"},"content":"    public ArrayList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2022-03-17"},{"lineNumber":60,"author":{"gitId":"froststein"},"content":"        return personList.getPersonList();","lastModifiedDate":"2022-03-22"},{"lineNumber":61,"author":{"gitId":"lelerer"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":62,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":63,"author":{"gitId":"lelerer"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":64,"author":{"gitId":"lelerer"},"content":"     * Checks whether the Group object has at least one participant.","lastModifiedDate":"2022-03-17"},{"lineNumber":65,"author":{"gitId":"lelerer"},"content":"     *","lastModifiedDate":"2022-03-17"},{"lineNumber":66,"author":{"gitId":"lelerer"},"content":"     * @return true if the Group object has at least one participant,","lastModifiedDate":"2022-03-17"},{"lineNumber":67,"author":{"gitId":"lelerer"},"content":"     *         false otherwise.","lastModifiedDate":"2022-03-17"},{"lineNumber":68,"author":{"gitId":"lelerer"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":69,"author":{"gitId":"lelerer"},"content":"    public boolean isGroupEmpty() {","lastModifiedDate":"2022-03-17"},{"lineNumber":70,"author":{"gitId":"lelerer"},"content":"        return personList.isEmpty();","lastModifiedDate":"2022-03-17"},{"lineNumber":71,"author":{"gitId":"lelerer"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":72,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":73,"author":{"gitId":"lelerer"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":74,"author":{"gitId":"lelerer"},"content":"     * Adds a Person object to the group.","lastModifiedDate":"2022-03-17"},{"lineNumber":75,"author":{"gitId":"lelerer"},"content":"     *","lastModifiedDate":"2022-03-17"},{"lineNumber":76,"author":{"gitId":"froststein"},"content":"     * @param person A Person object to be added into the group.","lastModifiedDate":"2022-03-23"},{"lineNumber":77,"author":{"gitId":"lelerer"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":78,"author":{"gitId":"lelerer"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2022-03-17"},{"lineNumber":79,"author":{"gitId":"froststein"},"content":"        personList.addPerson(person);","lastModifiedDate":"2022-03-22"},{"lineNumber":80,"author":{"gitId":"lelerer"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":81,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":82,"author":{"gitId":"lelerer"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":83,"author":{"gitId":"lelerer"},"content":"     * Checks if a Person object is contained in the Group object.","lastModifiedDate":"2022-03-17"},{"lineNumber":84,"author":{"gitId":"lelerer"},"content":"     *","lastModifiedDate":"2022-03-17"},{"lineNumber":85,"author":{"gitId":"lelerer"},"content":"     * @param person A Person object.","lastModifiedDate":"2022-03-17"},{"lineNumber":86,"author":{"gitId":"lelerer"},"content":"     * @return true if a particular Person object is in the Group object,","lastModifiedDate":"2022-03-17"},{"lineNumber":87,"author":{"gitId":"lelerer"},"content":"     *         false otherwise.","lastModifiedDate":"2022-03-17"},{"lineNumber":88,"author":{"gitId":"lelerer"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":89,"author":{"gitId":"lelerer"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2022-03-17"},{"lineNumber":90,"author":{"gitId":"lelerer"},"content":"        if (personList.isEmpty()) {","lastModifiedDate":"2022-03-17"},{"lineNumber":91,"author":{"gitId":"lelerer"},"content":"            return false;","lastModifiedDate":"2022-03-17"},{"lineNumber":92,"author":{"gitId":"lelerer"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":93,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":94,"author":{"gitId":"froststein"},"content":"        for (Person personInGroup : personList.getPersonList()) {","lastModifiedDate":"2022-03-22"},{"lineNumber":95,"author":{"gitId":"lelerer"},"content":"            if (personInGroup.getName().equalsIgnoreCase(person.getName())) {","lastModifiedDate":"2022-03-17"},{"lineNumber":96,"author":{"gitId":"lelerer"},"content":"                return true;","lastModifiedDate":"2022-03-17"},{"lineNumber":97,"author":{"gitId":"lelerer"},"content":"            }","lastModifiedDate":"2022-03-17"},{"lineNumber":98,"author":{"gitId":"lelerer"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":99,"author":{"gitId":"lelerer"},"content":"        return false;","lastModifiedDate":"2022-03-17"},{"lineNumber":100,"author":{"gitId":"lelerer"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":101,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":102,"author":{"gitId":"lelerer"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":103,"author":{"gitId":"lelerer"},"content":"     * Returns a Person object represented by the name.","lastModifiedDate":"2022-03-17"},{"lineNumber":104,"author":{"gitId":"lelerer"},"content":"     *","lastModifiedDate":"2022-03-17"},{"lineNumber":105,"author":{"gitId":"lelerer"},"content":"     * @param personName A String object that represents the person\u0027s name.","lastModifiedDate":"2022-03-17"},{"lineNumber":106,"author":{"gitId":"lelerer"},"content":"     * @return A Person object represented by its name.","lastModifiedDate":"2022-03-17"},{"lineNumber":107,"author":{"gitId":"lelerer"},"content":"     * @throws InvalidDataException if the person is not in the Group object.","lastModifiedDate":"2022-03-17"},{"lineNumber":108,"author":{"gitId":"lelerer"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":109,"author":{"gitId":"lelerer"},"content":"    public Person getPersonFromGroup(String personName) throws InvalidDataException {","lastModifiedDate":"2022-03-17"},{"lineNumber":110,"author":{"gitId":"lelerer"},"content":"        if (personList.isEmpty()) {","lastModifiedDate":"2022-03-17"},{"lineNumber":111,"author":{"gitId":"lelerer"},"content":"            throw new InvalidDataException(Message.ERROR_GROUP_EMPTY_PERSON_LIST);","lastModifiedDate":"2022-03-17"},{"lineNumber":112,"author":{"gitId":"lelerer"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":113,"author":{"gitId":"froststein"},"content":"        for (Person personInGroup : personList.getPersonList()) {","lastModifiedDate":"2022-03-22"},{"lineNumber":114,"author":{"gitId":"lelerer"},"content":"            if (personInGroup.getName().equalsIgnoreCase(personName)) {","lastModifiedDate":"2022-03-17"},{"lineNumber":115,"author":{"gitId":"lelerer"},"content":"                return personInGroup;","lastModifiedDate":"2022-03-17"},{"lineNumber":116,"author":{"gitId":"lelerer"},"content":"            }","lastModifiedDate":"2022-03-17"},{"lineNumber":117,"author":{"gitId":"lelerer"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":118,"author":{"gitId":"lelerer"},"content":"        throw new InvalidDataException(Message.ERROR_GROUP_PERSON_NOT_IN_LIST);","lastModifiedDate":"2022-03-17"},{"lineNumber":119,"author":{"gitId":"lelerer"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":120,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":121,"author":{"gitId":"lelerer"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":122,"author":{"gitId":"lelerer"},"content":"     * Removes a Person object from the Group object.","lastModifiedDate":"2022-03-17"},{"lineNumber":123,"author":{"gitId":"lelerer"},"content":"     *","lastModifiedDate":"2022-03-17"},{"lineNumber":124,"author":{"gitId":"lelerer"},"content":"     * @param personName A String object that represents the person\u0027s name.","lastModifiedDate":"2022-03-17"},{"lineNumber":125,"author":{"gitId":"lelerer"},"content":"     * @throws InvalidDataException If the Person is not in the Group object.","lastModifiedDate":"2022-03-17"},{"lineNumber":126,"author":{"gitId":"lelerer"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":127,"author":{"gitId":"lelerer"},"content":"    public void removePerson(String personName) throws InvalidDataException {","lastModifiedDate":"2022-03-17"},{"lineNumber":128,"author":{"gitId":"lelerer"},"content":"        Person personToBeRemoved \u003d getPersonFromGroup(personName);","lastModifiedDate":"2022-03-17"},{"lineNumber":129,"author":{"gitId":"froststein"},"content":"        personList.removePerson(personToBeRemoved);","lastModifiedDate":"2022-03-22"},{"lineNumber":130,"author":{"gitId":"lelerer"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":131,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":132,"author":{"gitId":"lelerer"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":133,"author":{"gitId":"lelerer"},"content":"     * Returns the number of participants in the group.","lastModifiedDate":"2022-03-17"},{"lineNumber":134,"author":{"gitId":"lelerer"},"content":"     *","lastModifiedDate":"2022-03-17"},{"lineNumber":135,"author":{"gitId":"lelerer"},"content":"     * @return An integer object that represents that total number of participants in the group.","lastModifiedDate":"2022-03-17"},{"lineNumber":136,"author":{"gitId":"lelerer"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":137,"author":{"gitId":"lelerer"},"content":"    public int getPersonCount() {","lastModifiedDate":"2022-03-17"},{"lineNumber":138,"author":{"gitId":"froststein"},"content":"        return personList.getSize();","lastModifiedDate":"2022-03-22"},{"lineNumber":139,"author":{"gitId":"lelerer"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":140,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":141,"author":{"gitId":"lelerer"},"content":"    /**","lastModifiedDate":"2022-03-21"},{"lineNumber":142,"author":{"gitId":"lelerer"},"content":"     * Returns a String object that contains groupId, groupName, and the number of persons involved in the group.","lastModifiedDate":"2022-03-21"},{"lineNumber":143,"author":{"gitId":"lelerer"},"content":"     *","lastModifiedDate":"2022-03-21"},{"lineNumber":144,"author":{"gitId":"lelerer"},"content":"     * @return A String object which summarises the group.","lastModifiedDate":"2022-03-21"},{"lineNumber":145,"author":{"gitId":"lelerer"},"content":"     */","lastModifiedDate":"2022-03-21"},{"lineNumber":146,"author":{"gitId":"lelerer"},"content":"    public String getGroupSummary() {","lastModifiedDate":"2022-03-21"},{"lineNumber":147,"author":{"gitId":"lelerer"},"content":"        return groupId + SEPARATOR + groupName + SEPARATOR + getPersonCount()","lastModifiedDate":"2022-03-21"},{"lineNumber":148,"author":{"gitId":"lelerer"},"content":"            + (getPersonCount() \u003e 1 ? \" persons\" : \" person\");","lastModifiedDate":"2022-03-21"},{"lineNumber":149,"author":{"gitId":"lelerer"},"content":"    }","lastModifiedDate":"2022-03-21"},{"lineNumber":150,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":151,"author":{"gitId":"lelerer"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":152,"author":{"gitId":"lelerer"},"content":"     * Returns a String object describing the Group object.","lastModifiedDate":"2022-03-17"},{"lineNumber":153,"author":{"gitId":"lelerer"},"content":"     *","lastModifiedDate":"2022-03-17"},{"lineNumber":154,"author":{"gitId":"lelerer"},"content":"     * @return A String object containing a description of the Group object.","lastModifiedDate":"2022-03-17"},{"lineNumber":155,"author":{"gitId":"lelerer"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":156,"author":{"gitId":"lelerer"},"content":"    @Override","lastModifiedDate":"2022-03-17"},{"lineNumber":157,"author":{"gitId":"lelerer"},"content":"    public String toString() {","lastModifiedDate":"2022-03-17"},{"lineNumber":158,"author":{"gitId":"lelerer"},"content":"        if (personList.isEmpty()) {","lastModifiedDate":"2022-03-17"},{"lineNumber":159,"author":{"gitId":"lelerer"},"content":"            return Message.ERROR_GROUP_EMPTY_PERSON_LIST;","lastModifiedDate":"2022-03-17"},{"lineNumber":160,"author":{"gitId":"lelerer"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":161,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":162,"author":{"gitId":"lelerer"},"content":"        StringBuilder outputString \u003d new StringBuilder(\"Group Id \");","lastModifiedDate":"2022-03-20"},{"lineNumber":163,"author":{"gitId":"lelerer"},"content":"        outputString.append(\"#\").append(groupId).append(\"  --\").append(\"\\n\").append(\"Participants: \");","lastModifiedDate":"2022-03-20"},{"lineNumber":164,"author":{"gitId":"froststein"},"content":"        for (int i \u003d 0; i \u003c personList.getSize(); i++) {","lastModifiedDate":"2022-03-22"},{"lineNumber":165,"author":{"gitId":"froststein"},"content":"            String personName \u003d personList.getPerson(i).getName();","lastModifiedDate":"2022-03-22"},{"lineNumber":166,"author":{"gitId":"lelerer"},"content":"            outputString.append(\"\\n \").append(i + OFFSET).append(\". \").append(personName);","lastModifiedDate":"2022-03-17"},{"lineNumber":167,"author":{"gitId":"lelerer"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":168,"author":{"gitId":"lelerer"},"content":"        return outputString.toString();","lastModifiedDate":"2022-03-17"},{"lineNumber":169,"author":{"gitId":"lelerer"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":170,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":171,"author":{"gitId":"lelerer"},"content":"}","lastModifiedDate":"2022-03-17"}],"authorContributionMap":{"lelerer":156,"froststein":15}},{"path":"src/main/java/seedu/splitlah/data/Manager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah.data;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.storage.Storage;","lastModifiedDate":"2022-03-22"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-22"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.ui.TextUI;","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":7,"author":{"gitId":"froststein"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"froststein"},"content":"import java.util.logging.Level;","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"froststein"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"froststein"},"content":"/**","lastModifiedDate":"2022-03-06"},{"lineNumber":12,"author":{"gitId":"froststein"},"content":" * Represents a manager that manages the UI, Profile and Storage objects of the application.","lastModifiedDate":"2022-03-22"},{"lineNumber":13,"author":{"gitId":"froststein"},"content":" */","lastModifiedDate":"2022-03-06"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":"public class Manager {","lastModifiedDate":"2022-03-06"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"    ","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":"    private TextUI ui;","lastModifiedDate":"2022-03-06"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":"    private Profile profile;","lastModifiedDate":"2022-03-06"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"    private Storage storage;","lastModifiedDate":"2022-03-22"},{"lineNumber":19,"author":{"gitId":"froststein"},"content":"    private boolean isUsingStorage \u003d false;","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":21,"author":{"gitId":"froststein"},"content":"    private static final String LOGGER_FILE_NAME \u003d \"SplitLah\";","lastModifiedDate":"2022-03-22"},{"lineNumber":22,"author":{"gitId":"matheril"},"content":"    public static Logger logger \u003d Logger.getLogger(LOGGER_FILE_NAME);","lastModifiedDate":"2022-03-17"},{"lineNumber":23,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-06"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"     * Initializes a Manager object.","lastModifiedDate":"2022-03-22"},{"lineNumber":26,"author":{"gitId":"froststein"},"content":"     * Should only be called in Junit test files.","lastModifiedDate":"2022-03-22"},{"lineNumber":27,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-06"},{"lineNumber":28,"author":{"gitId":"froststein"},"content":"    public Manager() {","lastModifiedDate":"2022-03-06"},{"lineNumber":29,"author":{"gitId":"froststein"},"content":"        ui \u003d new TextUI();","lastModifiedDate":"2022-03-06"},{"lineNumber":30,"author":{"gitId":"froststein"},"content":"        profile \u003d new Profile();","lastModifiedDate":"2022-03-06"},{"lineNumber":31,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":32,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":33,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":34,"author":{"gitId":"froststein"},"content":"     * Initializes a SessionDeleteCommand object with Storage enabled.","lastModifiedDate":"2022-03-22"},{"lineNumber":35,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-22"},{"lineNumber":36,"author":{"gitId":"froststein"},"content":"     * @param isUsingStorage A boolean to enable usage of Storage object.","lastModifiedDate":"2022-03-22"},{"lineNumber":37,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":38,"author":{"gitId":"froststein"},"content":"    public Manager(boolean isUsingStorage) {","lastModifiedDate":"2022-03-22"},{"lineNumber":39,"author":{"gitId":"froststein"},"content":"        ui \u003d new TextUI();","lastModifiedDate":"2022-03-22"},{"lineNumber":40,"author":{"gitId":"froststein"},"content":"        this.isUsingStorage \u003d isUsingStorage;","lastModifiedDate":"2022-03-22"},{"lineNumber":41,"author":{"gitId":"froststein"},"content":"        if (isUsingStorage) {","lastModifiedDate":"2022-03-22"},{"lineNumber":42,"author":{"gitId":"froststein"},"content":"            initializeStorage();","lastModifiedDate":"2022-03-22"},{"lineNumber":43,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-22"},{"lineNumber":44,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":45,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":46,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":47,"author":{"gitId":"froststein"},"content":"     * Initializes the Storage object to be managed by Manager object.","lastModifiedDate":"2022-03-22"},{"lineNumber":48,"author":{"gitId":"froststein"},"content":"     * Checks if save file can be found or created before retrieving data from the save file.","lastModifiedDate":"2022-03-22"},{"lineNumber":49,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":50,"author":{"gitId":"froststein"},"content":"    private void initializeStorage() {","lastModifiedDate":"2022-03-22"},{"lineNumber":51,"author":{"gitId":"froststein"},"content":"        storage \u003d new Storage();","lastModifiedDate":"2022-03-22"},{"lineNumber":52,"author":{"gitId":"froststein"},"content":"        boolean isDirectoryCreated \u003d storage.hasDataDirectory();","lastModifiedDate":"2022-03-22"},{"lineNumber":53,"author":{"gitId":"froststein"},"content":"        boolean isFileCreated \u003d storage.hasDataFile();","lastModifiedDate":"2022-03-22"},{"lineNumber":54,"author":{"gitId":"froststein"},"content":"        if (!isDirectoryCreated || !isFileCreated) {","lastModifiedDate":"2022-03-22"},{"lineNumber":55,"author":{"gitId":"froststein"},"content":"            ui.printlnMessage(Message.ERROR_STORAGE_PATH_LOCATION_CREATION_FAILED);","lastModifiedDate":"2022-03-22"},{"lineNumber":56,"author":{"gitId":"froststein"},"content":"            profile \u003d new Profile();","lastModifiedDate":"2022-03-22"},{"lineNumber":57,"author":{"gitId":"froststein"},"content":"            isUsingStorage \u003d false;","lastModifiedDate":"2022-03-22"},{"lineNumber":58,"author":{"gitId":"froststein"},"content":"        } else {","lastModifiedDate":"2022-03-22"},{"lineNumber":59,"author":{"gitId":"froststein"},"content":"            loadFileSave();","lastModifiedDate":"2022-03-22"},{"lineNumber":60,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-22"},{"lineNumber":61,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":62,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":63,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":64,"author":{"gitId":"froststein"},"content":"     * Loads the data from the save file into the Profile object.","lastModifiedDate":"2022-03-22"},{"lineNumber":65,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":66,"author":{"gitId":"froststein"},"content":"    private void loadFileSave() {","lastModifiedDate":"2022-03-22"},{"lineNumber":67,"author":{"gitId":"froststein"},"content":"        try {","lastModifiedDate":"2022-03-22"},{"lineNumber":68,"author":{"gitId":"froststein"},"content":"            storage.loadStorage();","lastModifiedDate":"2022-03-22"},{"lineNumber":69,"author":{"gitId":"froststein"},"content":"        } catch (IOException ioException) {","lastModifiedDate":"2022-03-22"},{"lineNumber":70,"author":{"gitId":"froststein"},"content":"            logger.log(Level.FINEST, Message.LOGGER_STORAGE_FILE_ERROR);","lastModifiedDate":"2022-03-22"},{"lineNumber":71,"author":{"gitId":"froststein"},"content":"            ui.printlnMessage(Message.ERROR_STORAGE_FILE_NOT_FOUND);","lastModifiedDate":"2022-03-22"},{"lineNumber":72,"author":{"gitId":"froststein"},"content":"        } catch (ClassNotFoundException classNotFoundException) {","lastModifiedDate":"2022-03-22"},{"lineNumber":73,"author":{"gitId":"froststein"},"content":"            logger.log(Level.FINEST,Message.LOGGER_STORAGE_CLASS_NOT_FOUND);","lastModifiedDate":"2022-03-22"},{"lineNumber":74,"author":{"gitId":"froststein"},"content":"            ui.printlnMessage(Message.ERROR_STORAGE_CLASS_EXCEPTION_ISSUE);","lastModifiedDate":"2022-03-22"},{"lineNumber":75,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-22"},{"lineNumber":76,"author":{"gitId":"froststein"},"content":"        profile \u003d storage.getProfile();","lastModifiedDate":"2022-03-22"},{"lineNumber":77,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":78,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":79,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":80,"author":{"gitId":"froststein"},"content":"     * Saves the Profile object into the storage file.","lastModifiedDate":"2022-03-22"},{"lineNumber":81,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":82,"author":{"gitId":"froststein"},"content":"    public void saveProfile() {","lastModifiedDate":"2022-03-22"},{"lineNumber":83,"author":{"gitId":"froststein"},"content":"        if (isUsingStorage) {","lastModifiedDate":"2022-03-22"},{"lineNumber":84,"author":{"gitId":"froststein"},"content":"            try {","lastModifiedDate":"2022-03-22"},{"lineNumber":85,"author":{"gitId":"froststein"},"content":"                storage.saveProfileToFile(profile);","lastModifiedDate":"2022-03-22"},{"lineNumber":86,"author":{"gitId":"froststein"},"content":"            } catch (IOException exception) {","lastModifiedDate":"2022-03-22"},{"lineNumber":87,"author":{"gitId":"froststein"},"content":"                ui.printlnMessage(Message.ERROR_STORAGE_DATA_NOT_SAVED);","lastModifiedDate":"2022-03-22"},{"lineNumber":88,"author":{"gitId":"froststein"},"content":"            }","lastModifiedDate":"2022-03-22"},{"lineNumber":89,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-22"},{"lineNumber":90,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":91,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":92,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-06"},{"lineNumber":93,"author":{"gitId":"froststein"},"content":"     * Returns a TextUI object for user inputs and outputs.","lastModifiedDate":"2022-03-06"},{"lineNumber":94,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-06"},{"lineNumber":95,"author":{"gitId":"froststein"},"content":"     * @return A TextUI object.","lastModifiedDate":"2022-03-06"},{"lineNumber":96,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-06"},{"lineNumber":97,"author":{"gitId":"froststein"},"content":"    public TextUI getUi() {","lastModifiedDate":"2022-03-06"},{"lineNumber":98,"author":{"gitId":"froststein"},"content":"        return ui;","lastModifiedDate":"2022-03-06"},{"lineNumber":99,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":100,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":101,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-06"},{"lineNumber":102,"author":{"gitId":"froststein"},"content":"     * Returns a Profile object that stores user created sessions and groups.","lastModifiedDate":"2022-03-23"},{"lineNumber":103,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-06"},{"lineNumber":104,"author":{"gitId":"froststein"},"content":"     * @return A Profile object.","lastModifiedDate":"2022-03-06"},{"lineNumber":105,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-06"},{"lineNumber":106,"author":{"gitId":"froststein"},"content":"    public Profile getProfile() {","lastModifiedDate":"2022-03-06"},{"lineNumber":107,"author":{"gitId":"froststein"},"content":"        return profile;","lastModifiedDate":"2022-03-06"},{"lineNumber":108,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":109,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":110,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":111,"author":{"gitId":"froststein"},"content":"     * Returns a Logger object to records logs.","lastModifiedDate":"2022-03-16"},{"lineNumber":112,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-16"},{"lineNumber":113,"author":{"gitId":"froststein"},"content":"     * @return A Logger object.","lastModifiedDate":"2022-03-16"},{"lineNumber":114,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":115,"author":{"gitId":"matheril"},"content":"    public static Logger getLogger() {","lastModifiedDate":"2022-03-17"},{"lineNumber":116,"author":{"gitId":"froststein"},"content":"        return logger;","lastModifiedDate":"2022-03-16"},{"lineNumber":117,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":118,"author":{"gitId":"froststein"},"content":"}","lastModifiedDate":"2022-03-06"}],"authorContributionMap":{"warrencxw":1,"froststein":114,"matheril":3}},{"path":"src/main/java/seedu/splitlah/data/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"matheril"},"content":"package seedu.splitlah.data;","lastModifiedDate":"2022-03-15"},{"lineNumber":2,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":3,"author":{"gitId":"matheril"},"content":"import seedu.splitlah.exceptions.InvalidDataException;","lastModifiedDate":"2022-03-15"},{"lineNumber":4,"author":{"gitId":"matheril"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-15"},{"lineNumber":5,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":"import java.io.Serializable;","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"matheril"},"content":"/**","lastModifiedDate":"2022-03-15"},{"lineNumber":9,"author":{"gitId":"matheril"},"content":" * Represents a name. Names must contain only alphabetical characters.","lastModifiedDate":"2022-03-15"},{"lineNumber":10,"author":{"gitId":"matheril"},"content":" * Removes leading and trailing whitespace from supplied names.","lastModifiedDate":"2022-03-22"},{"lineNumber":11,"author":{"gitId":"matheril"},"content":" *","lastModifiedDate":"2022-03-15"},{"lineNumber":12,"author":{"gitId":"matheril"},"content":" * @author Saurav","lastModifiedDate":"2022-03-15"},{"lineNumber":13,"author":{"gitId":"matheril"},"content":" */","lastModifiedDate":"2022-03-15"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":"public class Name implements Serializable {","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":16,"author":{"gitId":"matheril"},"content":"    private final String name;","lastModifiedDate":"2022-03-15"},{"lineNumber":17,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":18,"author":{"gitId":"matheril"},"content":"    public Name(String name) {","lastModifiedDate":"2022-03-23"},{"lineNumber":19,"author":{"gitId":"matheril"},"content":"        this.name \u003d name.strip();","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":21,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":22,"author":{"gitId":"matheril"},"content":"    public String getNameAsString() {","lastModifiedDate":"2022-03-22"},{"lineNumber":23,"author":{"gitId":"matheril"},"content":"        return name;","lastModifiedDate":"2022-03-15"},{"lineNumber":24,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":25,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":26,"author":{"gitId":"matheril"},"content":"    public static boolean validateName(String name) {","lastModifiedDate":"2022-03-23"},{"lineNumber":27,"author":{"gitId":"matheril"},"content":"        return name.strip().matches(\"[a-zA-Z]+\");","lastModifiedDate":"2022-03-23"},{"lineNumber":28,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":29,"author":{"gitId":"matheril"},"content":"}","lastModifiedDate":"2022-03-15"}],"authorContributionMap":{"froststein":3,"matheril":26}},{"path":"src/main/java/seedu/splitlah/data/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah.data;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.exceptions.InvalidDataException;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"matheril"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-07"},{"lineNumber":5,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":"import java.io.Serializable;","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"matheril"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-04"},{"lineNumber":8,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":9,"author":{"gitId":"matheril"},"content":"/**","lastModifiedDate":"2022-03-04"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":" * Represents a person participating in an activity during a group outing session.","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":" * ","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"matheril"},"content":" * @author Saurav","lastModifiedDate":"2022-03-04"},{"lineNumber":13,"author":{"gitId":"matheril"},"content":" */","lastModifiedDate":"2022-03-04"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":"public class Person implements Serializable {","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"    ","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"matheril"},"content":"    private Name name;","lastModifiedDate":"2022-03-22"},{"lineNumber":17,"author":{"gitId":"matheril"},"content":"    private ArrayList\u003cActivityCost\u003e activityCostList;","lastModifiedDate":"2022-03-04"},{"lineNumber":18,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":19,"author":{"gitId":"matheril"},"content":"    /**","lastModifiedDate":"2022-03-04"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"     * Initializes a Person object.","lastModifiedDate":"2022-03-22"},{"lineNumber":21,"author":{"gitId":"matheril"},"content":"     *","lastModifiedDate":"2022-03-04"},{"lineNumber":22,"author":{"gitId":"froststein"},"content":"     * @param name A Name object representing the name of the Person object to be created.","lastModifiedDate":"2022-03-23"},{"lineNumber":23,"author":{"gitId":"matheril"},"content":"     */","lastModifiedDate":"2022-03-04"},{"lineNumber":24,"author":{"gitId":"matheril"},"content":"    public Person(Name name) {","lastModifiedDate":"2022-03-22"},{"lineNumber":25,"author":{"gitId":"matheril"},"content":"        this.activityCostList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"matheril"},"content":"        this.name \u003d name;","lastModifiedDate":"2022-03-04"},{"lineNumber":27,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-04"},{"lineNumber":28,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":29,"author":{"gitId":"matheril"},"content":"    /**","lastModifiedDate":"2022-03-04"},{"lineNumber":30,"author":{"gitId":"matheril"},"content":"     * Constructs a Person object from a String object.","lastModifiedDate":"2022-03-23"},{"lineNumber":31,"author":{"gitId":"matheril"},"content":"     *","lastModifiedDate":"2022-03-22"},{"lineNumber":32,"author":{"gitId":"matheril"},"content":"     * @param name String object representing the name of the Person object to be created.","lastModifiedDate":"2022-03-22"},{"lineNumber":33,"author":{"gitId":"matheril"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":34,"author":{"gitId":"matheril"},"content":"    public Person(String name) {","lastModifiedDate":"2022-03-22"},{"lineNumber":35,"author":{"gitId":"matheril"},"content":"        this.activityCostList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-22"},{"lineNumber":36,"author":{"gitId":"matheril"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2022-03-22"},{"lineNumber":37,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":38,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":39,"author":{"gitId":"matheril"},"content":"    /**","lastModifiedDate":"2022-03-23"},{"lineNumber":40,"author":{"gitId":"matheril"},"content":"     * Constructs a Person object from a String object. If the String object provided is not a valid name,","lastModifiedDate":"2022-03-23"},{"lineNumber":41,"author":{"gitId":"matheril"},"content":"     * returns null instead.","lastModifiedDate":"2022-03-23"},{"lineNumber":42,"author":{"gitId":"matheril"},"content":"     *","lastModifiedDate":"2022-03-23"},{"lineNumber":43,"author":{"gitId":"matheril"},"content":"     * @param name A String object representing a name.","lastModifiedDate":"2022-03-23"},{"lineNumber":44,"author":{"gitId":"matheril"},"content":"     * @return a Person object if the name provided is valid.","lastModifiedDate":"2022-03-23"},{"lineNumber":45,"author":{"gitId":"matheril"},"content":"     *         null if the name provided is invalid.","lastModifiedDate":"2022-03-23"},{"lineNumber":46,"author":{"gitId":"matheril"},"content":"     */","lastModifiedDate":"2022-03-23"},{"lineNumber":47,"author":{"gitId":"matheril"},"content":"    public static Person createPersonFromString(String name) {","lastModifiedDate":"2022-03-23"},{"lineNumber":48,"author":{"gitId":"matheril"},"content":"        if (Name.validateName(name)) {","lastModifiedDate":"2022-03-23"},{"lineNumber":49,"author":{"gitId":"matheril"},"content":"            return new Person(name);","lastModifiedDate":"2022-03-23"},{"lineNumber":50,"author":{"gitId":"matheril"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":51,"author":{"gitId":"matheril"},"content":"        return null;","lastModifiedDate":"2022-03-23"},{"lineNumber":52,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":53,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":54,"author":{"gitId":"matheril"},"content":"    /**","lastModifiedDate":"2022-03-04"},{"lineNumber":55,"author":{"gitId":"matheril"},"content":"     * Constructs an ActivityCost object and adds it to the list of ActivityCost objects.","lastModifiedDate":"2022-03-22"},{"lineNumber":56,"author":{"gitId":"matheril"},"content":"     *","lastModifiedDate":"2022-03-04"},{"lineNumber":57,"author":{"gitId":"matheril"},"content":"     * @param activityId An integer that uniquely identifies an activity.","lastModifiedDate":"2022-03-12"},{"lineNumber":58,"author":{"gitId":"matheril"},"content":"     * @param costPaid   A double that represents the cost paid by a Person.","lastModifiedDate":"2022-03-12"},{"lineNumber":59,"author":{"gitId":"matheril"},"content":"     * @param costOwed   A double that represents the cost owed by a Person.","lastModifiedDate":"2022-03-12"},{"lineNumber":60,"author":{"gitId":"matheril"},"content":"     * @throws InvalidDataException If the activityCost cannot be created from the given parameters.","lastModifiedDate":"2022-03-12"},{"lineNumber":61,"author":{"gitId":"matheril"},"content":"     */","lastModifiedDate":"2022-03-04"},{"lineNumber":62,"author":{"gitId":"matheril"},"content":"    public void addActivityCost(int activityId, double costPaid, double costOwed) throws InvalidDataException {","lastModifiedDate":"2022-03-06"},{"lineNumber":63,"author":{"gitId":"matheril"},"content":"        ActivityCost activityCost \u003d new ActivityCost(activityId, costPaid, costOwed);","lastModifiedDate":"2022-03-06"},{"lineNumber":64,"author":{"gitId":"matheril"},"content":"        activityCostList.add(activityCost);","lastModifiedDate":"2022-03-04"},{"lineNumber":65,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":66,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":67,"author":{"gitId":"matheril"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":68,"author":{"gitId":"matheril"},"content":"     * Removes an ActivityCost object from the list of ActivityCosts.","lastModifiedDate":"2022-03-08"},{"lineNumber":69,"author":{"gitId":"matheril"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":70,"author":{"gitId":"matheril"},"content":"     * @param activityId The activityId of the ActivityCost to be removed.","lastModifiedDate":"2022-03-12"},{"lineNumber":71,"author":{"gitId":"matheril"},"content":"     * @throws InvalidDataException if the activityId is not found.","lastModifiedDate":"2022-03-08"},{"lineNumber":72,"author":{"gitId":"matheril"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":73,"author":{"gitId":"matheril"},"content":"    public void removeActivityCost(int activityId) throws InvalidDataException {","lastModifiedDate":"2022-03-08"},{"lineNumber":74,"author":{"gitId":"matheril"},"content":"        if (activityCostList.isEmpty()) {","lastModifiedDate":"2022-03-08"},{"lineNumber":75,"author":{"gitId":"matheril"},"content":"            throw new InvalidDataException(Message.ERROR_PERSON_NO_ACTIVITIES);","lastModifiedDate":"2022-03-08"},{"lineNumber":76,"author":{"gitId":"matheril"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":77,"author":{"gitId":"matheril"},"content":"        boolean removed \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":78,"author":{"gitId":"matheril"},"content":"                activityCostList.removeIf(activityCost -\u003e activityCost.getActivityId() \u003d\u003d activityId);","lastModifiedDate":"2022-03-08"},{"lineNumber":79,"author":{"gitId":"matheril"},"content":"        if (!removed) {","lastModifiedDate":"2022-03-08"},{"lineNumber":80,"author":{"gitId":"froststein"},"content":"            throw new InvalidDataException(Message.ERROR_PERSON_ACTIVITY_NOT_FOUND + activityId);","lastModifiedDate":"2022-03-15"},{"lineNumber":81,"author":{"gitId":"matheril"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":82,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":83,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":84,"author":{"gitId":"matheril"},"content":"    public double getTotalCostPaid() {","lastModifiedDate":"2022-03-06"},{"lineNumber":85,"author":{"gitId":"matheril"},"content":"        double totalCostPaid \u003d 0;","lastModifiedDate":"2022-03-06"},{"lineNumber":86,"author":{"gitId":"matheril"},"content":"        for (ActivityCost i : activityCostList) {","lastModifiedDate":"2022-03-06"},{"lineNumber":87,"author":{"gitId":"matheril"},"content":"            totalCostPaid +\u003d i.getCostPaid();","lastModifiedDate":"2022-03-06"},{"lineNumber":88,"author":{"gitId":"matheril"},"content":"        }","lastModifiedDate":"2022-03-06"},{"lineNumber":89,"author":{"gitId":"matheril"},"content":"        return totalCostPaid;","lastModifiedDate":"2022-03-06"},{"lineNumber":90,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":91,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":92,"author":{"gitId":"matheril"},"content":"    public double getTotalCostOwed() {","lastModifiedDate":"2022-03-06"},{"lineNumber":93,"author":{"gitId":"matheril"},"content":"        double totalCostOwed \u003d 0;","lastModifiedDate":"2022-03-06"},{"lineNumber":94,"author":{"gitId":"matheril"},"content":"        for (ActivityCost i : activityCostList) {","lastModifiedDate":"2022-03-06"},{"lineNumber":95,"author":{"gitId":"matheril"},"content":"            totalCostOwed +\u003d i.getCostOwed();","lastModifiedDate":"2022-03-06"},{"lineNumber":96,"author":{"gitId":"matheril"},"content":"        }","lastModifiedDate":"2022-03-06"},{"lineNumber":97,"author":{"gitId":"matheril"},"content":"        return totalCostOwed;","lastModifiedDate":"2022-03-06"},{"lineNumber":98,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-04"},{"lineNumber":99,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":100,"author":{"gitId":"matheril"},"content":"    /**","lastModifiedDate":"2022-03-06"},{"lineNumber":101,"author":{"gitId":"matheril"},"content":"     * Calculates the amount of money other Persons owe to this Person.","lastModifiedDate":"2022-03-06"},{"lineNumber":102,"author":{"gitId":"matheril"},"content":"     * In other words, how much money this Person must receive in order to break even.","lastModifiedDate":"2022-03-06"},{"lineNumber":103,"author":{"gitId":"matheril"},"content":"     *","lastModifiedDate":"2022-03-06"},{"lineNumber":104,"author":{"gitId":"matheril"},"content":"     * @return Sum of all costPaids - sum of all costOweds in the list of ActivityCosts for this Person.","lastModifiedDate":"2022-03-06"},{"lineNumber":105,"author":{"gitId":"matheril"},"content":"     */","lastModifiedDate":"2022-03-06"},{"lineNumber":106,"author":{"gitId":"matheril"},"content":"    public double getTotalCost() {","lastModifiedDate":"2022-03-04"},{"lineNumber":107,"author":{"gitId":"matheril"},"content":"        double totalCostPaid \u003d 0;","lastModifiedDate":"2022-03-06"},{"lineNumber":108,"author":{"gitId":"matheril"},"content":"        double totalCostOwed \u003d 0;","lastModifiedDate":"2022-03-06"},{"lineNumber":109,"author":{"gitId":"matheril"},"content":"        for (ActivityCost i : activityCostList) {","lastModifiedDate":"2022-03-06"},{"lineNumber":110,"author":{"gitId":"matheril"},"content":"            totalCostPaid +\u003d i.getCostPaid();","lastModifiedDate":"2022-03-06"},{"lineNumber":111,"author":{"gitId":"matheril"},"content":"            totalCostOwed +\u003d i.getCostOwed();","lastModifiedDate":"2022-03-06"},{"lineNumber":112,"author":{"gitId":"matheril"},"content":"        }","lastModifiedDate":"2022-03-06"},{"lineNumber":113,"author":{"gitId":"matheril"},"content":"        return totalCostPaid - totalCostOwed;","lastModifiedDate":"2022-03-06"},{"lineNumber":114,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-04"},{"lineNumber":115,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":116,"author":{"gitId":"matheril"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":117,"author":{"gitId":"matheril"},"content":"     * Returns the cost owed by this Person object for an Activity.","lastModifiedDate":"2022-03-07"},{"lineNumber":118,"author":{"gitId":"matheril"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":119,"author":{"gitId":"matheril"},"content":"     * @param activityId An integer that uniquely identifies an activity.","lastModifiedDate":"2022-03-12"},{"lineNumber":120,"author":{"gitId":"matheril"},"content":"     * @return A double representing cost owed by the Person for this Activity.","lastModifiedDate":"2022-03-12"},{"lineNumber":121,"author":{"gitId":"matheril"},"content":"     * @throws InvalidDataException If this Person is not participating in any Activities.","lastModifiedDate":"2022-03-12"},{"lineNumber":122,"author":{"gitId":"matheril"},"content":"     *                              If the activityId is not found.","lastModifiedDate":"2022-03-12"},{"lineNumber":123,"author":{"gitId":"matheril"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":124,"author":{"gitId":"matheril"},"content":"    public double getActivityCostOwed(int activityId) throws InvalidDataException {","lastModifiedDate":"2022-03-07"},{"lineNumber":125,"author":{"gitId":"matheril"},"content":"        if (activityCostList.isEmpty()) {","lastModifiedDate":"2022-03-07"},{"lineNumber":126,"author":{"gitId":"matheril"},"content":"            throw new InvalidDataException(Message.ERROR_PERSON_NO_ACTIVITIES);","lastModifiedDate":"2022-03-07"},{"lineNumber":127,"author":{"gitId":"matheril"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":128,"author":{"gitId":"matheril"},"content":"        for (ActivityCost activityCost : activityCostList) {","lastModifiedDate":"2022-03-07"},{"lineNumber":129,"author":{"gitId":"matheril"},"content":"            if (activityCost.getActivityId() \u003d\u003d activityId) {","lastModifiedDate":"2022-03-07"},{"lineNumber":130,"author":{"gitId":"matheril"},"content":"                return activityCost.getCostOwed();","lastModifiedDate":"2022-03-07"},{"lineNumber":131,"author":{"gitId":"matheril"},"content":"            }","lastModifiedDate":"2022-03-07"},{"lineNumber":132,"author":{"gitId":"matheril"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":133,"author":{"gitId":"froststein"},"content":"        throw new InvalidDataException(Message.ERROR_PERSON_ACTIVITY_NOT_FOUND + activityId);","lastModifiedDate":"2022-03-15"},{"lineNumber":134,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":135,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":136,"author":{"gitId":"matheril"},"content":"    public String getName() {","lastModifiedDate":"2022-03-04"},{"lineNumber":137,"author":{"gitId":"matheril"},"content":"        return name.getNameAsString();","lastModifiedDate":"2022-03-22"},{"lineNumber":138,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-04"},{"lineNumber":139,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":140,"author":{"gitId":"matheril"},"content":"    public Name getNameAsNameObject() {","lastModifiedDate":"2022-03-22"},{"lineNumber":141,"author":{"gitId":"matheril"},"content":"        return name;","lastModifiedDate":"2022-03-04"},{"lineNumber":142,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-04"},{"lineNumber":143,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":144,"author":{"gitId":"matheril"},"content":"    public ArrayList\u003cActivityCost\u003e getActivityCostList() {","lastModifiedDate":"2022-03-04"},{"lineNumber":145,"author":{"gitId":"matheril"},"content":"        return activityCostList;","lastModifiedDate":"2022-03-04"},{"lineNumber":146,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-04"},{"lineNumber":147,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":148,"author":{"gitId":"froststein"},"content":"    @Override","lastModifiedDate":"2022-03-20"},{"lineNumber":149,"author":{"gitId":"froststein"},"content":"    public boolean equals(Object object) {","lastModifiedDate":"2022-03-20"},{"lineNumber":150,"author":{"gitId":"matheril"},"content":"        if (object \u003d\u003d null) {","lastModifiedDate":"2022-03-22"},{"lineNumber":151,"author":{"gitId":"froststein"},"content":"            return false;","lastModifiedDate":"2022-03-20"},{"lineNumber":152,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-20"},{"lineNumber":153,"author":{"gitId":"matheril"},"content":"        if (!(object.getClass() \u003d\u003d this.getClass())) {","lastModifiedDate":"2022-03-22"},{"lineNumber":154,"author":{"gitId":"matheril"},"content":"            return false;","lastModifiedDate":"2022-03-22"},{"lineNumber":155,"author":{"gitId":"matheril"},"content":"        }","lastModifiedDate":"2022-03-22"},{"lineNumber":156,"author":{"gitId":"froststein"},"content":"        Person person \u003d (Person) object;","lastModifiedDate":"2022-03-20"},{"lineNumber":157,"author":{"gitId":"matheril"},"content":"        return this.name.getNameAsString().equalsIgnoreCase(person.getName());","lastModifiedDate":"2022-03-22"},{"lineNumber":158,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":159,"author":{"gitId":"matheril"},"content":"}","lastModifiedDate":"2022-03-04"}],"authorContributionMap":{"warrencxw":3,"froststein":15,"matheril":141}},{"path":"src/main/java/seedu/splitlah/data/PersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah.data;","lastModifiedDate":"2022-03-20"},{"lineNumber":2,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-21"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"import java.io.Serializable;","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-20"},{"lineNumber":7,"author":{"gitId":"froststein"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-03-21"},{"lineNumber":8,"author":{"gitId":"froststein"},"content":"import java.util.Set;","lastModifiedDate":"2022-03-21"},{"lineNumber":9,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":10,"author":{"gitId":"froststein"},"content":"/**","lastModifiedDate":"2022-03-20"},{"lineNumber":11,"author":{"gitId":"froststein"},"content":" * Represents a list of Person objects.","lastModifiedDate":"2022-03-20"},{"lineNumber":12,"author":{"gitId":"froststein"},"content":" *","lastModifiedDate":"2022-03-20"},{"lineNumber":13,"author":{"gitId":"froststein"},"content":" * @author Roy","lastModifiedDate":"2022-03-20"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":" */","lastModifiedDate":"2022-03-20"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":"public class PersonList implements Serializable {","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":"    private ArrayList\u003cPerson\u003e personList;","lastModifiedDate":"2022-03-20"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":19,"author":{"gitId":"froststein"},"content":"     * Initializes a PersonList object.","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":21,"author":{"gitId":"froststein"},"content":"    public PersonList() {","lastModifiedDate":"2022-03-20"},{"lineNumber":22,"author":{"gitId":"froststein"},"content":"        this.personList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-20"},{"lineNumber":23,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":26,"author":{"gitId":"froststein"},"content":"     * Returns the size of the ArrayList object of Person objects.","lastModifiedDate":"2022-03-20"},{"lineNumber":27,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-20"},{"lineNumber":28,"author":{"gitId":"froststein"},"content":"     * @return An integer that presents the size of the ArrayList object of Person objects.","lastModifiedDate":"2022-03-20"},{"lineNumber":29,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":30,"author":{"gitId":"froststein"},"content":"    public int getSize() {","lastModifiedDate":"2022-03-20"},{"lineNumber":31,"author":{"gitId":"froststein"},"content":"        return personList.size();","lastModifiedDate":"2022-03-20"},{"lineNumber":32,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":33,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":34,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":35,"author":{"gitId":"froststein"},"content":"     * Checks if ArrayList object of Person objects is empty.","lastModifiedDate":"2022-03-20"},{"lineNumber":36,"author":{"gitId":"froststein"},"content":"     * @return true if ArrayList object of Person objects is empty,","lastModifiedDate":"2022-03-20"},{"lineNumber":37,"author":{"gitId":"froststein"},"content":"     *         otherwise false.","lastModifiedDate":"2022-03-20"},{"lineNumber":38,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":39,"author":{"gitId":"froststein"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2022-03-20"},{"lineNumber":40,"author":{"gitId":"froststein"},"content":"        return personList.isEmpty();","lastModifiedDate":"2022-03-20"},{"lineNumber":41,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":42,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":43,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":44,"author":{"gitId":"froststein"},"content":"     * Returns the Person object in the ArrayList object of Person objects with the specified index.","lastModifiedDate":"2022-03-20"},{"lineNumber":45,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-20"},{"lineNumber":46,"author":{"gitId":"froststein"},"content":"     * @param index An integer representing the index.","lastModifiedDate":"2022-03-20"},{"lineNumber":47,"author":{"gitId":"froststein"},"content":"     * @return A Person object specified by its index in the ArrayList object.","lastModifiedDate":"2022-03-20"},{"lineNumber":48,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":49,"author":{"gitId":"froststein"},"content":"    public Person getPerson(int index) {","lastModifiedDate":"2022-03-20"},{"lineNumber":50,"author":{"gitId":"froststein"},"content":"        return personList.get(index);","lastModifiedDate":"2022-03-20"},{"lineNumber":51,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":52,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":53,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":54,"author":{"gitId":"froststein"},"content":"     * Adds a Person object into the ArrayList object of Person objects if it does not exist,","lastModifiedDate":"2022-03-22"},{"lineNumber":55,"author":{"gitId":"froststein"},"content":"     * otherwise Person object is not added.","lastModifiedDate":"2022-03-20"},{"lineNumber":56,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-20"},{"lineNumber":57,"author":{"gitId":"froststein"},"content":"     * @param person A Person object to be added.","lastModifiedDate":"2022-03-22"},{"lineNumber":58,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":59,"author":{"gitId":"froststein"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2022-03-20"},{"lineNumber":60,"author":{"gitId":"froststein"},"content":"        if (!personList.contains(person)) {","lastModifiedDate":"2022-03-20"},{"lineNumber":61,"author":{"gitId":"froststein"},"content":"            personList.add(person);","lastModifiedDate":"2022-03-20"},{"lineNumber":62,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-20"},{"lineNumber":63,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":64,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":65,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":66,"author":{"gitId":"froststein"},"content":"     * Removes a Person object from the ArrayList object of Person objects if it exist,","lastModifiedDate":"2022-03-22"},{"lineNumber":67,"author":{"gitId":"froststein"},"content":"     * otherwise Person object is not removed.","lastModifiedDate":"2022-03-22"},{"lineNumber":68,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-22"},{"lineNumber":69,"author":{"gitId":"froststein"},"content":"     * @param person A Person object to be removed.","lastModifiedDate":"2022-03-22"},{"lineNumber":70,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":71,"author":{"gitId":"froststein"},"content":"    public void removePerson(Person person) {","lastModifiedDate":"2022-03-22"},{"lineNumber":72,"author":{"gitId":"froststein"},"content":"        if (personList.contains(person)) {","lastModifiedDate":"2022-03-22"},{"lineNumber":73,"author":{"gitId":"froststein"},"content":"            personList.remove(person);","lastModifiedDate":"2022-03-22"},{"lineNumber":74,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-22"},{"lineNumber":75,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":76,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":77,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":78,"author":{"gitId":"froststein"},"content":"     * Returns the ArrayList object of Person objects.","lastModifiedDate":"2022-03-20"},{"lineNumber":79,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-20"},{"lineNumber":80,"author":{"gitId":"froststein"},"content":"     * @return An ArrayList object of Person objects.","lastModifiedDate":"2022-03-20"},{"lineNumber":81,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":82,"author":{"gitId":"froststein"},"content":"    public ArrayList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2022-03-20"},{"lineNumber":83,"author":{"gitId":"froststein"},"content":"        return personList;","lastModifiedDate":"2022-03-20"},{"lineNumber":84,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":85,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":86,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":87,"author":{"gitId":"froststein"},"content":"     * Converts a String array object of names to a list of Person objects.","lastModifiedDate":"2022-03-20"},{"lineNumber":88,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-20"},{"lineNumber":89,"author":{"gitId":"froststein"},"content":"     * @param personNames An array of String objects of names.","lastModifiedDate":"2022-03-23"},{"lineNumber":90,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":91,"author":{"gitId":"froststein"},"content":"    public void convertToPersonList(String[] personNames) {","lastModifiedDate":"2022-03-20"},{"lineNumber":92,"author":{"gitId":"froststein"},"content":"        for (String name : personNames) {","lastModifiedDate":"2022-03-20"},{"lineNumber":93,"author":{"gitId":"froststein"},"content":"            Person newPerson \u003d new Person(name);","lastModifiedDate":"2022-03-20"},{"lineNumber":94,"author":{"gitId":"froststein"},"content":"            addPerson(newPerson);","lastModifiedDate":"2022-03-20"},{"lineNumber":95,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-20"},{"lineNumber":96,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":97,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":98,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":99,"author":{"gitId":"froststein"},"content":"     * Merges an ArrayList object of Person objects with existing ArrayList object of Person objects.","lastModifiedDate":"2022-03-20"},{"lineNumber":100,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-20"},{"lineNumber":101,"author":{"gitId":"froststein"},"content":"     * @param groupPersonList An ArrayList object of Person objects.","lastModifiedDate":"2022-03-20"},{"lineNumber":102,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":103,"author":{"gitId":"froststein"},"content":"    public void mergeListOfPersons(ArrayList\u003cPerson\u003e groupPersonList) {","lastModifiedDate":"2022-03-20"},{"lineNumber":104,"author":{"gitId":"froststein"},"content":"        for (Person person : groupPersonList) {","lastModifiedDate":"2022-03-20"},{"lineNumber":105,"author":{"gitId":"froststein"},"content":"            addPerson(person);","lastModifiedDate":"2022-03-20"},{"lineNumber":106,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-20"},{"lineNumber":107,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":108,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":109,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-21"},{"lineNumber":110,"author":{"gitId":"froststein"},"content":"     * Checks if String array object of names has duplicated names.","lastModifiedDate":"2022-03-21"},{"lineNumber":111,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-21"},{"lineNumber":112,"author":{"gitId":"froststein"},"content":"     * @param personNames An array of String objects of names.","lastModifiedDate":"2022-03-23"},{"lineNumber":113,"author":{"gitId":"froststein"},"content":"     * @return true if it contains duplicates,","lastModifiedDate":"2022-03-21"},{"lineNumber":114,"author":{"gitId":"froststein"},"content":"     *         false otherwise.","lastModifiedDate":"2022-03-21"},{"lineNumber":115,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-21"},{"lineNumber":116,"author":{"gitId":"froststein"},"content":"    public static boolean hasNameDuplicates(String[] personNames) {","lastModifiedDate":"2022-03-21"},{"lineNumber":117,"author":{"gitId":"froststein"},"content":"        Set\u003cString\u003e nameSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2022-03-21"},{"lineNumber":118,"author":{"gitId":"froststein"},"content":"        for (String name : personNames) {","lastModifiedDate":"2022-03-21"},{"lineNumber":119,"author":{"gitId":"froststein"},"content":"            String nameToBeAdded \u003d name.toLowerCase();","lastModifiedDate":"2022-03-21"},{"lineNumber":120,"author":{"gitId":"froststein"},"content":"            if (!nameSet.add(nameToBeAdded)) {","lastModifiedDate":"2022-03-21"},{"lineNumber":121,"author":{"gitId":"froststein"},"content":"                return true;","lastModifiedDate":"2022-03-21"},{"lineNumber":122,"author":{"gitId":"froststein"},"content":"            }","lastModifiedDate":"2022-03-21"},{"lineNumber":123,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-21"},{"lineNumber":124,"author":{"gitId":"froststein"},"content":"        assert nameSet.size() \u003d\u003d personNames.length :","lastModifiedDate":"2022-03-21"},{"lineNumber":125,"author":{"gitId":"froststein"},"content":"                Message.ASSERT_PERSONLIST_NAME_DUPLICATE_EXISTS_BUT_NOT_DETECTED;","lastModifiedDate":"2022-03-21"},{"lineNumber":126,"author":{"gitId":"froststein"},"content":"        return false;","lastModifiedDate":"2022-03-21"},{"lineNumber":127,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-21"},{"lineNumber":128,"author":{"gitId":"froststein"},"content":"}","lastModifiedDate":"2022-03-20"}],"authorContributionMap":{"froststein":128}},{"path":"src/main/java/seedu/splitlah/data/Profile.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah.data;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.exceptions.InvalidDataException;","lastModifiedDate":"2022-03-08"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-08"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":"import java.io.Serializable;","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"froststein"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-03"},{"lineNumber":8,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":9,"author":{"gitId":"froststein"},"content":"/**","lastModifiedDate":"2022-03-03"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":" * Represents a profile that manages a list of sessions and keeps track of unique session and activity","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":" * identifiers for the SplitLah application.","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":" * ","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":" * @author Roy","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":" */","lastModifiedDate":"2022-03-03"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":"public class Profile implements Serializable {","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"    ","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":"    private ArrayList\u003cSession\u003e sessionList;","lastModifiedDate":"2022-03-03"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"    private ArrayList\u003cGroup\u003e groupList;","lastModifiedDate":"2022-03-17"},{"lineNumber":19,"author":{"gitId":"froststein"},"content":"    private int sessionIdTracker;","lastModifiedDate":"2022-03-03"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"    private int activityIdTracker;","lastModifiedDate":"2022-03-03"},{"lineNumber":21,"author":{"gitId":"froststein"},"content":"    private int groupIdTracker;","lastModifiedDate":"2022-03-17"},{"lineNumber":22,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":23,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-03"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"     * Initializes a Profile object.","lastModifiedDate":"2022-03-22"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-03"},{"lineNumber":26,"author":{"gitId":"froststein"},"content":"    public Profile() {","lastModifiedDate":"2022-03-03"},{"lineNumber":27,"author":{"gitId":"froststein"},"content":"        this.sessionList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-03"},{"lineNumber":28,"author":{"gitId":"lelerer"},"content":"        this.groupList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-18"},{"lineNumber":29,"author":{"gitId":"froststein"},"content":"        this.sessionIdTracker \u003d 1;","lastModifiedDate":"2022-03-09"},{"lineNumber":30,"author":{"gitId":"froststein"},"content":"        this.activityIdTracker \u003d 1;","lastModifiedDate":"2022-03-09"},{"lineNumber":31,"author":{"gitId":"lelerer"},"content":"        this.groupIdTracker \u003d 1;","lastModifiedDate":"2022-03-19"},{"lineNumber":32,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-03"},{"lineNumber":33,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":34,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":35,"author":{"gitId":"froststein"},"content":"     * Checks if there is a Session object that exists with the same name.","lastModifiedDate":"2022-03-17"},{"lineNumber":36,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":37,"author":{"gitId":"froststein"},"content":"     * @param sessionName A String object that represents the session name.","lastModifiedDate":"2022-03-09"},{"lineNumber":38,"author":{"gitId":"froststein"},"content":"     * @return true if a session exists with the same name,","lastModifiedDate":"2022-03-18"},{"lineNumber":39,"author":{"gitId":"froststein"},"content":"     *         false otherwise.","lastModifiedDate":"2022-03-18"},{"lineNumber":40,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":41,"author":{"gitId":"froststein"},"content":"    public boolean hasSessionName(String sessionName) {","lastModifiedDate":"2022-03-08"},{"lineNumber":42,"author":{"gitId":"froststein"},"content":"        if (sessionList.isEmpty()) {","lastModifiedDate":"2022-03-11"},{"lineNumber":43,"author":{"gitId":"froststein"},"content":"            return false;","lastModifiedDate":"2022-03-11"},{"lineNumber":44,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-11"},{"lineNumber":45,"author":{"gitId":"froststein"},"content":"        for (Session session : sessionList) {","lastModifiedDate":"2022-03-08"},{"lineNumber":46,"author":{"gitId":"froststein"},"content":"            if (session.getSessionName().equalsIgnoreCase(sessionName)) {","lastModifiedDate":"2022-03-08"},{"lineNumber":47,"author":{"gitId":"froststein"},"content":"                return true;","lastModifiedDate":"2022-03-08"},{"lineNumber":48,"author":{"gitId":"froststein"},"content":"            }","lastModifiedDate":"2022-03-08"},{"lineNumber":49,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":50,"author":{"gitId":"froststein"},"content":"        return false;","lastModifiedDate":"2022-03-08"},{"lineNumber":51,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":52,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":53,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-11"},{"lineNumber":54,"author":{"gitId":"froststein"},"content":"     * Checks if there is a Session object that exists with the specified session unique identifier.","lastModifiedDate":"2022-03-17"},{"lineNumber":55,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-11"},{"lineNumber":56,"author":{"gitId":"froststein"},"content":"     * @param sessionId An integer that uniquely identifies a Session object.","lastModifiedDate":"2022-03-17"},{"lineNumber":57,"author":{"gitId":"froststein"},"content":"     * @return true if a session exists with the specified session unique identifier,","lastModifiedDate":"2022-03-18"},{"lineNumber":58,"author":{"gitId":"froststein"},"content":"     *         false otherwise.","lastModifiedDate":"2022-03-18"},{"lineNumber":59,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-11"},{"lineNumber":60,"author":{"gitId":"froststein"},"content":"    public boolean hasSessionId(int sessionId) {","lastModifiedDate":"2022-03-11"},{"lineNumber":61,"author":{"gitId":"froststein"},"content":"        if (sessionList.isEmpty()) {","lastModifiedDate":"2022-03-11"},{"lineNumber":62,"author":{"gitId":"froststein"},"content":"            return false;","lastModifiedDate":"2022-03-11"},{"lineNumber":63,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-11"},{"lineNumber":64,"author":{"gitId":"froststein"},"content":"        for (Session session : sessionList) {","lastModifiedDate":"2022-03-11"},{"lineNumber":65,"author":{"gitId":"froststein"},"content":"            if (session.getSessionId() \u003d\u003d sessionId) {","lastModifiedDate":"2022-03-11"},{"lineNumber":66,"author":{"gitId":"froststein"},"content":"                return true;","lastModifiedDate":"2022-03-11"},{"lineNumber":67,"author":{"gitId":"froststein"},"content":"            }","lastModifiedDate":"2022-03-11"},{"lineNumber":68,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-11"},{"lineNumber":69,"author":{"gitId":"froststein"},"content":"        return false;","lastModifiedDate":"2022-03-11"},{"lineNumber":70,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-11"},{"lineNumber":71,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-11"},{"lineNumber":72,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":73,"author":{"gitId":"froststein"},"content":"     * Returns the Session object via the session unique identifier specified by the user.","lastModifiedDate":"2022-03-17"},{"lineNumber":74,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":75,"author":{"gitId":"froststein"},"content":"     * @param sessionId An integer that uniquely identifies a Session object.","lastModifiedDate":"2022-03-17"},{"lineNumber":76,"author":{"gitId":"froststein"},"content":"     * @return A Session object with the matching session unique identifier.","lastModifiedDate":"2022-03-17"},{"lineNumber":77,"author":{"gitId":"froststein"},"content":"     * @throws InvalidDataException If there are no sessions stored or","lastModifiedDate":"2022-03-09"},{"lineNumber":78,"author":{"gitId":"froststein"},"content":"     *                              if the session unique identifier specified was not found.","lastModifiedDate":"2022-03-09"},{"lineNumber":79,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":80,"author":{"gitId":"froststein"},"content":"    public Session getSession(int sessionId) throws InvalidDataException {","lastModifiedDate":"2022-03-08"},{"lineNumber":81,"author":{"gitId":"froststein"},"content":"        if (sessionList.isEmpty()) {","lastModifiedDate":"2022-03-08"},{"lineNumber":82,"author":{"gitId":"froststein"},"content":"            throw new InvalidDataException(Message.ERROR_PROFILE_SESSION_LIST_EMPTY);","lastModifiedDate":"2022-03-08"},{"lineNumber":83,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":84,"author":{"gitId":"froststein"},"content":"        for (Session session : sessionList) {","lastModifiedDate":"2022-03-08"},{"lineNumber":85,"author":{"gitId":"froststein"},"content":"            if (session.getSessionId() \u003d\u003d sessionId) {","lastModifiedDate":"2022-03-08"},{"lineNumber":86,"author":{"gitId":"froststein"},"content":"                return session;","lastModifiedDate":"2022-03-08"},{"lineNumber":87,"author":{"gitId":"froststein"},"content":"            }","lastModifiedDate":"2022-03-08"},{"lineNumber":88,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":89,"author":{"gitId":"froststein"},"content":"        throw new InvalidDataException(Message.ERROR_PROFILE_SESSION_NOT_IN_LIST);","lastModifiedDate":"2022-03-08"},{"lineNumber":90,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":91,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":92,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":93,"author":{"gitId":"froststein"},"content":"     * Adds a Session object to the list of sessions.","lastModifiedDate":"2022-03-09"},{"lineNumber":94,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":95,"author":{"gitId":"froststein"},"content":"     * @param session A Session object that is to be added.","lastModifiedDate":"2022-03-09"},{"lineNumber":96,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":97,"author":{"gitId":"froststein"},"content":"    public void addSession(Session session) {","lastModifiedDate":"2022-03-08"},{"lineNumber":98,"author":{"gitId":"froststein"},"content":"        sessionList.add(session);","lastModifiedDate":"2022-03-11"},{"lineNumber":99,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":100,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":101,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-11"},{"lineNumber":102,"author":{"gitId":"froststein"},"content":"     * Removes a Session object from the list of sessions.","lastModifiedDate":"2022-03-19"},{"lineNumber":103,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-11"},{"lineNumber":104,"author":{"gitId":"froststein"},"content":"     * @param sessionToBeRemoved A Session Object to be deleted.","lastModifiedDate":"2022-03-19"},{"lineNumber":105,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-11"},{"lineNumber":106,"author":{"gitId":"froststein"},"content":"    public void removeSession(Session sessionToBeRemoved) {","lastModifiedDate":"2022-03-19"},{"lineNumber":107,"author":{"gitId":"froststein"},"content":"        sessionList.remove(sessionToBeRemoved);","lastModifiedDate":"2022-03-11"},{"lineNumber":108,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-11"},{"lineNumber":109,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-11"},{"lineNumber":110,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-03"},{"lineNumber":111,"author":{"gitId":"froststein"},"content":"     * Returns the list of session stored in profile.","lastModifiedDate":"2022-03-17"},{"lineNumber":112,"author":{"gitId":"matheril"},"content":"     *","lastModifiedDate":"2022-03-04"},{"lineNumber":113,"author":{"gitId":"froststein"},"content":"     * @return An ArrayList of Session objects.","lastModifiedDate":"2022-03-09"},{"lineNumber":114,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-03"},{"lineNumber":115,"author":{"gitId":"froststein"},"content":"    public ArrayList\u003cSession\u003e getSessionList() {","lastModifiedDate":"2022-03-03"},{"lineNumber":116,"author":{"gitId":"froststein"},"content":"        return sessionList;","lastModifiedDate":"2022-03-03"},{"lineNumber":117,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-03"},{"lineNumber":118,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":119,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-03"},{"lineNumber":120,"author":{"gitId":"froststein"},"content":"     * Checks if there is a Group object that exists with the same name.","lastModifiedDate":"2022-03-17"},{"lineNumber":121,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-17"},{"lineNumber":122,"author":{"gitId":"froststein"},"content":"     * @param groupName A String object that represents the group name.","lastModifiedDate":"2022-03-17"},{"lineNumber":123,"author":{"gitId":"froststein"},"content":"     * @return true if a group exists with the same name,","lastModifiedDate":"2022-03-18"},{"lineNumber":124,"author":{"gitId":"froststein"},"content":"     *         false otherwise.","lastModifiedDate":"2022-03-18"},{"lineNumber":125,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":126,"author":{"gitId":"froststein"},"content":"    public boolean hasGroupName(String groupName) {","lastModifiedDate":"2022-03-17"},{"lineNumber":127,"author":{"gitId":"froststein"},"content":"        if (groupList.isEmpty()) {","lastModifiedDate":"2022-03-17"},{"lineNumber":128,"author":{"gitId":"froststein"},"content":"            return false;","lastModifiedDate":"2022-03-17"},{"lineNumber":129,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":130,"author":{"gitId":"froststein"},"content":"        for (Group group : groupList) {","lastModifiedDate":"2022-03-17"},{"lineNumber":131,"author":{"gitId":"froststein"},"content":"            if (group.getGroupName().equalsIgnoreCase(groupName)) {","lastModifiedDate":"2022-03-17"},{"lineNumber":132,"author":{"gitId":"froststein"},"content":"                return true;","lastModifiedDate":"2022-03-17"},{"lineNumber":133,"author":{"gitId":"froststein"},"content":"            }","lastModifiedDate":"2022-03-17"},{"lineNumber":134,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":135,"author":{"gitId":"froststein"},"content":"        return false;","lastModifiedDate":"2022-03-17"},{"lineNumber":136,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":137,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":138,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":139,"author":{"gitId":"froststein"},"content":"     * Checks if there is a Group object that exists with the specified group unique identifier.","lastModifiedDate":"2022-03-17"},{"lineNumber":140,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-17"},{"lineNumber":141,"author":{"gitId":"froststein"},"content":"     * @param groupId An integer that uniquely identifies a group.","lastModifiedDate":"2022-03-17"},{"lineNumber":142,"author":{"gitId":"froststein"},"content":"     * @return true if a group exists with the specified group unique identifier","lastModifiedDate":"2022-03-18"},{"lineNumber":143,"author":{"gitId":"froststein"},"content":"     *         false otherwise.","lastModifiedDate":"2022-03-18"},{"lineNumber":144,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":145,"author":{"gitId":"froststein"},"content":"    public boolean hasGroupId(int groupId) {","lastModifiedDate":"2022-03-17"},{"lineNumber":146,"author":{"gitId":"froststein"},"content":"        if (groupList.isEmpty()) {","lastModifiedDate":"2022-03-17"},{"lineNumber":147,"author":{"gitId":"froststein"},"content":"            return false;","lastModifiedDate":"2022-03-17"},{"lineNumber":148,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":149,"author":{"gitId":"froststein"},"content":"        for (Group group : groupList) {","lastModifiedDate":"2022-03-17"},{"lineNumber":150,"author":{"gitId":"froststein"},"content":"            if (group.getGroupId() \u003d\u003d groupId) {","lastModifiedDate":"2022-03-17"},{"lineNumber":151,"author":{"gitId":"froststein"},"content":"                return true;","lastModifiedDate":"2022-03-17"},{"lineNumber":152,"author":{"gitId":"froststein"},"content":"            }","lastModifiedDate":"2022-03-17"},{"lineNumber":153,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":154,"author":{"gitId":"froststein"},"content":"        return false;","lastModifiedDate":"2022-03-17"},{"lineNumber":155,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":156,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":157,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":158,"author":{"gitId":"froststein"},"content":"     * Returns the Group object via the group unique identifier specified by the user.","lastModifiedDate":"2022-03-17"},{"lineNumber":159,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-17"},{"lineNumber":160,"author":{"gitId":"froststein"},"content":"     * @param groupId An integer that uniquely identifies a Group object.","lastModifiedDate":"2022-03-17"},{"lineNumber":161,"author":{"gitId":"froststein"},"content":"     * @return A Group object with the matching group unique identifier.","lastModifiedDate":"2022-03-17"},{"lineNumber":162,"author":{"gitId":"froststein"},"content":"     * @throws InvalidDataException If there are no groups stored or","lastModifiedDate":"2022-03-17"},{"lineNumber":163,"author":{"gitId":"froststein"},"content":"     *                              if the group unique identifier specified was not found.","lastModifiedDate":"2022-03-17"},{"lineNumber":164,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":165,"author":{"gitId":"froststein"},"content":"    public Group getGroup(int groupId) throws InvalidDataException {","lastModifiedDate":"2022-03-17"},{"lineNumber":166,"author":{"gitId":"froststein"},"content":"        if (groupList.isEmpty()) {","lastModifiedDate":"2022-03-17"},{"lineNumber":167,"author":{"gitId":"froststein"},"content":"            throw new InvalidDataException(Message.ERROR_PROFILE_GROUP_LIST_EMPTY);","lastModifiedDate":"2022-03-17"},{"lineNumber":168,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":169,"author":{"gitId":"froststein"},"content":"        for (Group group : groupList) {","lastModifiedDate":"2022-03-17"},{"lineNumber":170,"author":{"gitId":"froststein"},"content":"            if (group.getGroupId() \u003d\u003d groupId) {","lastModifiedDate":"2022-03-17"},{"lineNumber":171,"author":{"gitId":"froststein"},"content":"                return group;","lastModifiedDate":"2022-03-17"},{"lineNumber":172,"author":{"gitId":"froststein"},"content":"            }","lastModifiedDate":"2022-03-17"},{"lineNumber":173,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":174,"author":{"gitId":"froststein"},"content":"        throw new InvalidDataException(Message.ERROR_PROFILE_GROUP_NOT_IN_LIST);","lastModifiedDate":"2022-03-17"},{"lineNumber":175,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":176,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":177,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":178,"author":{"gitId":"froststein"},"content":"     * Adds a Group object to the list of groups.","lastModifiedDate":"2022-03-17"},{"lineNumber":179,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-17"},{"lineNumber":180,"author":{"gitId":"froststein"},"content":"     * @param group A Group object that is to be added.","lastModifiedDate":"2022-03-17"},{"lineNumber":181,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":182,"author":{"gitId":"froststein"},"content":"    public void addGroup(Group group) {","lastModifiedDate":"2022-03-17"},{"lineNumber":183,"author":{"gitId":"froststein"},"content":"        groupList.add(group);","lastModifiedDate":"2022-03-17"},{"lineNumber":184,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":185,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":186,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":187,"author":{"gitId":"froststein"},"content":"     * Removes a Group object with the specified group unique identifier from the list of groups.","lastModifiedDate":"2022-03-17"},{"lineNumber":188,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-17"},{"lineNumber":189,"author":{"gitId":"froststein"},"content":"     * @param groupId An integer that uniquely identifies a Group object.","lastModifiedDate":"2022-03-17"},{"lineNumber":190,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":191,"author":{"gitId":"froststein"},"content":"    public void removeGroup(int groupId) throws InvalidDataException {","lastModifiedDate":"2022-03-17"},{"lineNumber":192,"author":{"gitId":"froststein"},"content":"        Group groupToBeRemoved \u003d getGroup(groupId);","lastModifiedDate":"2022-03-17"},{"lineNumber":193,"author":{"gitId":"froststein"},"content":"        groupList.remove(groupToBeRemoved);","lastModifiedDate":"2022-03-18"},{"lineNumber":194,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":195,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":196,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":197,"author":{"gitId":"froststein"},"content":"     * Returns the list of groups stored in profile.","lastModifiedDate":"2022-03-17"},{"lineNumber":198,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-17"},{"lineNumber":199,"author":{"gitId":"froststein"},"content":"     * @return An Arraylist of Group objects.","lastModifiedDate":"2022-03-17"},{"lineNumber":200,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":201,"author":{"gitId":"froststein"},"content":"    public ArrayList\u003cGroup\u003e getGroupList() {","lastModifiedDate":"2022-03-17"},{"lineNumber":202,"author":{"gitId":"froststein"},"content":"        return groupList;","lastModifiedDate":"2022-03-17"},{"lineNumber":203,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":204,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":205,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":206,"author":{"gitId":"froststein"},"content":"     * Returns a new session unique identifier for Session object to be created.","lastModifiedDate":"2022-03-17"},{"lineNumber":207,"author":{"gitId":"froststein"},"content":"     * Assumption: Function is called when a new Session object is being created without errors.","lastModifiedDate":"2022-03-09"},{"lineNumber":208,"author":{"gitId":"matheril"},"content":"     *","lastModifiedDate":"2022-03-04"},{"lineNumber":209,"author":{"gitId":"froststein"},"content":"     * @return An integer that represents the new session unique identifier.","lastModifiedDate":"2022-03-09"},{"lineNumber":210,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-03"},{"lineNumber":211,"author":{"gitId":"froststein"},"content":"    public int getNewSessionId() {","lastModifiedDate":"2022-03-03"},{"lineNumber":212,"author":{"gitId":"froststein"},"content":"        int newSessionId \u003d sessionIdTracker;","lastModifiedDate":"2022-03-03"},{"lineNumber":213,"author":{"gitId":"froststein"},"content":"        sessionIdTracker +\u003d 1;","lastModifiedDate":"2022-03-03"},{"lineNumber":214,"author":{"gitId":"froststein"},"content":"        return newSessionId;","lastModifiedDate":"2022-03-03"},{"lineNumber":215,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-03"},{"lineNumber":216,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":217,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":218,"author":{"gitId":"froststein"},"content":"     * Returns the value of the current session unique identifier that is tracked.","lastModifiedDate":"2022-03-16"},{"lineNumber":219,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-18"},{"lineNumber":220,"author":{"gitId":"froststein"},"content":"     * @return An integer that represents the current session unique identifier.","lastModifiedDate":"2022-03-16"},{"lineNumber":221,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":222,"author":{"gitId":"froststein"},"content":"    public int getSessionIdTracker() {","lastModifiedDate":"2022-03-16"},{"lineNumber":223,"author":{"gitId":"froststein"},"content":"        return sessionIdTracker;","lastModifiedDate":"2022-03-16"},{"lineNumber":224,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":225,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":226,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-03"},{"lineNumber":227,"author":{"gitId":"froststein"},"content":"     * Returns a new activity unique identifier for Activity object to be created.","lastModifiedDate":"2022-03-17"},{"lineNumber":228,"author":{"gitId":"froststein"},"content":"     * Assumption: Function is called when a new Activity object is being created without errors.","lastModifiedDate":"2022-03-09"},{"lineNumber":229,"author":{"gitId":"matheril"},"content":"     *","lastModifiedDate":"2022-03-04"},{"lineNumber":230,"author":{"gitId":"froststein"},"content":"     * @return An integer that represents the new activity unique identifier.","lastModifiedDate":"2022-03-09"},{"lineNumber":231,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-03"},{"lineNumber":232,"author":{"gitId":"froststein"},"content":"    public int getNewActivityId() {","lastModifiedDate":"2022-03-03"},{"lineNumber":233,"author":{"gitId":"froststein"},"content":"        int newActivityId \u003d activityIdTracker;","lastModifiedDate":"2022-03-03"},{"lineNumber":234,"author":{"gitId":"froststein"},"content":"        activityIdTracker +\u003d 1;","lastModifiedDate":"2022-03-03"},{"lineNumber":235,"author":{"gitId":"froststein"},"content":"        return newActivityId;","lastModifiedDate":"2022-03-03"},{"lineNumber":236,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-03"},{"lineNumber":237,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":238,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":239,"author":{"gitId":"froststein"},"content":"     * Returns the value of the current activity unique identifier that is tracked.","lastModifiedDate":"2022-03-16"},{"lineNumber":240,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-18"},{"lineNumber":241,"author":{"gitId":"froststein"},"content":"     * @return An integer that represents the current activity unique identifier.","lastModifiedDate":"2022-03-16"},{"lineNumber":242,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":243,"author":{"gitId":"froststein"},"content":"    public int getActivityIdTracker() {","lastModifiedDate":"2022-03-16"},{"lineNumber":244,"author":{"gitId":"froststein"},"content":"        return activityIdTracker;","lastModifiedDate":"2022-03-16"},{"lineNumber":245,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":246,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":247,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":248,"author":{"gitId":"froststein"},"content":"     * Returns a new group unique identifier for Group object to be created.","lastModifiedDate":"2022-03-17"},{"lineNumber":249,"author":{"gitId":"froststein"},"content":"     * Assumption: Function is called when a new Group object is being created without errors.","lastModifiedDate":"2022-03-17"},{"lineNumber":250,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-17"},{"lineNumber":251,"author":{"gitId":"froststein"},"content":"     * @return An integer that represents the new group unique identifier.","lastModifiedDate":"2022-03-17"},{"lineNumber":252,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":253,"author":{"gitId":"froststein"},"content":"    public int getNewGroupId() {","lastModifiedDate":"2022-03-17"},{"lineNumber":254,"author":{"gitId":"froststein"},"content":"        int newGroupId \u003d groupIdTracker;","lastModifiedDate":"2022-03-17"},{"lineNumber":255,"author":{"gitId":"froststein"},"content":"        groupIdTracker +\u003d 1;","lastModifiedDate":"2022-03-17"},{"lineNumber":256,"author":{"gitId":"froststein"},"content":"        return newGroupId;","lastModifiedDate":"2022-03-17"},{"lineNumber":257,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":258,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":259,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":260,"author":{"gitId":"froststein"},"content":"     * Returns the value of the current group unique identifier that is tracked.","lastModifiedDate":"2022-03-17"},{"lineNumber":261,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-18"},{"lineNumber":262,"author":{"gitId":"froststein"},"content":"     * @return An integer that represents the current group unique identifier.","lastModifiedDate":"2022-03-17"},{"lineNumber":263,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":264,"author":{"gitId":"froststein"},"content":"    public int getGroupIdTracker() {","lastModifiedDate":"2022-03-17"},{"lineNumber":265,"author":{"gitId":"froststein"},"content":"        return groupIdTracker;","lastModifiedDate":"2022-03-17"},{"lineNumber":266,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":267,"author":{"gitId":"froststein"},"content":"}","lastModifiedDate":"2022-03-03"}],"authorContributionMap":{"lelerer":2,"warrencxw":5,"froststein":257,"matheril":3}},{"path":"src/main/java/seedu/splitlah/data/Session.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah.data;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.exceptions.InvalidDataException;","lastModifiedDate":"2022-03-07"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.parser.ParserUtils;","lastModifiedDate":"2022-03-20"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-07"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":7,"author":{"gitId":"froststein"},"content":"import java.io.Serializable;","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-03-03"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-03"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-03-05"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":" * Represents a group outing session which contains a list of activities and is participated by a group of participants.","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":" *","lastModifiedDate":"2022-03-05"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":" * @author Warren","lastModifiedDate":"2022-03-05"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-03-05"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":"public class Session implements Serializable {","lastModifiedDate":"2022-03-22"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"    private String sessionName;","lastModifiedDate":"2022-03-03"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"    private int sessionId;","lastModifiedDate":"2022-03-03"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"    private LocalDate dateCreated;","lastModifiedDate":"2022-03-03"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"    private ArrayList\u003cActivity\u003e activityList;","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"froststein"},"content":"    private PersonList personList;","lastModifiedDate":"2022-03-20"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"    private Group group;","lastModifiedDate":"2022-03-19"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"    // CONSTANTS","lastModifiedDate":"2022-03-07"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"    private static final String ACTIVITY_LIST_HEADER \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"            \"Id | Activity Name | Cost | Payee\";","lastModifiedDate":"2022-03-08"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"    private static final String PERSON_LIST_HEADER \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":29,"author":{"gitId":"warrencxw"},"content":"            \"Participants\";","lastModifiedDate":"2022-03-08"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":"    private static final String SUMMARY_STRING_SEPARATOR \u003d \" | \";","lastModifiedDate":"2022-03-12"},{"lineNumber":31,"author":{"gitId":"warrencxw"},"content":"    private static final int ZERO_INDEXING_OFFSET \u003d 1;","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":33,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-12"},{"lineNumber":34,"author":{"gitId":"froststein"},"content":"     * Initializes a Session object.","lastModifiedDate":"2022-03-22"},{"lineNumber":35,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-12"},{"lineNumber":36,"author":{"gitId":"froststein"},"content":"     * @param sessionName A String object that represents the name of the session.","lastModifiedDate":"2022-03-23"},{"lineNumber":37,"author":{"gitId":"froststein"},"content":"     * @param sessionId   An integer that uniquely identifies a session.","lastModifiedDate":"2022-03-23"},{"lineNumber":38,"author":{"gitId":"warrencxw"},"content":"     * @param dateCreated A LocalDate object storing the date that the session occurs on.","lastModifiedDate":"2022-03-12"},{"lineNumber":39,"author":{"gitId":"froststein"},"content":"     * @param personList  An ArrayList object of Person objects representing participants of the session.","lastModifiedDate":"2022-03-20"},{"lineNumber":40,"author":{"gitId":"warrencxw"},"content":"     * @param group       A Group object representing a group of persons participating in the session.","lastModifiedDate":"2022-03-19"},{"lineNumber":41,"author":{"gitId":"warrencxw"},"content":"     * @see Profile#getNewSessionId() for issuing a unique sessionId","lastModifiedDate":"2022-03-19"},{"lineNumber":42,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-19"},{"lineNumber":43,"author":{"gitId":"froststein"},"content":"    public Session(String sessionName, int sessionId, LocalDate dateCreated, PersonList personList,","lastModifiedDate":"2022-03-20"},{"lineNumber":44,"author":{"gitId":"warrencxw"},"content":"                   Group group) {","lastModifiedDate":"2022-03-19"},{"lineNumber":45,"author":{"gitId":"warrencxw"},"content":"        assert personList !\u003d null : Message.ASSERT_SESSION_PERSON_LIST_EMPTY;","lastModifiedDate":"2022-03-19"},{"lineNumber":46,"author":{"gitId":"froststein"},"content":"        assert personList.getSize() !\u003d 0 : Message.ASSERT_SESSION_PERSON_LIST_EMPTY;","lastModifiedDate":"2022-03-20"},{"lineNumber":47,"author":{"gitId":"warrencxw"},"content":"        this.sessionName \u003d sessionName;","lastModifiedDate":"2022-03-19"},{"lineNumber":48,"author":{"gitId":"warrencxw"},"content":"        this.sessionId \u003d sessionId;","lastModifiedDate":"2022-03-19"},{"lineNumber":49,"author":{"gitId":"warrencxw"},"content":"        this.dateCreated \u003d dateCreated;","lastModifiedDate":"2022-03-19"},{"lineNumber":50,"author":{"gitId":"warrencxw"},"content":"        this.personList \u003d personList;","lastModifiedDate":"2022-03-19"},{"lineNumber":51,"author":{"gitId":"warrencxw"},"content":"        this.activityList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-19"},{"lineNumber":52,"author":{"gitId":"warrencxw"},"content":"        this.group \u003d group;","lastModifiedDate":"2022-03-19"},{"lineNumber":53,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":54,"author":{"gitId":"warrencxw"},"content":"    ","lastModifiedDate":"2022-03-19"},{"lineNumber":55,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-05"},{"lineNumber":56,"author":{"gitId":"warrencxw"},"content":"     * Returns the session\u0027s name.","lastModifiedDate":"2022-03-05"},{"lineNumber":57,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-05"},{"lineNumber":58,"author":{"gitId":"warrencxw"},"content":"     * @return A String object containing the name of the session.","lastModifiedDate":"2022-03-07"},{"lineNumber":59,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-05"},{"lineNumber":60,"author":{"gitId":"warrencxw"},"content":"    public String getSessionName() {","lastModifiedDate":"2022-03-05"},{"lineNumber":61,"author":{"gitId":"warrencxw"},"content":"        return sessionName;","lastModifiedDate":"2022-03-05"},{"lineNumber":62,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-05"},{"lineNumber":63,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":64,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-05"},{"lineNumber":65,"author":{"gitId":"warrencxw"},"content":"     * Returns the session\u0027s unique identifier.","lastModifiedDate":"2022-03-09"},{"lineNumber":66,"author":{"gitId":"warrencxw"},"content":"     * Assumption: The identifier number is unique across all session identifiers in the profile.","lastModifiedDate":"2022-03-05"},{"lineNumber":67,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-05"},{"lineNumber":68,"author":{"gitId":"warrencxw"},"content":"     * @return An integer representing the session\u0027s identifier.","lastModifiedDate":"2022-03-09"},{"lineNumber":69,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-05"},{"lineNumber":70,"author":{"gitId":"warrencxw"},"content":"    public int getSessionId() {","lastModifiedDate":"2022-03-05"},{"lineNumber":71,"author":{"gitId":"warrencxw"},"content":"        return sessionId;","lastModifiedDate":"2022-03-05"},{"lineNumber":72,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-05"},{"lineNumber":73,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":74,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-05"},{"lineNumber":75,"author":{"gitId":"warrencxw"},"content":"     * Returns the date of which the session is created.","lastModifiedDate":"2022-03-05"},{"lineNumber":76,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-05"},{"lineNumber":77,"author":{"gitId":"warrencxw"},"content":"     * @return A LocalDate object containing the date of creation of the session.","lastModifiedDate":"2022-03-05"},{"lineNumber":78,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-05"},{"lineNumber":79,"author":{"gitId":"warrencxw"},"content":"    public LocalDate getDateCreated() {","lastModifiedDate":"2022-03-05"},{"lineNumber":80,"author":{"gitId":"warrencxw"},"content":"        return dateCreated;","lastModifiedDate":"2022-03-05"},{"lineNumber":81,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-05"},{"lineNumber":82,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":83,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-05"},{"lineNumber":84,"author":{"gitId":"warrencxw"},"content":"     * Returns a String object containing a human-readable version of the date of creation of the session.","lastModifiedDate":"2022-03-05"},{"lineNumber":85,"author":{"gitId":"warrencxw"},"content":"     * Format: DD Month YYYY, e.g. 04 March 2022","lastModifiedDate":"2022-03-05"},{"lineNumber":86,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-05"},{"lineNumber":87,"author":{"gitId":"warrencxw"},"content":"     * @return A String object containing a human-readable version of the date of creation.","lastModifiedDate":"2022-03-07"},{"lineNumber":88,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-05"},{"lineNumber":89,"author":{"gitId":"warrencxw"},"content":"    public String getDateString() {","lastModifiedDate":"2022-03-05"},{"lineNumber":90,"author":{"gitId":"warrencxw"},"content":"        return dateCreated.getDayOfMonth() + \" \" + dateCreated.getMonth() + \" \" + dateCreated.getYear();","lastModifiedDate":"2022-03-05"},{"lineNumber":91,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-05"},{"lineNumber":92,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":93,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-12"},{"lineNumber":94,"author":{"gitId":"warrencxw"},"content":"     * Returns a list of Activity objects representing the activities that occurred in that session.","lastModifiedDate":"2022-03-12"},{"lineNumber":95,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-12"},{"lineNumber":96,"author":{"gitId":"warrencxw"},"content":"     * @return An ArrayList object containing Activity objects that are part of the session.","lastModifiedDate":"2022-03-12"},{"lineNumber":97,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-12"},{"lineNumber":98,"author":{"gitId":"warrencxw"},"content":"    public ArrayList\u003cActivity\u003e getActivityList() {","lastModifiedDate":"2022-03-12"},{"lineNumber":99,"author":{"gitId":"warrencxw"},"content":"        return activityList;","lastModifiedDate":"2022-03-12"},{"lineNumber":100,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-12"},{"lineNumber":101,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":102,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-12"},{"lineNumber":103,"author":{"gitId":"warrencxw"},"content":"     * Returns a list of Person objects representing the participants in the session.","lastModifiedDate":"2022-03-12"},{"lineNumber":104,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-12"},{"lineNumber":105,"author":{"gitId":"warrencxw"},"content":"     * @return An ArrayList object containing Person objects that are part of the session.","lastModifiedDate":"2022-03-12"},{"lineNumber":106,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-12"},{"lineNumber":107,"author":{"gitId":"warrencxw"},"content":"    public ArrayList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2022-03-12"},{"lineNumber":108,"author":{"gitId":"froststein"},"content":"        return personList.getPersonList();","lastModifiedDate":"2022-03-20"},{"lineNumber":109,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-12"},{"lineNumber":110,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":111,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-19"},{"lineNumber":112,"author":{"gitId":"warrencxw"},"content":"     * Returns a Group object representing a group of persons participating in the session.","lastModifiedDate":"2022-03-19"},{"lineNumber":113,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-03-19"},{"lineNumber":114,"author":{"gitId":"warrencxw"},"content":"     * @return A Group object containing Person objects that are participating in the session.","lastModifiedDate":"2022-03-19"},{"lineNumber":115,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-19"},{"lineNumber":116,"author":{"gitId":"warrencxw"},"content":"    public Group getGroup() {","lastModifiedDate":"2022-03-19"},{"lineNumber":117,"author":{"gitId":"warrencxw"},"content":"        return group;","lastModifiedDate":"2022-03-19"},{"lineNumber":118,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":119,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":120,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-12"},{"lineNumber":121,"author":{"gitId":"warrencxw"},"content":"     * Checks whether the Session object has an Activity object with the queried unique identifier.","lastModifiedDate":"2022-03-12"},{"lineNumber":122,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-03-12"},{"lineNumber":123,"author":{"gitId":"froststein"},"content":"     * @param activityId An integer that uniquely identifies an activity.","lastModifiedDate":"2022-03-23"},{"lineNumber":124,"author":{"gitId":"warrencxw"},"content":"     * @return true if the Session object has an Activity object with a unique identifier matching the query,","lastModifiedDate":"2022-03-12"},{"lineNumber":125,"author":{"gitId":"warrencxw"},"content":"     *         false otherwise.","lastModifiedDate":"2022-03-12"},{"lineNumber":126,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-12"},{"lineNumber":127,"author":{"gitId":"warrencxw"},"content":"    public boolean hasActivity(int activityId) {","lastModifiedDate":"2022-03-12"},{"lineNumber":128,"author":{"gitId":"warrencxw"},"content":"        if (activityList.isEmpty()) {","lastModifiedDate":"2022-03-12"},{"lineNumber":129,"author":{"gitId":"warrencxw"},"content":"            return false;","lastModifiedDate":"2022-03-12"},{"lineNumber":130,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-12"},{"lineNumber":131,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-12"},{"lineNumber":132,"author":{"gitId":"warrencxw"},"content":"        for (Activity activity : activityList) {","lastModifiedDate":"2022-03-12"},{"lineNumber":133,"author":{"gitId":"warrencxw"},"content":"            if (activity.getActivityId() \u003d\u003d activityId) {","lastModifiedDate":"2022-03-12"},{"lineNumber":134,"author":{"gitId":"warrencxw"},"content":"                return true;","lastModifiedDate":"2022-03-12"},{"lineNumber":135,"author":{"gitId":"warrencxw"},"content":"            }","lastModifiedDate":"2022-03-12"},{"lineNumber":136,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-12"},{"lineNumber":137,"author":{"gitId":"warrencxw"},"content":"        return false;","lastModifiedDate":"2022-03-12"},{"lineNumber":138,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-12"},{"lineNumber":139,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":140,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":141,"author":{"gitId":"warrencxw"},"content":"     * Returns an Activity object specified by a numerical identifier that uniquely identifies the activity.","lastModifiedDate":"2022-03-08"},{"lineNumber":142,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":143,"author":{"gitId":"froststein"},"content":"     * @param activityId An integer that uniquely identifies an activity.","lastModifiedDate":"2022-03-23"},{"lineNumber":144,"author":{"gitId":"warrencxw"},"content":"     * @return An Activity object in the Session class specified by activityId","lastModifiedDate":"2022-03-08"},{"lineNumber":145,"author":{"gitId":"warrencxw"},"content":"     * @throws InvalidDataException if activityList is empty or activityList does not contain an Activity object","lastModifiedDate":"2022-03-08"},{"lineNumber":146,"author":{"gitId":"warrencxw"},"content":"     *                              with the specified activityId","lastModifiedDate":"2022-03-08"},{"lineNumber":147,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":148,"author":{"gitId":"warrencxw"},"content":"    public Activity getActivity(int activityId) throws InvalidDataException {","lastModifiedDate":"2022-03-08"},{"lineNumber":149,"author":{"gitId":"warrencxw"},"content":"        if (activityList.isEmpty()) {","lastModifiedDate":"2022-03-08"},{"lineNumber":150,"author":{"gitId":"warrencxw"},"content":"            throw new InvalidDataException(Message.ERROR_SESSION_EMPTY_ACTIVITY_LIST);","lastModifiedDate":"2022-03-08"},{"lineNumber":151,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":152,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":153,"author":{"gitId":"warrencxw"},"content":"        for (Activity activity : activityList) {","lastModifiedDate":"2022-03-08"},{"lineNumber":154,"author":{"gitId":"warrencxw"},"content":"            if (activity.getActivityId() \u003d\u003d activityId) {","lastModifiedDate":"2022-03-08"},{"lineNumber":155,"author":{"gitId":"warrencxw"},"content":"                return activity;","lastModifiedDate":"2022-03-08"},{"lineNumber":156,"author":{"gitId":"warrencxw"},"content":"            }","lastModifiedDate":"2022-03-08"},{"lineNumber":157,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":158,"author":{"gitId":"warrencxw"},"content":"        throw new InvalidDataException(Message.ERROR_SESSION_ACTIVITY_ID_NOT_IN_LIST);","lastModifiedDate":"2022-03-08"},{"lineNumber":159,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":160,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":161,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":162,"author":{"gitId":"warrencxw"},"content":"     * Removes an Activity object specified by a numerical identifier that uniquely identifies the activity","lastModifiedDate":"2022-03-08"},{"lineNumber":163,"author":{"gitId":"warrencxw"},"content":"     * from the Session. Additionally, removes all ActivityCost objects with the same activityId from all Person","lastModifiedDate":"2022-03-08"},{"lineNumber":164,"author":{"gitId":"warrencxw"},"content":"     * objects involved in the activity.","lastModifiedDate":"2022-03-08"},{"lineNumber":165,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":166,"author":{"gitId":"froststein"},"content":"     * @param activityId An integer that uniquely identifies an activity.","lastModifiedDate":"2022-03-23"},{"lineNumber":167,"author":{"gitId":"warrencxw"},"content":"     * @throws InvalidDataException if activityList is empty or activityList does not contain an Activity object","lastModifiedDate":"2022-03-08"},{"lineNumber":168,"author":{"gitId":"warrencxw"},"content":"     *                              with the specified activityId","lastModifiedDate":"2022-03-08"},{"lineNumber":169,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":170,"author":{"gitId":"warrencxw"},"content":"    public void removeActivity(int activityId) throws InvalidDataException {","lastModifiedDate":"2022-03-08"},{"lineNumber":171,"author":{"gitId":"warrencxw"},"content":"        if (activityList.isEmpty()) {","lastModifiedDate":"2022-03-08"},{"lineNumber":172,"author":{"gitId":"warrencxw"},"content":"            throw new InvalidDataException(Message.ERROR_SESSION_EMPTY_ACTIVITY_LIST);","lastModifiedDate":"2022-03-08"},{"lineNumber":173,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":174,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":175,"author":{"gitId":"warrencxw"},"content":"        Activity deleteTarget \u003d null;","lastModifiedDate":"2022-03-08"},{"lineNumber":176,"author":{"gitId":"warrencxw"},"content":"        for (Activity activity : activityList) {","lastModifiedDate":"2022-03-08"},{"lineNumber":177,"author":{"gitId":"warrencxw"},"content":"            if (activity.getActivityId() \u003d\u003d activityId) {","lastModifiedDate":"2022-03-08"},{"lineNumber":178,"author":{"gitId":"warrencxw"},"content":"                deleteTarget \u003d activity;","lastModifiedDate":"2022-03-08"},{"lineNumber":179,"author":{"gitId":"warrencxw"},"content":"                break;","lastModifiedDate":"2022-03-08"},{"lineNumber":180,"author":{"gitId":"warrencxw"},"content":"            }","lastModifiedDate":"2022-03-08"},{"lineNumber":181,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":182,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":183,"author":{"gitId":"warrencxw"},"content":"        if (deleteTarget \u003d\u003d null) {","lastModifiedDate":"2022-03-08"},{"lineNumber":184,"author":{"gitId":"warrencxw"},"content":"            throw new InvalidDataException(Message.ERROR_SESSION_ACTIVITY_ID_NOT_IN_LIST);","lastModifiedDate":"2022-03-08"},{"lineNumber":185,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":186,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":187,"author":{"gitId":"warrencxw"},"content":"        ArrayList\u003cPerson\u003e involvedPersonList \u003d deleteTarget.getInvolvedPersonList();","lastModifiedDate":"2022-03-08"},{"lineNumber":188,"author":{"gitId":"warrencxw"},"content":"        if (involvedPersonList !\u003d null) {","lastModifiedDate":"2022-03-08"},{"lineNumber":189,"author":{"gitId":"warrencxw"},"content":"            for (Person person : involvedPersonList) {","lastModifiedDate":"2022-03-08"},{"lineNumber":190,"author":{"gitId":"warrencxw"},"content":"                person.removeActivityCost(activityId);","lastModifiedDate":"2022-03-08"},{"lineNumber":191,"author":{"gitId":"warrencxw"},"content":"            }","lastModifiedDate":"2022-03-08"},{"lineNumber":192,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":193,"author":{"gitId":"warrencxw"},"content":"        activityList.remove(deleteTarget);","lastModifiedDate":"2022-03-08"},{"lineNumber":194,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":195,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":196,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":197,"author":{"gitId":"warrencxw"},"content":"     * Adds an Activity object to the session.","lastModifiedDate":"2022-03-07"},{"lineNumber":198,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":199,"author":{"gitId":"warrencxw"},"content":"     * @param activity An Activity object representing an activity that happened in the session.","lastModifiedDate":"2022-03-07"},{"lineNumber":200,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":201,"author":{"gitId":"warrencxw"},"content":"    public void addActivity(Activity activity) {","lastModifiedDate":"2022-03-07"},{"lineNumber":202,"author":{"gitId":"warrencxw"},"content":"        activityList.add(activity);","lastModifiedDate":"2022-03-07"},{"lineNumber":203,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":204,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":205,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":206,"author":{"gitId":"warrencxw"},"content":"     * Returns a Person object specified by a numerical index that identifies the Person.","lastModifiedDate":"2022-03-07"},{"lineNumber":207,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":208,"author":{"gitId":"froststein"},"content":"     * @param index An integer that represents a numerical index that identifies a Person object in the session.","lastModifiedDate":"2022-03-23"},{"lineNumber":209,"author":{"gitId":"warrencxw"},"content":"     * @return A Person object in the Session class specified by index.","lastModifiedDate":"2022-03-07"},{"lineNumber":210,"author":{"gitId":"warrencxw"},"content":"     * @throws InvalidDataException if personList is empty or index is not in [1, personList.size()].","lastModifiedDate":"2022-03-07"},{"lineNumber":211,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":212,"author":{"gitId":"warrencxw"},"content":"    public Person getPersonByIndex(int index) throws InvalidDataException {","lastModifiedDate":"2022-03-07"},{"lineNumber":213,"author":{"gitId":"warrencxw"},"content":"        if (personList.isEmpty()) {","lastModifiedDate":"2022-03-07"},{"lineNumber":214,"author":{"gitId":"warrencxw"},"content":"            throw new InvalidDataException(Message.ERROR_SESSION_EMPTY_PERSON_LIST);","lastModifiedDate":"2022-03-07"},{"lineNumber":215,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":216,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":217,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-07"},{"lineNumber":218,"author":{"gitId":"froststein"},"content":"            return personList.getPerson(index - ZERO_INDEXING_OFFSET);","lastModifiedDate":"2022-03-20"},{"lineNumber":219,"author":{"gitId":"warrencxw"},"content":"        } catch (IndexOutOfBoundsException exception) {","lastModifiedDate":"2022-03-07"},{"lineNumber":220,"author":{"gitId":"froststein"},"content":"            throw new InvalidDataException(Message.ERROR_SESSION_INDEX_OUT_OF_RANGE_PERSON_LIST + personList.getSize());","lastModifiedDate":"2022-03-20"},{"lineNumber":221,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":222,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":223,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":224,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":225,"author":{"gitId":"warrencxw"},"content":"     * Returns a Person object with a name that matches the queried name.","lastModifiedDate":"2022-03-07"},{"lineNumber":226,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":227,"author":{"gitId":"froststein"},"content":"     * @param name A String object that represents a query name used to search for a Person object.","lastModifiedDate":"2022-03-23"},{"lineNumber":228,"author":{"gitId":"warrencxw"},"content":"     * @return A Person object in the Session class that has a matching name.","lastModifiedDate":"2022-03-07"},{"lineNumber":229,"author":{"gitId":"warrencxw"},"content":"     * @throws InvalidDataException If personList is empty or ","lastModifiedDate":"2022-03-09"},{"lineNumber":230,"author":{"gitId":"warrencxw"},"content":"     *                              if no Person object in personList matches queried name.","lastModifiedDate":"2022-03-09"},{"lineNumber":231,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":232,"author":{"gitId":"warrencxw"},"content":"    public Person getPersonByName(String name) throws InvalidDataException {","lastModifiedDate":"2022-03-07"},{"lineNumber":233,"author":{"gitId":"warrencxw"},"content":"        if (personList.isEmpty()) {","lastModifiedDate":"2022-03-07"},{"lineNumber":234,"author":{"gitId":"warrencxw"},"content":"            throw new InvalidDataException(Message.ERROR_SESSION_EMPTY_PERSON_LIST);","lastModifiedDate":"2022-03-07"},{"lineNumber":235,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":236,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":237,"author":{"gitId":"froststein"},"content":"        for (Person person : personList.getPersonList()) {","lastModifiedDate":"2022-03-20"},{"lineNumber":238,"author":{"gitId":"warrencxw"},"content":"            if (person.getName().equalsIgnoreCase(name)) {","lastModifiedDate":"2022-03-07"},{"lineNumber":239,"author":{"gitId":"warrencxw"},"content":"                return person;","lastModifiedDate":"2022-03-07"},{"lineNumber":240,"author":{"gitId":"warrencxw"},"content":"            }","lastModifiedDate":"2022-03-07"},{"lineNumber":241,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-07"},{"lineNumber":242,"author":{"gitId":"warrencxw"},"content":"        throw new InvalidDataException(Message.ERROR_SESSION_PERSON_NOT_IN_LIST);","lastModifiedDate":"2022-03-07"},{"lineNumber":243,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":244,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":245,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":246,"author":{"gitId":"warrencxw"},"content":"     * Returns an ArrayList of Person objects with names that match the provided name list.","lastModifiedDate":"2022-03-08"},{"lineNumber":247,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":248,"author":{"gitId":"warrencxw"},"content":"     * @param nameList An array of String objects that represent names of people in the session.","lastModifiedDate":"2022-03-08"},{"lineNumber":249,"author":{"gitId":"warrencxw"},"content":"     * @return An ArrayList object containing Person objects with matching names.","lastModifiedDate":"2022-03-08"},{"lineNumber":250,"author":{"gitId":"warrencxw"},"content":"     * @throws InvalidDataException if personList is empty or","lastModifiedDate":"2022-03-08"},{"lineNumber":251,"author":{"gitId":"warrencxw"},"content":"     *                              if any name in nameList does not match a Person object in personList.","lastModifiedDate":"2022-03-08"},{"lineNumber":252,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":253,"author":{"gitId":"warrencxw"},"content":"    public ArrayList\u003cPerson\u003e getPersonListByName(String[] nameList) throws InvalidDataException {","lastModifiedDate":"2022-03-08"},{"lineNumber":254,"author":{"gitId":"warrencxw"},"content":"        ArrayList\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-08"},{"lineNumber":255,"author":{"gitId":"warrencxw"},"content":"        for (String name : nameList) {","lastModifiedDate":"2022-03-08"},{"lineNumber":256,"author":{"gitId":"warrencxw"},"content":"            Person newPerson \u003d getPersonByName(name);","lastModifiedDate":"2022-03-08"},{"lineNumber":257,"author":{"gitId":"warrencxw"},"content":"            personList.add(newPerson);","lastModifiedDate":"2022-03-08"},{"lineNumber":258,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":259,"author":{"gitId":"warrencxw"},"content":"        return personList;","lastModifiedDate":"2022-03-08"},{"lineNumber":260,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":261,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":262,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-07"},{"lineNumber":263,"author":{"gitId":"warrencxw"},"content":"     * Adds a Person object to the session.","lastModifiedDate":"2022-03-07"},{"lineNumber":264,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-07"},{"lineNumber":265,"author":{"gitId":"warrencxw"},"content":"     * @param person A Person object representing a participant of the session.","lastModifiedDate":"2022-03-07"},{"lineNumber":266,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-07"},{"lineNumber":267,"author":{"gitId":"warrencxw"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2022-03-07"},{"lineNumber":268,"author":{"gitId":"froststein"},"content":"        personList.addPerson(person);","lastModifiedDate":"2022-03-20"},{"lineNumber":269,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-07"},{"lineNumber":270,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":271,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":272,"author":{"gitId":"warrencxw"},"content":"     * Returns a String object containing a summary of the state of the member attribute activityList.","lastModifiedDate":"2022-03-19"},{"lineNumber":273,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":274,"author":{"gitId":"warrencxw"},"content":"     * @return A String object containing a summary of all Activity objects in activityList, or","lastModifiedDate":"2022-03-19"},{"lineNumber":275,"author":{"gitId":"warrencxw"},"content":"     *         a message stating that the activityList is empty if there are no Activity objects within.","lastModifiedDate":"2022-03-19"},{"lineNumber":276,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":277,"author":{"gitId":"warrencxw"},"content":"    private String getActivityListSummaryString() {","lastModifiedDate":"2022-03-08"},{"lineNumber":278,"author":{"gitId":"warrencxw"},"content":"        if (activityList.isEmpty()) {","lastModifiedDate":"2022-03-08"},{"lineNumber":279,"author":{"gitId":"warrencxw"},"content":"            return Message.ERROR_SESSION_EMPTY_ACTIVITY_LIST;","lastModifiedDate":"2022-03-08"},{"lineNumber":280,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":281,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":282,"author":{"gitId":"warrencxw"},"content":"        StringBuilder summaryString \u003d new StringBuilder(ACTIVITY_LIST_HEADER);","lastModifiedDate":"2022-03-08"},{"lineNumber":283,"author":{"gitId":"warrencxw"},"content":"        for (Activity activity : activityList) {","lastModifiedDate":"2022-03-08"},{"lineNumber":284,"author":{"gitId":"warrencxw"},"content":"            summaryString.append(\"\\n \u003e \").append(activity.getActivitySummaryString());","lastModifiedDate":"2022-03-08"},{"lineNumber":285,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":286,"author":{"gitId":"warrencxw"},"content":"        return summaryString.toString();","lastModifiedDate":"2022-03-08"},{"lineNumber":287,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":288,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":289,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":290,"author":{"gitId":"warrencxw"},"content":"     * Returns a String object containing a summary of the state of the member attribute personList.","lastModifiedDate":"2022-03-19"},{"lineNumber":291,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-08"},{"lineNumber":292,"author":{"gitId":"warrencxw"},"content":"     * @return A String object containing a summary of all Person objects in personList, or","lastModifiedDate":"2022-03-19"},{"lineNumber":293,"author":{"gitId":"warrencxw"},"content":"     *         a message stating that the personList is empty if there are no Person objects within.","lastModifiedDate":"2022-03-19"},{"lineNumber":294,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":295,"author":{"gitId":"warrencxw"},"content":"    private String getPersonListSummaryString() {","lastModifiedDate":"2022-03-08"},{"lineNumber":296,"author":{"gitId":"warrencxw"},"content":"        if (personList.isEmpty()) {","lastModifiedDate":"2022-03-08"},{"lineNumber":297,"author":{"gitId":"warrencxw"},"content":"            return Message.ERROR_SESSION_EMPTY_PERSON_LIST;","lastModifiedDate":"2022-03-08"},{"lineNumber":298,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":299,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":300,"author":{"gitId":"warrencxw"},"content":"        StringBuilder summaryString \u003d new StringBuilder(PERSON_LIST_HEADER);","lastModifiedDate":"2022-03-08"},{"lineNumber":301,"author":{"gitId":"froststein"},"content":"        for (int i \u003d 0; i \u003c personList.getSize(); i++) {","lastModifiedDate":"2022-03-20"},{"lineNumber":302,"author":{"gitId":"froststein"},"content":"            String personName \u003d personList.getPerson(i).getName();","lastModifiedDate":"2022-03-20"},{"lineNumber":303,"author":{"gitId":"warrencxw"},"content":"            summaryString.append(\"\\n \").append(i + ZERO_INDEXING_OFFSET).append(\". \").append(personName);","lastModifiedDate":"2022-03-11"},{"lineNumber":304,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-08"},{"lineNumber":305,"author":{"gitId":"warrencxw"},"content":"        return summaryString.toString();","lastModifiedDate":"2022-03-08"},{"lineNumber":306,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":307,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":308,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-19"},{"lineNumber":309,"author":{"gitId":"warrencxw"},"content":"     * Returns a String object containing a summary of the state of the member attribute group.","lastModifiedDate":"2022-03-19"},{"lineNumber":310,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-19"},{"lineNumber":311,"author":{"gitId":"warrencxw"},"content":"     * @return A String object containing the name of the Group object if group is not null, or","lastModifiedDate":"2022-03-19"},{"lineNumber":312,"author":{"gitId":"warrencxw"},"content":"     *         a message stating that there is no group in the session, if group is null.","lastModifiedDate":"2022-03-19"},{"lineNumber":313,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-19"},{"lineNumber":314,"author":{"gitId":"warrencxw"},"content":"    private String getGroupSummaryString() {","lastModifiedDate":"2022-03-19"},{"lineNumber":315,"author":{"gitId":"warrencxw"},"content":"        if (group \u003d\u003d null) {","lastModifiedDate":"2022-03-19"},{"lineNumber":316,"author":{"gitId":"warrencxw"},"content":"            return \"Group: None\";","lastModifiedDate":"2022-03-19"},{"lineNumber":317,"author":{"gitId":"warrencxw"},"content":"        } else {","lastModifiedDate":"2022-03-19"},{"lineNumber":318,"author":{"gitId":"warrencxw"},"content":"            return \"Group: \" + group.getGroupName();","lastModifiedDate":"2022-03-19"},{"lineNumber":319,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-19"},{"lineNumber":320,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":321,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":322,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-08"},{"lineNumber":323,"author":{"gitId":"warrencxw"},"content":"     * Returns a String object summarising the state of the Session object.","lastModifiedDate":"2022-03-08"},{"lineNumber":324,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-03-08"},{"lineNumber":325,"author":{"gitId":"warrencxw"},"content":"     * @return A String object containing a summary of the Session object.","lastModifiedDate":"2022-03-12"},{"lineNumber":326,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-12"},{"lineNumber":327,"author":{"gitId":"warrencxw"},"content":"    public String getSessionSimplifiedString() {","lastModifiedDate":"2022-03-12"},{"lineNumber":328,"author":{"gitId":"warrencxw"},"content":"        return sessionId + SUMMARY_STRING_SEPARATOR + sessionName + \"\\n \"","lastModifiedDate":"2022-03-19"},{"lineNumber":329,"author":{"gitId":"warrencxw"},"content":"                + SUMMARY_STRING_SEPARATOR + dateCreated.format(ParserUtils.DATE_FORMAT)","lastModifiedDate":"2022-03-20"},{"lineNumber":330,"author":{"gitId":"froststein"},"content":"                + SUMMARY_STRING_SEPARATOR + personList.getSize() + \" participants\"","lastModifiedDate":"2022-03-20"},{"lineNumber":331,"author":{"gitId":"warrencxw"},"content":"                + SUMMARY_STRING_SEPARATOR + activityList.size() + \" activities\"","lastModifiedDate":"2022-03-19"},{"lineNumber":332,"author":{"gitId":"warrencxw"},"content":"                + SUMMARY_STRING_SEPARATOR + getGroupSummaryString();","lastModifiedDate":"2022-03-19"},{"lineNumber":333,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-12"},{"lineNumber":334,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":335,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-12"},{"lineNumber":336,"author":{"gitId":"warrencxw"},"content":"     * Returns a String object describing the state of the Session object.","lastModifiedDate":"2022-03-12"},{"lineNumber":337,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-12"},{"lineNumber":338,"author":{"gitId":"warrencxw"},"content":"     * @return A String object containing a description of the Session object and its member attributes.","lastModifiedDate":"2022-03-12"},{"lineNumber":339,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-08"},{"lineNumber":340,"author":{"gitId":"warrencxw"},"content":"    @Override","lastModifiedDate":"2022-03-08"},{"lineNumber":341,"author":{"gitId":"warrencxw"},"content":"    public String toString() {","lastModifiedDate":"2022-03-08"},{"lineNumber":342,"author":{"gitId":"warrencxw"},"content":"        return \"Session Id #\" + sessionId + \" --\\n\"","lastModifiedDate":"2022-03-11"},{"lineNumber":343,"author":{"gitId":"warrencxw"},"content":"                + \"Name: \" + sessionName + \u0027\\n\u0027","lastModifiedDate":"2022-03-08"},{"lineNumber":344,"author":{"gitId":"warrencxw"},"content":"                + \"Date: \" + dateCreated.format(ParserUtils.DATE_FORMAT) + \u0027\\n\u0027","lastModifiedDate":"2022-03-20"},{"lineNumber":345,"author":{"gitId":"warrencxw"},"content":"                + getActivityListSummaryString() + \u0027\\n\u0027","lastModifiedDate":"2022-03-08"},{"lineNumber":346,"author":{"gitId":"warrencxw"},"content":"                + getPersonListSummaryString() + \u0027\\n\u0027","lastModifiedDate":"2022-03-19"},{"lineNumber":347,"author":{"gitId":"warrencxw"},"content":"                + getGroupSummaryString();","lastModifiedDate":"2022-03-19"},{"lineNumber":348,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-08"},{"lineNumber":349,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-03-03"}],"authorContributionMap":{"warrencxw":324,"froststein":25}},{"path":"src/main/java/seedu/splitlah/exceptions/InvalidDataException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah.exceptions;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":3,"author":{"gitId":"matheril"},"content":"/**","lastModifiedDate":"2022-03-03"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":" * Represents an exception that is thrown when data-related errors (such as unexpected null objects) occur.","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"matheril"},"content":" *","lastModifiedDate":"2022-03-04"},{"lineNumber":6,"author":{"gitId":"matheril"},"content":" * @author Saurav","lastModifiedDate":"2022-03-03"},{"lineNumber":7,"author":{"gitId":"matheril"},"content":" */","lastModifiedDate":"2022-03-03"},{"lineNumber":8,"author":{"gitId":"matheril"},"content":"public class InvalidDataException extends Exception {","lastModifiedDate":"2022-03-03"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":"    ","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"matheril"},"content":"    private final String message;","lastModifiedDate":"2022-03-03"},{"lineNumber":11,"author":{"gitId":"matheril"},"content":"    private final Throwable cause;","lastModifiedDate":"2022-03-03"},{"lineNumber":12,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":13,"author":{"gitId":"matheril"},"content":"    /**","lastModifiedDate":"2022-03-03"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":"     * Initializes an InvalidDataException object.","lastModifiedDate":"2022-03-23"},{"lineNumber":15,"author":{"gitId":"matheril"},"content":"     * Use this to store another exception (such as a Java exception) inside this exception to access it later.","lastModifiedDate":"2022-03-03"},{"lineNumber":16,"author":{"gitId":"matheril"},"content":"     *","lastModifiedDate":"2022-03-03"},{"lineNumber":17,"author":{"gitId":"matheril"},"content":"     * @param message A String object containing a description of the error.","lastModifiedDate":"2022-03-12"},{"lineNumber":18,"author":{"gitId":"matheril"},"content":"     * @param cause   A Throwable object to be stored in this exception.","lastModifiedDate":"2022-03-12"},{"lineNumber":19,"author":{"gitId":"matheril"},"content":"     */","lastModifiedDate":"2022-03-03"},{"lineNumber":20,"author":{"gitId":"matheril"},"content":"    public InvalidDataException(String message, Throwable cause) {","lastModifiedDate":"2022-03-03"},{"lineNumber":21,"author":{"gitId":"matheril"},"content":"        this.message \u003d message;","lastModifiedDate":"2022-03-03"},{"lineNumber":22,"author":{"gitId":"matheril"},"content":"        this.cause \u003d cause;","lastModifiedDate":"2022-03-03"},{"lineNumber":23,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-03"},{"lineNumber":24,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":25,"author":{"gitId":"matheril"},"content":"    /**","lastModifiedDate":"2022-03-03"},{"lineNumber":26,"author":{"gitId":"matheril"},"content":"     * Constructor that includes a message only.","lastModifiedDate":"2022-03-03"},{"lineNumber":27,"author":{"gitId":"matheril"},"content":"     * Use this when no exception needs to be stored inside this one.","lastModifiedDate":"2022-03-03"},{"lineNumber":28,"author":{"gitId":"matheril"},"content":"     *","lastModifiedDate":"2022-03-04"},{"lineNumber":29,"author":{"gitId":"matheril"},"content":"     * @param message A String object containing a description of the error.","lastModifiedDate":"2022-03-12"},{"lineNumber":30,"author":{"gitId":"matheril"},"content":"     */","lastModifiedDate":"2022-03-03"},{"lineNumber":31,"author":{"gitId":"matheril"},"content":"    public InvalidDataException(String message) {","lastModifiedDate":"2022-03-03"},{"lineNumber":32,"author":{"gitId":"matheril"},"content":"        this.message \u003d message;","lastModifiedDate":"2022-03-03"},{"lineNumber":33,"author":{"gitId":"matheril"},"content":"        this.cause \u003d null;","lastModifiedDate":"2022-03-03"},{"lineNumber":34,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-03"},{"lineNumber":35,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":36,"author":{"gitId":"matheril"},"content":"    /**","lastModifiedDate":"2022-03-03"},{"lineNumber":37,"author":{"gitId":"matheril"},"content":"     * Default constructor. No message or exception will be stored.","lastModifiedDate":"2022-03-03"},{"lineNumber":38,"author":{"gitId":"matheril"},"content":"     */","lastModifiedDate":"2022-03-03"},{"lineNumber":39,"author":{"gitId":"matheril"},"content":"    public InvalidDataException() {","lastModifiedDate":"2022-03-03"},{"lineNumber":40,"author":{"gitId":"matheril"},"content":"        this.message \u003d null;","lastModifiedDate":"2022-03-03"},{"lineNumber":41,"author":{"gitId":"matheril"},"content":"        this.cause \u003d null;","lastModifiedDate":"2022-03-03"},{"lineNumber":42,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-03"},{"lineNumber":43,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":44,"author":{"gitId":"matheril"},"content":"    public String getMessage() {","lastModifiedDate":"2022-03-03"},{"lineNumber":45,"author":{"gitId":"matheril"},"content":"        return message;","lastModifiedDate":"2022-03-03"},{"lineNumber":46,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-03"},{"lineNumber":47,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":48,"author":{"gitId":"matheril"},"content":"    public Throwable getCause() {","lastModifiedDate":"2022-03-03"},{"lineNumber":49,"author":{"gitId":"matheril"},"content":"        return cause;","lastModifiedDate":"2022-03-03"},{"lineNumber":50,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-03"},{"lineNumber":51,"author":{"gitId":"matheril"},"content":"}","lastModifiedDate":"2022-03-03"}],"authorContributionMap":{"warrencxw":2,"froststein":2,"matheril":47}},{"path":"src/main/java/seedu/splitlah/exceptions/InvalidFormatException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah.exceptions;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":3,"author":{"gitId":"matheril"},"content":"/**","lastModifiedDate":"2022-03-04"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":" * Represents an exception that is thrown when format-related errors (such as invalid input) occur.","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"matheril"},"content":" *","lastModifiedDate":"2022-03-04"},{"lineNumber":6,"author":{"gitId":"matheril"},"content":" * @author Saurav","lastModifiedDate":"2022-03-04"},{"lineNumber":7,"author":{"gitId":"matheril"},"content":" */","lastModifiedDate":"2022-03-04"},{"lineNumber":8,"author":{"gitId":"matheril"},"content":"public class InvalidFormatException extends Exception {","lastModifiedDate":"2022-03-04"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":"    ","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"matheril"},"content":"    private final String message;","lastModifiedDate":"2022-03-04"},{"lineNumber":11,"author":{"gitId":"matheril"},"content":"    private final Throwable cause;","lastModifiedDate":"2022-03-04"},{"lineNumber":12,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":13,"author":{"gitId":"matheril"},"content":"    /**","lastModifiedDate":"2022-03-04"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":"     * Initializes an InvalidFormatException object.","lastModifiedDate":"2022-03-23"},{"lineNumber":15,"author":{"gitId":"matheril"},"content":"     * Use this to store another exception (such as a Java exception) inside this exception to access it later.","lastModifiedDate":"2022-03-04"},{"lineNumber":16,"author":{"gitId":"matheril"},"content":"     *","lastModifiedDate":"2022-03-04"},{"lineNumber":17,"author":{"gitId":"matheril"},"content":"     * @param message A String object containing a description of the error.","lastModifiedDate":"2022-03-12"},{"lineNumber":18,"author":{"gitId":"matheril"},"content":"     * @param cause   A Throwable object to be stored in this exception.","lastModifiedDate":"2022-03-12"},{"lineNumber":19,"author":{"gitId":"matheril"},"content":"     */","lastModifiedDate":"2022-03-04"},{"lineNumber":20,"author":{"gitId":"matheril"},"content":"    public InvalidFormatException(String message, Throwable cause) {","lastModifiedDate":"2022-03-04"},{"lineNumber":21,"author":{"gitId":"matheril"},"content":"        this.message \u003d message;","lastModifiedDate":"2022-03-04"},{"lineNumber":22,"author":{"gitId":"matheril"},"content":"        this.cause \u003d cause;","lastModifiedDate":"2022-03-04"},{"lineNumber":23,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-04"},{"lineNumber":24,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":25,"author":{"gitId":"matheril"},"content":"    /**","lastModifiedDate":"2022-03-04"},{"lineNumber":26,"author":{"gitId":"matheril"},"content":"     * Constructor that includes a message only.","lastModifiedDate":"2022-03-04"},{"lineNumber":27,"author":{"gitId":"matheril"},"content":"     * Use this when no exception needs to be stored inside this one.","lastModifiedDate":"2022-03-04"},{"lineNumber":28,"author":{"gitId":"matheril"},"content":"     *","lastModifiedDate":"2022-03-04"},{"lineNumber":29,"author":{"gitId":"matheril"},"content":"     * @param message A String object containing a description of the error.","lastModifiedDate":"2022-03-12"},{"lineNumber":30,"author":{"gitId":"matheril"},"content":"     */","lastModifiedDate":"2022-03-04"},{"lineNumber":31,"author":{"gitId":"matheril"},"content":"    public InvalidFormatException(String message) {","lastModifiedDate":"2022-03-04"},{"lineNumber":32,"author":{"gitId":"matheril"},"content":"        this.message \u003d message;","lastModifiedDate":"2022-03-04"},{"lineNumber":33,"author":{"gitId":"matheril"},"content":"        this.cause \u003d null;","lastModifiedDate":"2022-03-04"},{"lineNumber":34,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-04"},{"lineNumber":35,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":36,"author":{"gitId":"matheril"},"content":"    /**","lastModifiedDate":"2022-03-04"},{"lineNumber":37,"author":{"gitId":"matheril"},"content":"     * Default constructor. No message or exception will be stored.","lastModifiedDate":"2022-03-04"},{"lineNumber":38,"author":{"gitId":"matheril"},"content":"     */","lastModifiedDate":"2022-03-04"},{"lineNumber":39,"author":{"gitId":"matheril"},"content":"    public InvalidFormatException() {","lastModifiedDate":"2022-03-04"},{"lineNumber":40,"author":{"gitId":"matheril"},"content":"        this.message \u003d null;","lastModifiedDate":"2022-03-04"},{"lineNumber":41,"author":{"gitId":"matheril"},"content":"        this.cause \u003d null;","lastModifiedDate":"2022-03-04"},{"lineNumber":42,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-04"},{"lineNumber":43,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":44,"author":{"gitId":"matheril"},"content":"    public String getMessage() {","lastModifiedDate":"2022-03-04"},{"lineNumber":45,"author":{"gitId":"matheril"},"content":"        return message;","lastModifiedDate":"2022-03-04"},{"lineNumber":46,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-04"},{"lineNumber":47,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":48,"author":{"gitId":"matheril"},"content":"    public Throwable getCause() {","lastModifiedDate":"2022-03-04"},{"lineNumber":49,"author":{"gitId":"matheril"},"content":"        return cause;","lastModifiedDate":"2022-03-04"},{"lineNumber":50,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-04"},{"lineNumber":51,"author":{"gitId":"matheril"},"content":"}","lastModifiedDate":"2022-03-04"}],"authorContributionMap":{"warrencxw":2,"froststein":2,"matheril":47}},{"path":"src/main/java/seedu/splitlah/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah.parser;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":3,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.command.Command;","lastModifiedDate":"2022-03-12"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.command.ActivityDeleteCommand;","lastModifiedDate":"2022-03-12"},{"lineNumber":5,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.command.ActivityListCommand;","lastModifiedDate":"2022-03-12"},{"lineNumber":6,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.command.ActivityViewCommand;","lastModifiedDate":"2022-03-12"},{"lineNumber":7,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.command.SessionCreateCommand;","lastModifiedDate":"2022-03-12"},{"lineNumber":8,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.command.SessionDeleteCommand;","lastModifiedDate":"2022-03-12"},{"lineNumber":9,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.command.ExitCommand;","lastModifiedDate":"2022-03-12"},{"lineNumber":10,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.command.InvalidCommand;","lastModifiedDate":"2022-03-12"},{"lineNumber":11,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.command.GroupCreateCommand;","lastModifiedDate":"2022-03-18"},{"lineNumber":12,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.command.GroupDeleteCommand;","lastModifiedDate":"2022-03-19"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.command.GroupListCommand;","lastModifiedDate":"2022-03-21"},{"lineNumber":14,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.command.GroupViewCommand;","lastModifiedDate":"2022-03-20"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.exceptions.InvalidFormatException;","lastModifiedDate":"2022-03-07"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.parser.commandparser.HelpCommandParser;","lastModifiedDate":"2022-03-22"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.parser.commandparser.SessionCreateCommandParser;","lastModifiedDate":"2022-03-25"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.parser.commandparser.SessionListCommandParser;","lastModifiedDate":"2022-03-23"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.parser.commandparser.SessionSummaryCommandParser;","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.parser.commandparser.ActivityCreateCommandParser;","lastModifiedDate":"2022-03-24"},{"lineNumber":21,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-07"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-03-05"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-03-05"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-03-04"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":" * Represents a parser that interprets the user input into data that can be understood by the program.","lastModifiedDate":"2022-03-09"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":" * ","lastModifiedDate":"2022-03-05"},{"lineNumber":29,"author":{"gitId":"warrencxw"},"content":" * @author Warren","lastModifiedDate":"2022-03-04"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-03-04"},{"lineNumber":31,"author":{"gitId":"warrencxw"},"content":"public class Parser {","lastModifiedDate":"2022-03-03"},{"lineNumber":32,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":33,"author":{"gitId":"warrencxw"},"content":"    // KEY CONSTANTS","lastModifiedDate":"2022-03-20"},{"lineNumber":34,"author":{"gitId":"warrencxw"},"content":"    private static final String LOCALDATE_TODAY_INDICATOR \u003d \"today\";","lastModifiedDate":"2022-03-12"},{"lineNumber":35,"author":{"gitId":"warrencxw"},"content":"    private static final int COMMAND_WITH_ARGS_TOKEN_COUNT \u003d 3;","lastModifiedDate":"2022-03-04"},{"lineNumber":36,"author":{"gitId":"warrencxw"},"content":"    private static final int DELIMITERED_COMMAND_MIN_TOKEN_COUNT \u003d 2;","lastModifiedDate":"2022-03-06"},{"lineNumber":37,"author":{"gitId":"warrencxw"},"content":"    static final double MINIMUM_SURCHARGE_PERCENT \u003d 0;","lastModifiedDate":"2022-03-21"},{"lineNumber":38,"author":{"gitId":"warrencxw"},"content":"    static final double MAXIMUM_SURCHARGE_PERCENT \u003d 100;","lastModifiedDate":"2022-03-21"},{"lineNumber":39,"author":{"gitId":"warrencxw"},"content":"    ","lastModifiedDate":"2022-03-04"},{"lineNumber":40,"author":{"gitId":"warrencxw"},"content":"    // MAIN PUBLIC PARSING FUNCTIONS","lastModifiedDate":"2022-03-05"},{"lineNumber":41,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":42,"author":{"gitId":"warrencxw"},"content":"     * Returns a String object that represents a name, given the command arguments from user input, delimited by the","lastModifiedDate":"2022-03-13"},{"lineNumber":43,"author":{"gitId":"warrencxw"},"content":"     * Name delimiter.","lastModifiedDate":"2022-03-13"},{"lineNumber":44,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-03-13"},{"lineNumber":45,"author":{"gitId":"warrencxw"},"content":"     * @param commandArgs A String object containing the arguments portion of the entire command input from the user.","lastModifiedDate":"2022-03-13"},{"lineNumber":46,"author":{"gitId":"warrencxw"},"content":"     * @return A String object that represents a name.","lastModifiedDate":"2022-03-13"},{"lineNumber":47,"author":{"gitId":"warrencxw"},"content":"     * @throws InvalidFormatException If the Name delimiter is not found in the command arguments, or","lastModifiedDate":"2022-03-13"},{"lineNumber":48,"author":{"gitId":"warrencxw"},"content":"     *                                if no arguments representing a name were provided after the Name delimiter.","lastModifiedDate":"2022-03-13"},{"lineNumber":49,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":50,"author":{"gitId":"warrencxw"},"content":"    public static String parseName(String commandArgs) throws InvalidFormatException {","lastModifiedDate":"2022-03-05"},{"lineNumber":51,"author":{"gitId":"warrencxw"},"content":"        return ParserUtils.getArgumentFromDelimiter(commandArgs, ParserUtils.NAME_DELIMITER);","lastModifiedDate":"2022-03-20"},{"lineNumber":52,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-05"},{"lineNumber":53,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":54,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":55,"author":{"gitId":"warrencxw"},"content":"     * Returns a String array object that represents a list of names separated by whitespaces,","lastModifiedDate":"2022-03-13"},{"lineNumber":56,"author":{"gitId":"warrencxw"},"content":"     * given the command arguments from user input, delimited by the Person list delimiter.","lastModifiedDate":"2022-03-13"},{"lineNumber":57,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-13"},{"lineNumber":58,"author":{"gitId":"warrencxw"},"content":"     * @param commandArgs A String object containing the arguments portion of the entire command input from the user.","lastModifiedDate":"2022-03-13"},{"lineNumber":59,"author":{"gitId":"warrencxw"},"content":"     * @return A String array object that represents a list of names.","lastModifiedDate":"2022-03-13"},{"lineNumber":60,"author":{"gitId":"warrencxw"},"content":"     * @throws InvalidFormatException If the Person list delimiter is not found in the command arguments, or","lastModifiedDate":"2022-03-13"},{"lineNumber":61,"author":{"gitId":"warrencxw"},"content":"     *                                if no arguments representing a list of names were provided after the ","lastModifiedDate":"2022-03-13"},{"lineNumber":62,"author":{"gitId":"warrencxw"},"content":"     *                                Person list delimiter.","lastModifiedDate":"2022-03-13"},{"lineNumber":63,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":64,"author":{"gitId":"warrencxw"},"content":"    public static String[] parsePersonList(String commandArgs) throws InvalidFormatException {","lastModifiedDate":"2022-03-05"},{"lineNumber":65,"author":{"gitId":"warrencxw"},"content":"        String argument \u003d ParserUtils.getArgumentFromDelimiter(commandArgs, ParserUtils.PERSON_LIST_DELIMITER);","lastModifiedDate":"2022-03-20"},{"lineNumber":66,"author":{"gitId":"warrencxw"},"content":"        return argument.split(ParserUtils.REGEX_WHITESPACES_DELIMITER);","lastModifiedDate":"2022-03-20"},{"lineNumber":67,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-05"},{"lineNumber":68,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":69,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":70,"author":{"gitId":"warrencxw"},"content":"     * Returns a String array object that represents a list of names of involved persons separated by whitespaces,","lastModifiedDate":"2022-03-13"},{"lineNumber":71,"author":{"gitId":"warrencxw"},"content":"     * given the command arguments from user input, delimited by the Involved delimiter.","lastModifiedDate":"2022-03-13"},{"lineNumber":72,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-13"},{"lineNumber":73,"author":{"gitId":"warrencxw"},"content":"     * @param commandArgs A String object containing the arguments portion of the entire command input from the user.","lastModifiedDate":"2022-03-13"},{"lineNumber":74,"author":{"gitId":"warrencxw"},"content":"     * @return A String array object that represents a list of names of involved persons.","lastModifiedDate":"2022-03-13"},{"lineNumber":75,"author":{"gitId":"warrencxw"},"content":"     * @throws InvalidFormatException If the Involved delimiter is not found in the command arguments, or","lastModifiedDate":"2022-03-13"},{"lineNumber":76,"author":{"gitId":"warrencxw"},"content":"     *                                if no arguments representing a list of names were provided after the ","lastModifiedDate":"2022-03-13"},{"lineNumber":77,"author":{"gitId":"warrencxw"},"content":"     *                                Involved delimiter.","lastModifiedDate":"2022-03-13"},{"lineNumber":78,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":79,"author":{"gitId":"warrencxw"},"content":"    public static String[] parseInvolved(String commandArgs) throws InvalidFormatException {","lastModifiedDate":"2022-03-05"},{"lineNumber":80,"author":{"gitId":"warrencxw"},"content":"        String argument \u003d ParserUtils.getArgumentFromDelimiter(commandArgs, ParserUtils.INVOLVED_DELIMITER);","lastModifiedDate":"2022-03-20"},{"lineNumber":81,"author":{"gitId":"warrencxw"},"content":"        return argument.split(ParserUtils.REGEX_WHITESPACES_DELIMITER);","lastModifiedDate":"2022-03-20"},{"lineNumber":82,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-05"},{"lineNumber":83,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":84,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":85,"author":{"gitId":"warrencxw"},"content":"     * Returns a String object that represents a name of a payer, given the command arguments from user input, ","lastModifiedDate":"2022-03-13"},{"lineNumber":86,"author":{"gitId":"warrencxw"},"content":"     * delimited by the Payer delimiter.","lastModifiedDate":"2022-03-13"},{"lineNumber":87,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-13"},{"lineNumber":88,"author":{"gitId":"warrencxw"},"content":"     * @param commandArgs A String object containing the arguments portion of the entire command input from the user.","lastModifiedDate":"2022-03-13"},{"lineNumber":89,"author":{"gitId":"warrencxw"},"content":"     * @return A String object that represents a name of a payer.","lastModifiedDate":"2022-03-13"},{"lineNumber":90,"author":{"gitId":"warrencxw"},"content":"     * @throws InvalidFormatException If the Payer delimiter is not found in the command arguments,","lastModifiedDate":"2022-03-15"},{"lineNumber":91,"author":{"gitId":"warrencxw"},"content":"     *                                if no arguments representing a name were provided after the Payer delimiter, or","lastModifiedDate":"2022-03-15"},{"lineNumber":92,"author":{"gitId":"warrencxw"},"content":"     *                                if the argument contains more than a single name.","lastModifiedDate":"2022-03-15"},{"lineNumber":93,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":94,"author":{"gitId":"warrencxw"},"content":"    public static String parsePayer(String commandArgs) throws InvalidFormatException {","lastModifiedDate":"2022-03-05"},{"lineNumber":95,"author":{"gitId":"warrencxw"},"content":"        String payer \u003d ParserUtils.getArgumentFromDelimiter(commandArgs, ParserUtils.PAYER_DELIMITER);","lastModifiedDate":"2022-03-20"},{"lineNumber":96,"author":{"gitId":"warrencxw"},"content":"        if (payer.indexOf(\u0027 \u0027) !\u003d ParserUtils.INVALID_INDEX_INDICATOR) {","lastModifiedDate":"2022-03-20"},{"lineNumber":97,"author":{"gitId":"warrencxw"},"content":"            throw new InvalidFormatException(Message.ERROR_PARSER_MORE_THAN_ONE_PAYER);","lastModifiedDate":"2022-03-15"},{"lineNumber":98,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-15"},{"lineNumber":99,"author":{"gitId":"warrencxw"},"content":"        return payer;","lastModifiedDate":"2022-03-15"},{"lineNumber":100,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-05"},{"lineNumber":101,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":102,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":103,"author":{"gitId":"warrencxw"},"content":"     * Returns an integer that represents a session unique identifier, given the command arguments from user input, ","lastModifiedDate":"2022-03-13"},{"lineNumber":104,"author":{"gitId":"warrencxw"},"content":"     * delimited by the Session ID delimiter.","lastModifiedDate":"2022-03-13"},{"lineNumber":105,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-13"},{"lineNumber":106,"author":{"gitId":"warrencxw"},"content":"     * @param commandArgs A String object containing the arguments portion of the entire command input from the user.","lastModifiedDate":"2022-03-13"},{"lineNumber":107,"author":{"gitId":"warrencxw"},"content":"     * @return An integer that represents a session unique identifier.","lastModifiedDate":"2022-03-13"},{"lineNumber":108,"author":{"gitId":"warrencxw"},"content":"     * @throws InvalidFormatException If the Session ID delimiter is not found in the command arguments,","lastModifiedDate":"2022-03-15"},{"lineNumber":109,"author":{"gitId":"warrencxw"},"content":"     *                                if no arguments representing a session unique identifier were provided after the ","lastModifiedDate":"2022-03-13"},{"lineNumber":110,"author":{"gitId":"warrencxw"},"content":"     *                                Session ID delimiter,","lastModifiedDate":"2022-03-15"},{"lineNumber":111,"author":{"gitId":"warrencxw"},"content":"     *                                if the parsed argument cannot be parsed as an integer, or","lastModifiedDate":"2022-03-15"},{"lineNumber":112,"author":{"gitId":"warrencxw"},"content":"     *                                if the integer parsed from the argument is not a positive integer.","lastModifiedDate":"2022-03-15"},{"lineNumber":113,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":114,"author":{"gitId":"warrencxw"},"content":"    public static int parseSessionId(String commandArgs) throws InvalidFormatException {","lastModifiedDate":"2022-03-05"},{"lineNumber":115,"author":{"gitId":"warrencxw"},"content":"        String argument \u003d ParserUtils.getArgumentFromDelimiter(commandArgs, ParserUtils.SESSION_ID_DELIMITER);","lastModifiedDate":"2022-03-20"},{"lineNumber":116,"author":{"gitId":"warrencxw"},"content":"        return ParserUtils.parseIdFromString(argument, ParserUtils.SESSION_ID_DELIMITER);","lastModifiedDate":"2022-03-20"},{"lineNumber":117,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-05"},{"lineNumber":118,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":119,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":120,"author":{"gitId":"warrencxw"},"content":"     * Returns an integer that represents an activity unique identifier, given the command arguments from user input, ","lastModifiedDate":"2022-03-13"},{"lineNumber":121,"author":{"gitId":"warrencxw"},"content":"     * delimited by the Activity ID delimiter.","lastModifiedDate":"2022-03-13"},{"lineNumber":122,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-13"},{"lineNumber":123,"author":{"gitId":"warrencxw"},"content":"     * @param commandArgs A String object containing the arguments portion of the entire command input from the user.","lastModifiedDate":"2022-03-13"},{"lineNumber":124,"author":{"gitId":"warrencxw"},"content":"     * @return An integer that represents an activity unique identifier.","lastModifiedDate":"2022-03-13"},{"lineNumber":125,"author":{"gitId":"warrencxw"},"content":"     * @throws InvalidFormatException If the Activity ID delimiter is not found in the command arguments,","lastModifiedDate":"2022-03-15"},{"lineNumber":126,"author":{"gitId":"warrencxw"},"content":"     *                                if no arguments representing an activity unique identifier were provided after ","lastModifiedDate":"2022-03-13"},{"lineNumber":127,"author":{"gitId":"warrencxw"},"content":"     *                                the Activity ID delimiter,","lastModifiedDate":"2022-03-15"},{"lineNumber":128,"author":{"gitId":"warrencxw"},"content":"     *                                if the parsed argument cannot be parsed as an integer, or","lastModifiedDate":"2022-03-15"},{"lineNumber":129,"author":{"gitId":"warrencxw"},"content":"     *                                if the integer parsed from the argument is not a positive integer.","lastModifiedDate":"2022-03-15"},{"lineNumber":130,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":131,"author":{"gitId":"warrencxw"},"content":"    public static int parseActivityId(String commandArgs) throws InvalidFormatException {","lastModifiedDate":"2022-03-05"},{"lineNumber":132,"author":{"gitId":"warrencxw"},"content":"        String argument \u003d ParserUtils.getArgumentFromDelimiter(commandArgs, ParserUtils.ACTIVITY_ID_DELIMITER);","lastModifiedDate":"2022-03-20"},{"lineNumber":133,"author":{"gitId":"warrencxw"},"content":"        return ParserUtils.parseIdFromString(argument, ParserUtils.ACTIVITY_ID_DELIMITER);","lastModifiedDate":"2022-03-20"},{"lineNumber":134,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-05"},{"lineNumber":135,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":136,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-18"},{"lineNumber":137,"author":{"gitId":"warrencxw"},"content":"     * Returns an integer that represents a group unique identifier, given the command arguments from user input, ","lastModifiedDate":"2022-03-18"},{"lineNumber":138,"author":{"gitId":"warrencxw"},"content":"     * delimited by the Group ID delimiter.","lastModifiedDate":"2022-03-18"},{"lineNumber":139,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-18"},{"lineNumber":140,"author":{"gitId":"warrencxw"},"content":"     * @param commandArgs A String object containing the arguments portion of the entire command input from the user.","lastModifiedDate":"2022-03-18"},{"lineNumber":141,"author":{"gitId":"warrencxw"},"content":"     * @return An integer that represents a group unique identifier.","lastModifiedDate":"2022-03-18"},{"lineNumber":142,"author":{"gitId":"warrencxw"},"content":"     * @throws InvalidFormatException If the Group ID delimiter is not found in the command arguments,","lastModifiedDate":"2022-03-18"},{"lineNumber":143,"author":{"gitId":"warrencxw"},"content":"     *                                if no arguments representing a group unique identifier were provided after ","lastModifiedDate":"2022-03-18"},{"lineNumber":144,"author":{"gitId":"warrencxw"},"content":"     *                                the Group ID delimiter,","lastModifiedDate":"2022-03-18"},{"lineNumber":145,"author":{"gitId":"warrencxw"},"content":"     *                                if the parsed argument cannot be parsed as an integer, or","lastModifiedDate":"2022-03-18"},{"lineNumber":146,"author":{"gitId":"warrencxw"},"content":"     *                                if the integer parsed from the argument is not a positive integer.","lastModifiedDate":"2022-03-18"},{"lineNumber":147,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-18"},{"lineNumber":148,"author":{"gitId":"warrencxw"},"content":"    public static int parseGroupId(String commandArgs) throws InvalidFormatException {","lastModifiedDate":"2022-03-18"},{"lineNumber":149,"author":{"gitId":"warrencxw"},"content":"        String argument \u003d ParserUtils.getArgumentFromDelimiter(commandArgs, ParserUtils.GROUP_ID_DELIMITER);","lastModifiedDate":"2022-03-20"},{"lineNumber":150,"author":{"gitId":"warrencxw"},"content":"        return ParserUtils.parseIdFromString(argument, ParserUtils.GROUP_ID_DELIMITER);","lastModifiedDate":"2022-03-20"},{"lineNumber":151,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":152,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":153,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":154,"author":{"gitId":"warrencxw"},"content":"     * Returns a LocalDate object that represents a date, given the command arguments from user input, ","lastModifiedDate":"2022-03-13"},{"lineNumber":155,"author":{"gitId":"warrencxw"},"content":"     * delimited by the Date delimiter.","lastModifiedDate":"2022-03-13"},{"lineNumber":156,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-13"},{"lineNumber":157,"author":{"gitId":"warrencxw"},"content":"     * @param commandArgs A String object containing the arguments portion of the entire command input from the user.","lastModifiedDate":"2022-03-13"},{"lineNumber":158,"author":{"gitId":"warrencxw"},"content":"     * @return A LocalDate object that represents a date specified by the argument in the format of \u0027DD-MM-YYYY\u0027 or","lastModifiedDate":"2022-03-13"},{"lineNumber":159,"author":{"gitId":"warrencxw"},"content":"     *         the current date if the argument following the Date delimiter indicates \"today\".","lastModifiedDate":"2022-03-13"},{"lineNumber":160,"author":{"gitId":"warrencxw"},"content":"     * @throws InvalidFormatException If the Date delimiter is not found in the command arguments,","lastModifiedDate":"2022-03-13"},{"lineNumber":161,"author":{"gitId":"warrencxw"},"content":"     *                                if no arguments representing a date were provided after the ","lastModifiedDate":"2022-03-13"},{"lineNumber":162,"author":{"gitId":"warrencxw"},"content":"     *                                Date delimiter, or","lastModifiedDate":"2022-03-13"},{"lineNumber":163,"author":{"gitId":"warrencxw"},"content":"     *                                if the argument provided does not indicate \"today\" nor follow the date format of","lastModifiedDate":"2022-03-13"},{"lineNumber":164,"author":{"gitId":"warrencxw"},"content":"     *                                \u0027DD-MM-YYYY\u0027.","lastModifiedDate":"2022-03-13"},{"lineNumber":165,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":166,"author":{"gitId":"warrencxw"},"content":"    public static LocalDate parseLocalDate(String commandArgs) throws InvalidFormatException {","lastModifiedDate":"2022-03-05"},{"lineNumber":167,"author":{"gitId":"warrencxw"},"content":"        if (!ParserUtils.hasDelimiter(commandArgs, ParserUtils.DATE_DELIMITER)) {","lastModifiedDate":"2022-03-20"},{"lineNumber":168,"author":{"gitId":"warrencxw"},"content":"            throw new InvalidFormatException(ParserErrors.getMissingDelimiterErrorMessage(ParserUtils.DATE_DELIMITER));","lastModifiedDate":"2022-03-20"},{"lineNumber":169,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-05"},{"lineNumber":170,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":171,"author":{"gitId":"warrencxw"},"content":"        String argument \u003d ParserUtils.getArgumentFromDelimiter(commandArgs, ParserUtils.DATE_DELIMITER);","lastModifiedDate":"2022-03-20"},{"lineNumber":172,"author":{"gitId":"warrencxw"},"content":"        if (argument.equalsIgnoreCase(LOCALDATE_TODAY_INDICATOR)) {","lastModifiedDate":"2022-03-12"},{"lineNumber":173,"author":{"gitId":"warrencxw"},"content":"            return LocalDate.now();","lastModifiedDate":"2022-03-05"},{"lineNumber":174,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-05"},{"lineNumber":175,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-12"},{"lineNumber":176,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-12"},{"lineNumber":177,"author":{"gitId":"warrencxw"},"content":"            return LocalDate.parse(argument, ParserUtils.DATE_FORMAT);","lastModifiedDate":"2022-03-20"},{"lineNumber":178,"author":{"gitId":"warrencxw"},"content":"        } catch (DateTimeParseException exception) {","lastModifiedDate":"2022-03-12"},{"lineNumber":179,"author":{"gitId":"warrencxw"},"content":"            throw new InvalidFormatException(Message.ERROR_PARSER_INVALID_DATE_FORMAT);","lastModifiedDate":"2022-03-12"},{"lineNumber":180,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-12"},{"lineNumber":181,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-05"},{"lineNumber":182,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":183,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":184,"author":{"gitId":"warrencxw"},"content":"     * Returns a double that represents a single total cost, given the command arguments from user input, ","lastModifiedDate":"2022-03-13"},{"lineNumber":185,"author":{"gitId":"warrencxw"},"content":"     * delimited by the Total cost delimiter.","lastModifiedDate":"2022-03-13"},{"lineNumber":186,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-13"},{"lineNumber":187,"author":{"gitId":"warrencxw"},"content":"     * @param commandArgs A String object containing the arguments portion of the entire command input from the user.","lastModifiedDate":"2022-03-13"},{"lineNumber":188,"author":{"gitId":"warrencxw"},"content":"     * @return A double that represents a single total cost.","lastModifiedDate":"2022-03-13"},{"lineNumber":189,"author":{"gitId":"warrencxw"},"content":"     * @throws InvalidFormatException If the Total cost delimiter is not found in the command arguments,","lastModifiedDate":"2022-03-13"},{"lineNumber":190,"author":{"gitId":"warrencxw"},"content":"     *                                if no arguments representing a total cost were provided after the ","lastModifiedDate":"2022-03-13"},{"lineNumber":191,"author":{"gitId":"warrencxw"},"content":"     *                                Total cost delimiter,","lastModifiedDate":"2022-03-15"},{"lineNumber":192,"author":{"gitId":"warrencxw"},"content":"     *                                if the arguments cannot be parsed as a double,","lastModifiedDate":"2022-03-18"},{"lineNumber":193,"author":{"gitId":"warrencxw"},"content":"     *                                if the parsed cost value is not positive,","lastModifiedDate":"2022-03-18"},{"lineNumber":194,"author":{"gitId":"warrencxw"},"content":"     *                                if the parsed cost value has more than 2 decimal points, or","lastModifiedDate":"2022-03-18"},{"lineNumber":195,"author":{"gitId":"warrencxw"},"content":"     *                                if the parsed cost value has more than 12 digits before the decimal point.","lastModifiedDate":"2022-03-18"},{"lineNumber":196,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":197,"author":{"gitId":"warrencxw"},"content":"    public static double parseTotalCost(String commandArgs) throws InvalidFormatException {","lastModifiedDate":"2022-03-05"},{"lineNumber":198,"author":{"gitId":"warrencxw"},"content":"        String argument \u003d ParserUtils.getArgumentFromDelimiter(commandArgs, ParserUtils.TOTAL_COST_DELIMITER);","lastModifiedDate":"2022-03-20"},{"lineNumber":199,"author":{"gitId":"warrencxw"},"content":"        return ParserUtils.parseCostFromString(argument, ParserUtils.TOTAL_COST_DELIMITER);","lastModifiedDate":"2022-03-20"},{"lineNumber":200,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-05"},{"lineNumber":201,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":202,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":203,"author":{"gitId":"warrencxw"},"content":"     * Returns a double array object that represents a list of cost values, given the command arguments from ","lastModifiedDate":"2022-03-13"},{"lineNumber":204,"author":{"gitId":"warrencxw"},"content":"     * user input, delimited by the Cost list delimiter.","lastModifiedDate":"2022-03-13"},{"lineNumber":205,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-13"},{"lineNumber":206,"author":{"gitId":"warrencxw"},"content":"     * @param commandArgs A String object containing the arguments portion of the entire command input from the user.","lastModifiedDate":"2022-03-13"},{"lineNumber":207,"author":{"gitId":"warrencxw"},"content":"     * @return A double array object that represents a list of cost values.","lastModifiedDate":"2022-03-13"},{"lineNumber":208,"author":{"gitId":"warrencxw"},"content":"     * @throws InvalidFormatException If the Cost list delimiter is not found in the command arguments,","lastModifiedDate":"2022-03-13"},{"lineNumber":209,"author":{"gitId":"warrencxw"},"content":"     *                                if no arguments representing a list of cost values were provided after the ","lastModifiedDate":"2022-03-13"},{"lineNumber":210,"author":{"gitId":"warrencxw"},"content":"     *                                Cost list delimiter,","lastModifiedDate":"2022-03-15"},{"lineNumber":211,"author":{"gitId":"warrencxw"},"content":"     *                                if any token in the argument cannot be parsed as a double, or","lastModifiedDate":"2022-03-15"},{"lineNumber":212,"author":{"gitId":"warrencxw"},"content":"     *                                if any cost value parsed is not positive,","lastModifiedDate":"2022-03-18"},{"lineNumber":213,"author":{"gitId":"warrencxw"},"content":"     *                                if any parsed cost value has more than 2 decimal points, or","lastModifiedDate":"2022-03-18"},{"lineNumber":214,"author":{"gitId":"warrencxw"},"content":"     *                                if any parsed cost value has more than 12 digits before the decimal point.","lastModifiedDate":"2022-03-18"},{"lineNumber":215,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":216,"author":{"gitId":"warrencxw"},"content":"    public static double[] parseCostList(String commandArgs) throws InvalidFormatException {","lastModifiedDate":"2022-03-05"},{"lineNumber":217,"author":{"gitId":"warrencxw"},"content":"        String argument \u003d ParserUtils.getArgumentFromDelimiter(commandArgs, ParserUtils.COST_LIST_DELIMITER);","lastModifiedDate":"2022-03-20"},{"lineNumber":218,"author":{"gitId":"warrencxw"},"content":"        String[] costStrings \u003d argument.split(ParserUtils.REGEX_WHITESPACES_DELIMITER);","lastModifiedDate":"2022-03-20"},{"lineNumber":219,"author":{"gitId":"warrencxw"},"content":"        double[] costs \u003d new double[costStrings.length];","lastModifiedDate":"2022-03-05"},{"lineNumber":220,"author":{"gitId":"warrencxw"},"content":"        for (int i \u003d 0; i \u003c costStrings.length; i++) {","lastModifiedDate":"2022-03-05"},{"lineNumber":221,"author":{"gitId":"warrencxw"},"content":"            costs[i] \u003d ParserUtils.parseCostFromString(costStrings[i], ParserUtils.COST_LIST_DELIMITER);","lastModifiedDate":"2022-03-20"},{"lineNumber":222,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-05"},{"lineNumber":223,"author":{"gitId":"warrencxw"},"content":"        return costs;","lastModifiedDate":"2022-03-05"},{"lineNumber":224,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-05"},{"lineNumber":225,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":226,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":227,"author":{"gitId":"warrencxw"},"content":"     * Returns a double that represents the GST charge in percents, given the command arguments from user input, ","lastModifiedDate":"2022-03-21"},{"lineNumber":228,"author":{"gitId":"warrencxw"},"content":"     * delimited by the GST delimiter.","lastModifiedDate":"2022-03-13"},{"lineNumber":229,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-13"},{"lineNumber":230,"author":{"gitId":"warrencxw"},"content":"     * @param commandArgs A String object containing the arguments portion of the entire command input from the user.","lastModifiedDate":"2022-03-13"},{"lineNumber":231,"author":{"gitId":"warrencxw"},"content":"     * @return A double that represents a GST charge in percents.","lastModifiedDate":"2022-03-21"},{"lineNumber":232,"author":{"gitId":"warrencxw"},"content":"     * @throws InvalidFormatException If no arguments representing a GST charge were provided after the ","lastModifiedDate":"2022-03-18"},{"lineNumber":233,"author":{"gitId":"warrencxw"},"content":"     *                                GST delimiter,","lastModifiedDate":"2022-03-13"},{"lineNumber":234,"author":{"gitId":"warrencxw"},"content":"     *                                if the argument cannot be parsed as a double,","lastModifiedDate":"2022-03-21"},{"lineNumber":235,"author":{"gitId":"warrencxw"},"content":"     *                                if the parsed percentage has more than 2 decimal points,","lastModifiedDate":"2022-03-21"},{"lineNumber":236,"author":{"gitId":"warrencxw"},"content":"     *                                if the parsed percentage has more than 3 digits before the decimal point, or","lastModifiedDate":"2022-03-21"},{"lineNumber":237,"author":{"gitId":"warrencxw"},"content":"     *                                if the parsed percentage is not in [0, 100].","lastModifiedDate":"2022-03-21"},{"lineNumber":238,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":239,"author":{"gitId":"warrencxw"},"content":"    public static double parseGst(String commandArgs) throws InvalidFormatException {","lastModifiedDate":"2022-03-21"},{"lineNumber":240,"author":{"gitId":"warrencxw"},"content":"        if (!ParserUtils.hasDelimiter(commandArgs, ParserUtils.GST_DELIMITER)) {","lastModifiedDate":"2022-03-20"},{"lineNumber":241,"author":{"gitId":"warrencxw"},"content":"            return 0;","lastModifiedDate":"2022-03-05"},{"lineNumber":242,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-05"},{"lineNumber":243,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":244,"author":{"gitId":"warrencxw"},"content":"        String argument \u003d ParserUtils.getArgumentFromDelimiter(commandArgs, ParserUtils.GST_DELIMITER);","lastModifiedDate":"2022-03-20"},{"lineNumber":245,"author":{"gitId":"warrencxw"},"content":"        double gst \u003d ParserUtils.parsePercentageFromString(argument, ParserUtils.GST_DELIMITER);","lastModifiedDate":"2022-03-21"},{"lineNumber":246,"author":{"gitId":"warrencxw"},"content":"        assert gst \u003e\u003d 0 : Message.ASSERT_PARSER_PERCENTAGE_NEGATIVE;","lastModifiedDate":"2022-03-25"},{"lineNumber":247,"author":{"gitId":"warrencxw"},"content":"        if (gst \u003e MAXIMUM_SURCHARGE_PERCENT) {","lastModifiedDate":"2022-03-25"},{"lineNumber":248,"author":{"gitId":"warrencxw"},"content":"            throw new InvalidFormatException(ParserErrors.getInvalidGstErrorMessage());","lastModifiedDate":"2022-03-20"},{"lineNumber":249,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-05"},{"lineNumber":250,"author":{"gitId":"warrencxw"},"content":"        return gst;","lastModifiedDate":"2022-03-05"},{"lineNumber":251,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-05"},{"lineNumber":252,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":253,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":254,"author":{"gitId":"warrencxw"},"content":"     * Returns a double that represents the service charge in percents, given the command arguments from user input, ","lastModifiedDate":"2022-03-21"},{"lineNumber":255,"author":{"gitId":"warrencxw"},"content":"     * delimited by the Service charge delimiter.","lastModifiedDate":"2022-03-13"},{"lineNumber":256,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-13"},{"lineNumber":257,"author":{"gitId":"warrencxw"},"content":"     * @param commandArgs A String object containing the arguments portion of the entire command input from the user.","lastModifiedDate":"2022-03-13"},{"lineNumber":258,"author":{"gitId":"warrencxw"},"content":"     * @return A double that represents a service charge in percents.","lastModifiedDate":"2022-03-21"},{"lineNumber":259,"author":{"gitId":"warrencxw"},"content":"     * @throws InvalidFormatException If no arguments representing a service charge were provided after the ","lastModifiedDate":"2022-03-18"},{"lineNumber":260,"author":{"gitId":"warrencxw"},"content":"     *                                Service charge delimiter,","lastModifiedDate":"2022-03-13"},{"lineNumber":261,"author":{"gitId":"warrencxw"},"content":"     *                                if the argument cannot be parsed as a double,","lastModifiedDate":"2022-03-21"},{"lineNumber":262,"author":{"gitId":"warrencxw"},"content":"     *                                if the parsed percentage has more than 2 decimal points,","lastModifiedDate":"2022-03-21"},{"lineNumber":263,"author":{"gitId":"warrencxw"},"content":"     *                                if the parsed percentage has more than 3 digits before the decimal point, or","lastModifiedDate":"2022-03-21"},{"lineNumber":264,"author":{"gitId":"warrencxw"},"content":"     *                                if the parsed percentage is not in [0, 100].","lastModifiedDate":"2022-03-21"},{"lineNumber":265,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":266,"author":{"gitId":"warrencxw"},"content":"    public static double parseServiceCharge(String commandArgs) throws InvalidFormatException {","lastModifiedDate":"2022-03-21"},{"lineNumber":267,"author":{"gitId":"warrencxw"},"content":"        if (!ParserUtils.hasDelimiter(commandArgs, ParserUtils.SERVICE_CHARGE_DELIMITER)) {","lastModifiedDate":"2022-03-20"},{"lineNumber":268,"author":{"gitId":"warrencxw"},"content":"            return 0;","lastModifiedDate":"2022-03-05"},{"lineNumber":269,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-05"},{"lineNumber":270,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":271,"author":{"gitId":"warrencxw"},"content":"        String argument \u003d ParserUtils.getArgumentFromDelimiter(commandArgs, ParserUtils.SERVICE_CHARGE_DELIMITER);","lastModifiedDate":"2022-03-20"},{"lineNumber":272,"author":{"gitId":"warrencxw"},"content":"        double serviceCharge \u003d ParserUtils.parsePercentageFromString(argument, ParserUtils.SERVICE_CHARGE_DELIMITER);","lastModifiedDate":"2022-03-21"},{"lineNumber":273,"author":{"gitId":"warrencxw"},"content":"        assert serviceCharge \u003e\u003d 0 : Message.ASSERT_PARSER_PERCENTAGE_NEGATIVE;","lastModifiedDate":"2022-03-25"},{"lineNumber":274,"author":{"gitId":"warrencxw"},"content":"        if (serviceCharge \u003e MAXIMUM_SURCHARGE_PERCENT) {","lastModifiedDate":"2022-03-25"},{"lineNumber":275,"author":{"gitId":"warrencxw"},"content":"            throw new InvalidFormatException(ParserErrors.getInvalidServiceChargeErrorMessage());","lastModifiedDate":"2022-03-20"},{"lineNumber":276,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-05"},{"lineNumber":277,"author":{"gitId":"warrencxw"},"content":"        return serviceCharge;","lastModifiedDate":"2022-03-05"},{"lineNumber":278,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-05"},{"lineNumber":279,"author":{"gitId":"warrencxw"},"content":"    ","lastModifiedDate":"2022-03-05"},{"lineNumber":280,"author":{"gitId":"warrencxw"},"content":"    // COMMAND PARSING METHODS","lastModifiedDate":"2022-03-05"},{"lineNumber":281,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":282,"author":{"gitId":"warrencxw"},"content":"     * Returns a String object containing the arguments portion of the entire command input from the user.\u003cbr\u003e","lastModifiedDate":"2022-03-13"},{"lineNumber":283,"author":{"gitId":"warrencxw"},"content":"     * E.g. Returns \"/n Lunch /d 11-03-2022 /pl Warren Ivan Roy\" where","lastModifiedDate":"2022-03-13"},{"lineNumber":284,"author":{"gitId":"warrencxw"},"content":"     *      commandString \u003d \"session /create /n Lunch /d 11-03-2022 /pl Warren Ivan Roy\"","lastModifiedDate":"2022-03-13"},{"lineNumber":285,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-03-13"},{"lineNumber":286,"author":{"gitId":"warrencxw"},"content":"     * @param commandString A String object that contains the entire command input provided by the user.","lastModifiedDate":"2022-03-13"},{"lineNumber":287,"author":{"gitId":"warrencxw"},"content":"     * @return A String object containing the arguments portion of the entire command input from the user if any,","lastModifiedDate":"2022-03-13"},{"lineNumber":288,"author":{"gitId":"warrencxw"},"content":"     *         an empty String object otherwise.","lastModifiedDate":"2022-03-13"},{"lineNumber":289,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":290,"author":{"gitId":"warrencxw"},"content":"    public static String getRemainingArgument(String commandString) {","lastModifiedDate":"2022-03-13"},{"lineNumber":291,"author":{"gitId":"warrencxw"},"content":"        String[] commandTokens \u003d","lastModifiedDate":"2022-03-20"},{"lineNumber":292,"author":{"gitId":"warrencxw"},"content":"                commandString.trim().split(ParserUtils.REGEX_WHITESPACES_DELIMITER, COMMAND_WITH_ARGS_TOKEN_COUNT);","lastModifiedDate":"2022-03-20"},{"lineNumber":293,"author":{"gitId":"warrencxw"},"content":"        if (commandTokens.length \u003c COMMAND_WITH_ARGS_TOKEN_COUNT) {","lastModifiedDate":"2022-03-05"},{"lineNumber":294,"author":{"gitId":"warrencxw"},"content":"            return \"\";","lastModifiedDate":"2022-03-09"},{"lineNumber":295,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-05"},{"lineNumber":296,"author":{"gitId":"warrencxw"},"content":"        return commandTokens[2];","lastModifiedDate":"2022-03-05"},{"lineNumber":297,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-05"},{"lineNumber":298,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":299,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":300,"author":{"gitId":"warrencxw"},"content":"     * Returns a String object containing the command type portion of the entire command input from the user.\u003cbr\u003e","lastModifiedDate":"2022-03-13"},{"lineNumber":301,"author":{"gitId":"warrencxw"},"content":"     * E.g. Returns \"session /create\" where","lastModifiedDate":"2022-03-13"},{"lineNumber":302,"author":{"gitId":"warrencxw"},"content":"     *      commandString \u003d \"session /create /n Lunch /d 11-03-2022 /pl Warren Ivan Roy\"","lastModifiedDate":"2022-03-13"},{"lineNumber":303,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-13"},{"lineNumber":304,"author":{"gitId":"warrencxw"},"content":"     * @param commandString A String object that contains the entire command input provided by the user.","lastModifiedDate":"2022-03-13"},{"lineNumber":305,"author":{"gitId":"warrencxw"},"content":"     * @return A String object containing the command type portion of the entire command input from the user if valid,","lastModifiedDate":"2022-03-13"},{"lineNumber":306,"author":{"gitId":"warrencxw"},"content":"     *         null otherwise.","lastModifiedDate":"2022-03-13"},{"lineNumber":307,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":308,"author":{"gitId":"warrencxw"},"content":"    public static String getCommandType(String commandString) {","lastModifiedDate":"2022-03-13"},{"lineNumber":309,"author":{"gitId":"warrencxw"},"content":"        String[] commandTokens \u003d","lastModifiedDate":"2022-03-20"},{"lineNumber":310,"author":{"gitId":"warrencxw"},"content":"                commandString.trim().split(ParserUtils.REGEX_WHITESPACES_DELIMITER, COMMAND_WITH_ARGS_TOKEN_COUNT);","lastModifiedDate":"2022-03-20"},{"lineNumber":311,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-06"},{"lineNumber":312,"author":{"gitId":"warrencxw"},"content":"        if (commandTokens.length \u003c DELIMITERED_COMMAND_MIN_TOKEN_COUNT) {","lastModifiedDate":"2022-03-06"},{"lineNumber":313,"author":{"gitId":"froststein"},"content":"            return commandTokens[0];","lastModifiedDate":"2022-03-05"},{"lineNumber":314,"author":{"gitId":"warrencxw"},"content":"        } else if (!commandTokens[1].startsWith(ParserUtils.DELIMITER_INDICATOR)) {","lastModifiedDate":"2022-03-20"},{"lineNumber":315,"author":{"gitId":"warrencxw"},"content":"            return null;","lastModifiedDate":"2022-03-05"},{"lineNumber":316,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-05"},{"lineNumber":317,"author":{"gitId":"warrencxw"},"content":"        return commandTokens[0] + \" \" + commandTokens[1];","lastModifiedDate":"2022-03-05"},{"lineNumber":318,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-05"},{"lineNumber":319,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":320,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-13"},{"lineNumber":321,"author":{"gitId":"warrencxw"},"content":"     * Returns a Command object that corresponds to the String object representing the input provided by the user.","lastModifiedDate":"2022-03-13"},{"lineNumber":322,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-03-13"},{"lineNumber":323,"author":{"gitId":"warrencxw"},"content":"     * @param input A String object representing the input entered by the user of SplitLah.","lastModifiedDate":"2022-03-13"},{"lineNumber":324,"author":{"gitId":"warrencxw"},"content":"     * @return A Command object that performs the task specified by the user if the syntax of the input is valid,","lastModifiedDate":"2022-03-13"},{"lineNumber":325,"author":{"gitId":"warrencxw"},"content":"     *         an InvalidCommand object that prints an error message otherwise.","lastModifiedDate":"2022-03-13"},{"lineNumber":326,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-13"},{"lineNumber":327,"author":{"gitId":"warrencxw"},"content":"    public static Command getCommand(String input) {","lastModifiedDate":"2022-03-05"},{"lineNumber":328,"author":{"gitId":"warrencxw"},"content":"        String commandType \u003d getCommandType(input);","lastModifiedDate":"2022-03-05"},{"lineNumber":329,"author":{"gitId":"warrencxw"},"content":"        String remainingArgs \u003d getRemainingArgument(input);","lastModifiedDate":"2022-03-05"},{"lineNumber":330,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-05"},{"lineNumber":331,"author":{"gitId":"warrencxw"},"content":"        if (commandType \u003d\u003d null) {","lastModifiedDate":"2022-03-05"},{"lineNumber":332,"author":{"gitId":"warrencxw"},"content":"            return new InvalidCommand(Message.ERROR_PARSER_INVALID_COMMAND);","lastModifiedDate":"2022-03-06"},{"lineNumber":333,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-06"},{"lineNumber":334,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-06"},{"lineNumber":335,"author":{"gitId":"warrencxw"},"content":"        String errorMessage \u003d ParserUtils.checkIfCommandIsValid(commandType, remainingArgs);","lastModifiedDate":"2022-03-20"},{"lineNumber":336,"author":{"gitId":"warrencxw"},"content":"        if (!errorMessage.isEmpty()) {","lastModifiedDate":"2022-03-15"},{"lineNumber":337,"author":{"gitId":"warrencxw"},"content":"            return new InvalidCommand(errorMessage);","lastModifiedDate":"2022-03-15"},{"lineNumber":338,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-05"},{"lineNumber":339,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-05"},{"lineNumber":340,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-22"},{"lineNumber":341,"author":{"gitId":"warrencxw"},"content":"            switch (commandType.toLowerCase()) {","lastModifiedDate":"2022-03-12"},{"lineNumber":342,"author":{"gitId":"froststein"},"content":"            case SessionCreateCommandParser.COMMAND_TEXT:","lastModifiedDate":"2022-03-25"},{"lineNumber":343,"author":{"gitId":"froststein"},"content":"                return new SessionCreateCommandParser().getCommand(remainingArgs);","lastModifiedDate":"2022-03-25"},{"lineNumber":344,"author":{"gitId":"warrencxw"},"content":"            case SessionDeleteCommand.COMMAND_TEXT:","lastModifiedDate":"2022-03-06"},{"lineNumber":345,"author":{"gitId":"froststein"},"content":"                return SessionDeleteCommand.prepare(remainingArgs);","lastModifiedDate":"2022-03-09"},{"lineNumber":346,"author":{"gitId":"warrencxw"},"content":"            case SessionSummaryCommandParser.COMMAND_TEXT:","lastModifiedDate":"2022-03-22"},{"lineNumber":347,"author":{"gitId":"warrencxw"},"content":"                return new SessionSummaryCommandParser().getCommand(remainingArgs);","lastModifiedDate":"2022-03-22"},{"lineNumber":348,"author":{"gitId":"froststein"},"content":"            case SessionListCommandParser.COMMAND_TEXT:","lastModifiedDate":"2022-03-23"},{"lineNumber":349,"author":{"gitId":"froststein"},"content":"                return new SessionListCommandParser().getCommand(remainingArgs);","lastModifiedDate":"2022-03-23"},{"lineNumber":350,"author":{"gitId":"ivanaitzliddat"},"content":"            case ActivityCreateCommandParser.COMMAND_TEXT:","lastModifiedDate":"2022-03-24"},{"lineNumber":351,"author":{"gitId":"ivanaitzliddat"},"content":"                return new ActivityCreateCommandParser().getCommand(remainingArgs);","lastModifiedDate":"2022-03-24"},{"lineNumber":352,"author":{"gitId":"warrencxw"},"content":"            case ActivityDeleteCommand.COMMAND_TEXT:","lastModifiedDate":"2022-03-12"},{"lineNumber":353,"author":{"gitId":"ivanaitzliddat"},"content":"                return ActivityDeleteCommand.prepare(remainingArgs);","lastModifiedDate":"2022-03-12"},{"lineNumber":354,"author":{"gitId":"warrencxw"},"content":"            case ActivityListCommand.COMMAND_TEXT:","lastModifiedDate":"2022-03-06"},{"lineNumber":355,"author":{"gitId":"lelerer"},"content":"                return ActivityListCommand.prepare(remainingArgs);","lastModifiedDate":"2022-03-12"},{"lineNumber":356,"author":{"gitId":"warrencxw"},"content":"            case ActivityViewCommand.COMMAND_TEXT:","lastModifiedDate":"2022-03-06"},{"lineNumber":357,"author":{"gitId":"lelerer"},"content":"                return ActivityViewCommand.prepare(remainingArgs);","lastModifiedDate":"2022-03-12"},{"lineNumber":358,"author":{"gitId":"lelerer"},"content":"            case GroupCreateCommand.COMMAND_TEXT:","lastModifiedDate":"2022-03-18"},{"lineNumber":359,"author":{"gitId":"lelerer"},"content":"                return GroupCreateCommand.prepare(remainingArgs);","lastModifiedDate":"2022-03-18"},{"lineNumber":360,"author":{"gitId":"lelerer"},"content":"            case GroupDeleteCommand.COMMAND_TEXT:","lastModifiedDate":"2022-03-19"},{"lineNumber":361,"author":{"gitId":"lelerer"},"content":"                return GroupDeleteCommand.prepare(remainingArgs);","lastModifiedDate":"2022-03-19"},{"lineNumber":362,"author":{"gitId":"ivanaitzliddat"},"content":"            case GroupListCommand.COMMAND_TEXT:","lastModifiedDate":"2022-03-21"},{"lineNumber":363,"author":{"gitId":"ivanaitzliddat"},"content":"                return new GroupListCommand();","lastModifiedDate":"2022-03-21"},{"lineNumber":364,"author":{"gitId":"ivanaitzliddat"},"content":"            case GroupViewCommand.COMMAND_TEXT:","lastModifiedDate":"2022-03-20"},{"lineNumber":365,"author":{"gitId":"ivanaitzliddat"},"content":"                return GroupViewCommand.prepare(remainingArgs);","lastModifiedDate":"2022-03-20"},{"lineNumber":366,"author":{"gitId":"warrencxw"},"content":"            case HelpCommandParser.COMMAND_TEXT:","lastModifiedDate":"2022-03-22"},{"lineNumber":367,"author":{"gitId":"warrencxw"},"content":"                return new HelpCommandParser().getCommand(remainingArgs);","lastModifiedDate":"2022-03-22"},{"lineNumber":368,"author":{"gitId":"froststein"},"content":"            case ExitCommand.COMMAND_TEXT:","lastModifiedDate":"2022-03-05"},{"lineNumber":369,"author":{"gitId":"froststein"},"content":"                return new ExitCommand();","lastModifiedDate":"2022-03-05"},{"lineNumber":370,"author":{"gitId":"warrencxw"},"content":"            default:","lastModifiedDate":"2022-03-05"},{"lineNumber":371,"author":{"gitId":"warrencxw"},"content":"                return new InvalidCommand(Message.ERROR_PARSER_INVALID_COMMAND);","lastModifiedDate":"2022-03-05"},{"lineNumber":372,"author":{"gitId":"warrencxw"},"content":"            }","lastModifiedDate":"2022-03-05"},{"lineNumber":373,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-22"},{"lineNumber":374,"author":{"gitId":"warrencxw"},"content":"            return new InvalidCommand(exception.getMessage());","lastModifiedDate":"2022-03-22"},{"lineNumber":375,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-22"},{"lineNumber":376,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-05"},{"lineNumber":377,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-03-03"}],"authorContributionMap":{"lelerer":15,"ivanaitzliddat":10,"warrencxw":339,"froststein":13}},{"path":"src/main/java/seedu/splitlah/parser/ParserErrors.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package seedu.splitlah.parser;","lastModifiedDate":"2022-03-20"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-20"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"public class ParserErrors {","lastModifiedDate":"2022-03-20"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"    // ERROR REPORTING FUNCTIONS","lastModifiedDate":"2022-03-20"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":"     * Returns a String object containing an error message for a specified delimiter that is missing.","lastModifiedDate":"2022-03-20"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-03-20"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"     * @param delimiter A String object that represents a demarcation of a specific argument in the command. ","lastModifiedDate":"2022-03-20"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"     * @return A String object representing an error message for missing a specified delimiter in the input command.","lastModifiedDate":"2022-03-20"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"    public static String getMissingDelimiterErrorMessage(String delimiter) {","lastModifiedDate":"2022-03-25"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"        return Message.ERROR_PARSER_DELIMITER_NOT_FOUND + delimiter;","lastModifiedDate":"2022-03-20"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"     * Returns a String object containing an error message for a missing argument that should follow after a specified","lastModifiedDate":"2022-03-20"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"     * delimiter in the command input by the user.","lastModifiedDate":"2022-03-20"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-20"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"     * @param delimiter A String object that represents a demarcation of a specific argument in the command.","lastModifiedDate":"2022-03-20"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"     * @return A String object representing an error message for missing an argument in the input command.","lastModifiedDate":"2022-03-20"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"    public static String getMissingArgumentErrorMessage(String delimiter) {","lastModifiedDate":"2022-03-25"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"        return Message.ERROR_PARSER_MISSING_ARGUMENT + delimiter;","lastModifiedDate":"2022-03-20"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":29,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":"     * Returns a String object containing an error message when the parser is not able to read an input String object","lastModifiedDate":"2022-03-20"},{"lineNumber":31,"author":{"gitId":"warrencxw"},"content":"     * as an integer.","lastModifiedDate":"2022-03-20"},{"lineNumber":32,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-20"},{"lineNumber":33,"author":{"gitId":"warrencxw"},"content":"     * @param delimiter A String object that represents a demarcation of a specific argument in the command.","lastModifiedDate":"2022-03-20"},{"lineNumber":34,"author":{"gitId":"warrencxw"},"content":"     * @return A String object representing an error message for a non-integer input.","lastModifiedDate":"2022-03-20"},{"lineNumber":35,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":36,"author":{"gitId":"warrencxw"},"content":"    public static String getNonIntegerErrorMessage(String delimiter) {","lastModifiedDate":"2022-03-25"},{"lineNumber":37,"author":{"gitId":"warrencxw"},"content":"        return Message.ERROR_PARSER_NON_INTEGER_ARGUMENT + delimiter;","lastModifiedDate":"2022-03-20"},{"lineNumber":38,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":39,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":40,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":41,"author":{"gitId":"warrencxw"},"content":"     * Returns a String object containing an error message when the parser is not able to read an input String object","lastModifiedDate":"2022-03-20"},{"lineNumber":42,"author":{"gitId":"warrencxw"},"content":"     * as a double to be used as a monetary value.","lastModifiedDate":"2022-03-21"},{"lineNumber":43,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-20"},{"lineNumber":44,"author":{"gitId":"warrencxw"},"content":"     * @param delimiter A String object that represents a demarcation of a specific argument in the command.","lastModifiedDate":"2022-03-20"},{"lineNumber":45,"author":{"gitId":"warrencxw"},"content":"     * @return A String object representing an error message for a non-double input.","lastModifiedDate":"2022-03-20"},{"lineNumber":46,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":47,"author":{"gitId":"warrencxw"},"content":"    public static String getNonMonetaryErrorMessage(String delimiter) {","lastModifiedDate":"2022-03-25"},{"lineNumber":48,"author":{"gitId":"warrencxw"},"content":"        return Message.ERROR_PARSER_NON_MONETARY_VALUE_ARGUMENT + delimiter;","lastModifiedDate":"2022-03-20"},{"lineNumber":49,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":50,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":51,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-21"},{"lineNumber":52,"author":{"gitId":"warrencxw"},"content":"     * Returns a String object containing an error message when the parser is not able to read an input String object","lastModifiedDate":"2022-03-21"},{"lineNumber":53,"author":{"gitId":"warrencxw"},"content":"     * as a double to be used as a percentage value.","lastModifiedDate":"2022-03-21"},{"lineNumber":54,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-21"},{"lineNumber":55,"author":{"gitId":"warrencxw"},"content":"     * @param delimiter A String object that represents a demarcation of a specific argument in the command.","lastModifiedDate":"2022-03-21"},{"lineNumber":56,"author":{"gitId":"warrencxw"},"content":"     * @return A String object representing an error message for a non-double input.","lastModifiedDate":"2022-03-21"},{"lineNumber":57,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-21"},{"lineNumber":58,"author":{"gitId":"warrencxw"},"content":"    public static String getNonPercentageErrorMessage(String delimiter) {","lastModifiedDate":"2022-03-25"},{"lineNumber":59,"author":{"gitId":"warrencxw"},"content":"        return Message.ERROR_PARSER_NON_PERCENTAGE_ARGUMENT + delimiter;","lastModifiedDate":"2022-03-21"},{"lineNumber":60,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-21"},{"lineNumber":61,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":62,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":63,"author":{"gitId":"warrencxw"},"content":"     * Returns a String object containing an error message when the parser is not able to parse an input String object","lastModifiedDate":"2022-03-20"},{"lineNumber":64,"author":{"gitId":"warrencxw"},"content":"     * as a valid Goods and Services Tax (GST) in percents.","lastModifiedDate":"2022-03-20"},{"lineNumber":65,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-20"},{"lineNumber":66,"author":{"gitId":"warrencxw"},"content":"     * @return A String object representing an error message for an invalid GST input.","lastModifiedDate":"2022-03-20"},{"lineNumber":67,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":68,"author":{"gitId":"warrencxw"},"content":"    public static String getInvalidGstErrorMessage() {","lastModifiedDate":"2022-03-25"},{"lineNumber":69,"author":{"gitId":"warrencxw"},"content":"        return Message.ERROR_PARSER_INVALID_GST_SURCHARGE + ParserUtils.GST_DELIMITER;","lastModifiedDate":"2022-03-20"},{"lineNumber":70,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":71,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":72,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":73,"author":{"gitId":"warrencxw"},"content":"     * Returns a String object containing an error message when the parser is not able to parse an input String object","lastModifiedDate":"2022-03-20"},{"lineNumber":74,"author":{"gitId":"warrencxw"},"content":"     * as a valid service charge in percents.","lastModifiedDate":"2022-03-20"},{"lineNumber":75,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-20"},{"lineNumber":76,"author":{"gitId":"warrencxw"},"content":"     * @return A String object representing an error message for an invalid service charge input.","lastModifiedDate":"2022-03-20"},{"lineNumber":77,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":78,"author":{"gitId":"warrencxw"},"content":"    public static String getInvalidServiceChargeErrorMessage() {","lastModifiedDate":"2022-03-25"},{"lineNumber":79,"author":{"gitId":"warrencxw"},"content":"        return Message.ERROR_PARSER_INVALID_SERVICE_CHARGE + ParserUtils.SERVICE_CHARGE_DELIMITER;","lastModifiedDate":"2022-03-20"},{"lineNumber":80,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":81,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-03-20"}],"authorContributionMap":{"warrencxw":81}},{"path":"src/main/java/seedu/splitlah/parser/ParserUtils.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package seedu.splitlah.parser;","lastModifiedDate":"2022-03-20"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.command.ActivityDeleteCommand;","lastModifiedDate":"2022-03-20"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.command.ActivityListCommand;","lastModifiedDate":"2022-03-20"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.command.ActivityViewCommand;","lastModifiedDate":"2022-03-20"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.command.ExitCommand;","lastModifiedDate":"2022-03-20"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.command.GroupCreateCommand;","lastModifiedDate":"2022-03-20"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.command.GroupDeleteCommand;","lastModifiedDate":"2022-03-20"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.command.GroupListCommand;","lastModifiedDate":"2022-03-21"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.command.GroupViewCommand;","lastModifiedDate":"2022-03-20"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.command.SessionCreateCommand;","lastModifiedDate":"2022-03-20"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.command.SessionDeleteCommand;","lastModifiedDate":"2022-03-20"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.exceptions.InvalidFormatException;","lastModifiedDate":"2022-03-20"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.parser.commandparser.HelpCommandParser;","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.parser.commandparser.SessionCreateCommandParser;","lastModifiedDate":"2022-03-25"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.parser.commandparser.SessionListCommandParser;","lastModifiedDate":"2022-03-23"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.parser.commandparser.SessionSummaryCommandParser;","lastModifiedDate":"2022-03-22"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.parser.commandparser.ActivityCreateCommandParser;","lastModifiedDate":"2022-03-24"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-20"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-03-20"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-03-20"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"import java.util.Set;","lastModifiedDate":"2022-03-20"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"public class ParserUtils {","lastModifiedDate":"2022-03-20"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"    ","lastModifiedDate":"2022-03-20"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"    // DELIMITERS","lastModifiedDate":"2022-03-20"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"    public static final String NAME_DELIMITER \u003d \"/n\";","lastModifiedDate":"2022-03-20"},{"lineNumber":29,"author":{"gitId":"warrencxw"},"content":"    public static final String PERSON_LIST_DELIMITER \u003d \"/pl\";","lastModifiedDate":"2022-03-20"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":"    public static final String INVOLVED_DELIMITER \u003d \"/i\";","lastModifiedDate":"2022-03-20"},{"lineNumber":31,"author":{"gitId":"warrencxw"},"content":"    public static final String PAYER_DELIMITER \u003d \"/p\";","lastModifiedDate":"2022-03-20"},{"lineNumber":32,"author":{"gitId":"warrencxw"},"content":"    public static final String SESSION_ID_DELIMITER \u003d \"/sid\";","lastModifiedDate":"2022-03-20"},{"lineNumber":33,"author":{"gitId":"warrencxw"},"content":"    public static final String ACTIVITY_ID_DELIMITER \u003d \"/aid\";","lastModifiedDate":"2022-03-20"},{"lineNumber":34,"author":{"gitId":"warrencxw"},"content":"    public static final String GROUP_ID_DELIMITER \u003d \"/gid\";","lastModifiedDate":"2022-03-20"},{"lineNumber":35,"author":{"gitId":"warrencxw"},"content":"    public static final String DATE_DELIMITER \u003d \"/d\";","lastModifiedDate":"2022-03-20"},{"lineNumber":36,"author":{"gitId":"warrencxw"},"content":"    public static final String TOTAL_COST_DELIMITER \u003d \"/co\";","lastModifiedDate":"2022-03-20"},{"lineNumber":37,"author":{"gitId":"warrencxw"},"content":"    public static final String COST_LIST_DELIMITER \u003d \"/cl\";","lastModifiedDate":"2022-03-20"},{"lineNumber":38,"author":{"gitId":"warrencxw"},"content":"    public static final String GST_DELIMITER \u003d \"/gst\";","lastModifiedDate":"2022-03-20"},{"lineNumber":39,"author":{"gitId":"warrencxw"},"content":"    public static final String SERVICE_CHARGE_DELIMITER \u003d \"/sc\";","lastModifiedDate":"2022-03-20"},{"lineNumber":40,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":41,"author":{"gitId":"warrencxw"},"content":"    // MISC CONSTANTS","lastModifiedDate":"2022-03-20"},{"lineNumber":42,"author":{"gitId":"warrencxw"},"content":"    static final String DELIMITER_INDICATOR \u003d \"/\";","lastModifiedDate":"2022-03-20"},{"lineNumber":43,"author":{"gitId":"warrencxw"},"content":"    private static final String NEXT_DELIMITER_INDICATOR \u003d \" /\";","lastModifiedDate":"2022-03-20"},{"lineNumber":44,"author":{"gitId":"warrencxw"},"content":"    private static final int ZERO_INDEXING_OFFSET \u003d 1;","lastModifiedDate":"2022-03-21"},{"lineNumber":45,"author":{"gitId":"warrencxw"},"content":"    private static final int PERCENTAGE_ALLOWED_INTEGER_PLACES \u003d 3;","lastModifiedDate":"2022-03-21"},{"lineNumber":46,"author":{"gitId":"warrencxw"},"content":"    private static final int TWO_DECIMAL_PLACES \u003d 2;","lastModifiedDate":"2022-03-21"},{"lineNumber":47,"author":{"gitId":"warrencxw"},"content":"    static final String REGEX_WHITESPACES_DELIMITER \u003d \"\\\\s+\";","lastModifiedDate":"2022-03-20"},{"lineNumber":48,"author":{"gitId":"warrencxw"},"content":"    static final int INVALID_INDEX_INDICATOR \u003d -1;","lastModifiedDate":"2022-03-20"},{"lineNumber":49,"author":{"gitId":"warrencxw"},"content":"    public static final DateTimeFormatter DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");","lastModifiedDate":"2022-03-20"},{"lineNumber":50,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":51,"author":{"gitId":"warrencxw"},"content":"    // SUPPORTING FUNCTIONS","lastModifiedDate":"2022-03-20"},{"lineNumber":52,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":53,"author":{"gitId":"warrencxw"},"content":"     * Returns a String object that represents an argument in the command that follows a specified delimiter.","lastModifiedDate":"2022-03-20"},{"lineNumber":54,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-03-20"},{"lineNumber":55,"author":{"gitId":"warrencxw"},"content":"     * @param commandArgs A String object containing the arguments portion of the entire command input from the user. ","lastModifiedDate":"2022-03-20"},{"lineNumber":56,"author":{"gitId":"warrencxw"},"content":"     * @param delimiter   A String object that represents a demarcation of a specific argument in the command.","lastModifiedDate":"2022-03-20"},{"lineNumber":57,"author":{"gitId":"warrencxw"},"content":"     * @return A String object that represents an argument demarcated by the specified delimiter in the command.","lastModifiedDate":"2022-03-20"},{"lineNumber":58,"author":{"gitId":"warrencxw"},"content":"     * @throws InvalidFormatException If the specified delimiter is not found in the arguments of the command, or","lastModifiedDate":"2022-03-20"},{"lineNumber":59,"author":{"gitId":"warrencxw"},"content":"     *                                if a specified delimiter is found but no argument follows the delimiter.","lastModifiedDate":"2022-03-20"},{"lineNumber":60,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":61,"author":{"gitId":"warrencxw"},"content":"    static String getArgumentFromDelimiter(String commandArgs, String delimiter) throws InvalidFormatException {","lastModifiedDate":"2022-03-20"},{"lineNumber":62,"author":{"gitId":"warrencxw"},"content":"        assert commandArgs !\u003d null : Message.ASSERT_PARSER_COMMAND_ARGUMENTS_NULL;","lastModifiedDate":"2022-03-20"},{"lineNumber":63,"author":{"gitId":"warrencxw"},"content":"        assert delimiter !\u003d null : Message.ASSERT_PARSER_DELIMITER_NULL;","lastModifiedDate":"2022-03-20"},{"lineNumber":64,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-20"},{"lineNumber":65,"author":{"gitId":"warrencxw"},"content":"        int delimiterIndex \u003d commandArgs.indexOf(delimiter);","lastModifiedDate":"2022-03-20"},{"lineNumber":66,"author":{"gitId":"warrencxw"},"content":"        if (delimiterIndex \u003d\u003d INVALID_INDEX_INDICATOR) {","lastModifiedDate":"2022-03-20"},{"lineNumber":67,"author":{"gitId":"warrencxw"},"content":"            throw new InvalidFormatException(ParserErrors.getMissingDelimiterErrorMessage(delimiter));","lastModifiedDate":"2022-03-20"},{"lineNumber":68,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-20"},{"lineNumber":69,"author":{"gitId":"warrencxw"},"content":"        int argumentIndex \u003d delimiterIndex + delimiter.length();","lastModifiedDate":"2022-03-20"},{"lineNumber":70,"author":{"gitId":"warrencxw"},"content":"        int endingIndex \u003d commandArgs.indexOf(NEXT_DELIMITER_INDICATOR, argumentIndex);","lastModifiedDate":"2022-03-20"},{"lineNumber":71,"author":{"gitId":"warrencxw"},"content":"        String output;","lastModifiedDate":"2022-03-20"},{"lineNumber":72,"author":{"gitId":"warrencxw"},"content":"        if (endingIndex \u003d\u003d INVALID_INDEX_INDICATOR) {","lastModifiedDate":"2022-03-20"},{"lineNumber":73,"author":{"gitId":"warrencxw"},"content":"            output \u003d commandArgs.substring(argumentIndex).trim();","lastModifiedDate":"2022-03-20"},{"lineNumber":74,"author":{"gitId":"warrencxw"},"content":"        } else {","lastModifiedDate":"2022-03-20"},{"lineNumber":75,"author":{"gitId":"warrencxw"},"content":"            output \u003d commandArgs.substring(argumentIndex, endingIndex).trim();","lastModifiedDate":"2022-03-20"},{"lineNumber":76,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-20"},{"lineNumber":77,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":78,"author":{"gitId":"warrencxw"},"content":"        if (output.isEmpty()) {","lastModifiedDate":"2022-03-20"},{"lineNumber":79,"author":{"gitId":"warrencxw"},"content":"            throw new InvalidFormatException(ParserErrors.getMissingArgumentErrorMessage(delimiter));","lastModifiedDate":"2022-03-20"},{"lineNumber":80,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-20"},{"lineNumber":81,"author":{"gitId":"warrencxw"},"content":"        return output;","lastModifiedDate":"2022-03-20"},{"lineNumber":82,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":83,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":84,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":85,"author":{"gitId":"warrencxw"},"content":"     * Returns an integer represented by the provided input String object.","lastModifiedDate":"2022-03-20"},{"lineNumber":86,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-03-20"},{"lineNumber":87,"author":{"gitId":"warrencxw"},"content":"     * @param input     A String object that contains numeric characters only and represents an integer.","lastModifiedDate":"2022-03-20"},{"lineNumber":88,"author":{"gitId":"warrencxw"},"content":"     * @param delimiter A String object that represents a demarcation of a specific argument in the command.","lastModifiedDate":"2022-03-20"},{"lineNumber":89,"author":{"gitId":"warrencxw"},"content":"     * @return An integer represented by the input String object.","lastModifiedDate":"2022-03-20"},{"lineNumber":90,"author":{"gitId":"warrencxw"},"content":"     * @throws InvalidFormatException If the provided input String object contains non-numeric characters and cannot","lastModifiedDate":"2022-03-20"},{"lineNumber":91,"author":{"gitId":"warrencxw"},"content":"     *                                be parsed as an integer.","lastModifiedDate":"2022-03-20"},{"lineNumber":92,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":93,"author":{"gitId":"warrencxw"},"content":"    static int parseIntFromString(String input, String delimiter) throws InvalidFormatException {","lastModifiedDate":"2022-03-20"},{"lineNumber":94,"author":{"gitId":"warrencxw"},"content":"        assert input !\u003d null : Message.ASSERT_PARSER_TOKEN_INPUT_NULL;","lastModifiedDate":"2022-03-20"},{"lineNumber":95,"author":{"gitId":"warrencxw"},"content":"        assert delimiter !\u003d null : Message.ASSERT_PARSER_DELIMITER_NULL;","lastModifiedDate":"2022-03-20"},{"lineNumber":96,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-20"},{"lineNumber":97,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-20"},{"lineNumber":98,"author":{"gitId":"warrencxw"},"content":"            return Integer.parseInt(input);","lastModifiedDate":"2022-03-20"},{"lineNumber":99,"author":{"gitId":"warrencxw"},"content":"        } catch (NumberFormatException exception) {","lastModifiedDate":"2022-03-20"},{"lineNumber":100,"author":{"gitId":"warrencxw"},"content":"            throw new InvalidFormatException(ParserErrors.getNonIntegerErrorMessage(delimiter));","lastModifiedDate":"2022-03-20"},{"lineNumber":101,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-20"},{"lineNumber":102,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":103,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":104,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":105,"author":{"gitId":"warrencxw"},"content":"     * Returns an integer representing a unique identifier number, represented by the provided input String object.","lastModifiedDate":"2022-03-20"},{"lineNumber":106,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-03-20"},{"lineNumber":107,"author":{"gitId":"warrencxw"},"content":"     * @param input     A String object that contains numeric characters only and represents a unique identifier number.","lastModifiedDate":"2022-03-20"},{"lineNumber":108,"author":{"gitId":"warrencxw"},"content":"     * @param delimiter A String object that represents a demarcation of a specific argument in the command.","lastModifiedDate":"2022-03-20"},{"lineNumber":109,"author":{"gitId":"warrencxw"},"content":"     * @return An integer representing a unique identifier number.","lastModifiedDate":"2022-03-20"},{"lineNumber":110,"author":{"gitId":"warrencxw"},"content":"     * @throws InvalidFormatException If the provided input String object contains non-numeric characters and cannot be","lastModifiedDate":"2022-03-20"},{"lineNumber":111,"author":{"gitId":"warrencxw"},"content":"     *                                parsed as an integer, or","lastModifiedDate":"2022-03-20"},{"lineNumber":112,"author":{"gitId":"warrencxw"},"content":"     *                                if the integer parsed from the input String object is not a positive integer.","lastModifiedDate":"2022-03-20"},{"lineNumber":113,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":114,"author":{"gitId":"warrencxw"},"content":"    static int parseIdFromString(String input, String delimiter) throws InvalidFormatException {","lastModifiedDate":"2022-03-20"},{"lineNumber":115,"author":{"gitId":"warrencxw"},"content":"        assert input !\u003d null : Message.ASSERT_PARSER_TOKEN_INPUT_NULL;","lastModifiedDate":"2022-03-20"},{"lineNumber":116,"author":{"gitId":"warrencxw"},"content":"        assert delimiter !\u003d null : Message.ASSERT_PARSER_DELIMITER_NULL;","lastModifiedDate":"2022-03-20"},{"lineNumber":117,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-20"},{"lineNumber":118,"author":{"gitId":"warrencxw"},"content":"        int idVal \u003d parseIntFromString(input, delimiter);","lastModifiedDate":"2022-03-20"},{"lineNumber":119,"author":{"gitId":"warrencxw"},"content":"        if (idVal \u003c\u003d 0) {","lastModifiedDate":"2022-03-20"},{"lineNumber":120,"author":{"gitId":"warrencxw"},"content":"            throw new InvalidFormatException(Message.ERROR_PARSER_ID_VALUE_NOT_POSITIVE);","lastModifiedDate":"2022-03-20"},{"lineNumber":121,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-20"},{"lineNumber":122,"author":{"gitId":"warrencxw"},"content":"        return idVal;","lastModifiedDate":"2022-03-20"},{"lineNumber":123,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":124,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":125,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":126,"author":{"gitId":"warrencxw"},"content":"     * Checks if the given String object representing a real number has at most two decimal places.","lastModifiedDate":"2022-03-20"},{"lineNumber":127,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-03-20"},{"lineNumber":128,"author":{"gitId":"warrencxw"},"content":"     * @param input A String object representing a real number.","lastModifiedDate":"2022-03-20"},{"lineNumber":129,"author":{"gitId":"warrencxw"},"content":"     * @return true if the String object can be parsed as a double and ","lastModifiedDate":"2022-03-20"},{"lineNumber":130,"author":{"gitId":"warrencxw"},"content":"     *         represents a real number has at most two decimal places,","lastModifiedDate":"2022-03-20"},{"lineNumber":131,"author":{"gitId":"warrencxw"},"content":"     *         false otherwise.","lastModifiedDate":"2022-03-20"},{"lineNumber":132,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":133,"author":{"gitId":"warrencxw"},"content":"    private static boolean hasAtMostTwoDecimalPlaces(String input) {","lastModifiedDate":"2022-03-20"},{"lineNumber":134,"author":{"gitId":"warrencxw"},"content":"        assert input !\u003d null : Message.ASSERT_PARSER_TOKEN_INPUT_NULL;","lastModifiedDate":"2022-03-20"},{"lineNumber":135,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-20"},{"lineNumber":136,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-20"},{"lineNumber":137,"author":{"gitId":"warrencxw"},"content":"            double value \u003d Double.parseDouble(input);","lastModifiedDate":"2022-03-20"},{"lineNumber":138,"author":{"gitId":"warrencxw"},"content":"        } catch (NumberFormatException exception) {","lastModifiedDate":"2022-03-20"},{"lineNumber":139,"author":{"gitId":"warrencxw"},"content":"            return false;","lastModifiedDate":"2022-03-20"},{"lineNumber":140,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-20"},{"lineNumber":141,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-20"},{"lineNumber":142,"author":{"gitId":"warrencxw"},"content":"        int indexOfDecimal \u003d input.indexOf(\u0027.\u0027);","lastModifiedDate":"2022-03-20"},{"lineNumber":143,"author":{"gitId":"warrencxw"},"content":"        if (indexOfDecimal \u003d\u003d INVALID_INDEX_INDICATOR) {","lastModifiedDate":"2022-03-20"},{"lineNumber":144,"author":{"gitId":"warrencxw"},"content":"            return true;","lastModifiedDate":"2022-03-20"},{"lineNumber":145,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-20"},{"lineNumber":146,"author":{"gitId":"warrencxw"},"content":"        int decimalPlaces \u003d input.length() - indexOfDecimal - ZERO_INDEXING_OFFSET;","lastModifiedDate":"2022-03-21"},{"lineNumber":147,"author":{"gitId":"warrencxw"},"content":"        return decimalPlaces \u003c\u003d TWO_DECIMAL_PLACES;","lastModifiedDate":"2022-03-21"},{"lineNumber":148,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":149,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":150,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":151,"author":{"gitId":"warrencxw"},"content":"     * Checks if the given String object representing a real number has less than","lastModifiedDate":"2022-03-20"},{"lineNumber":152,"author":{"gitId":"warrencxw"},"content":"     * a specified number of digits before decimal point.","lastModifiedDate":"2022-03-20"},{"lineNumber":153,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-20"},{"lineNumber":154,"author":{"gitId":"warrencxw"},"content":"     * @param input  A String object representing a real number.","lastModifiedDate":"2022-03-20"},{"lineNumber":155,"author":{"gitId":"warrencxw"},"content":"     * @param places An integer representing the maximum number of digits that the input value","lastModifiedDate":"2022-03-20"},{"lineNumber":156,"author":{"gitId":"warrencxw"},"content":"     *               should have before the decimal point.","lastModifiedDate":"2022-03-20"},{"lineNumber":157,"author":{"gitId":"warrencxw"},"content":"     * @return true if the String object can be parsed as a double and","lastModifiedDate":"2022-03-20"},{"lineNumber":158,"author":{"gitId":"warrencxw"},"content":"     *         represents a real number that has at most the specified number of digits before decimal point,","lastModifiedDate":"2022-03-20"},{"lineNumber":159,"author":{"gitId":"warrencxw"},"content":"     *         false otherwise.","lastModifiedDate":"2022-03-20"},{"lineNumber":160,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":161,"author":{"gitId":"warrencxw"},"content":"    private static boolean hasAtMostGivenIntegerPlaces(String input, int places) {","lastModifiedDate":"2022-03-20"},{"lineNumber":162,"author":{"gitId":"warrencxw"},"content":"        assert input !\u003d null : Message.ASSERT_PARSER_TOKEN_INPUT_NULL;","lastModifiedDate":"2022-03-20"},{"lineNumber":163,"author":{"gitId":"warrencxw"},"content":"        assert places \u003e\u003d 0 : Message.ASSERT_PARSER_PLACES_NEGATIVE;","lastModifiedDate":"2022-03-20"},{"lineNumber":164,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-20"},{"lineNumber":165,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-20"},{"lineNumber":166,"author":{"gitId":"warrencxw"},"content":"            double value \u003d Double.parseDouble(input);","lastModifiedDate":"2022-03-20"},{"lineNumber":167,"author":{"gitId":"warrencxw"},"content":"        } catch (NumberFormatException exception) {","lastModifiedDate":"2022-03-20"},{"lineNumber":168,"author":{"gitId":"warrencxw"},"content":"            return false;","lastModifiedDate":"2022-03-20"},{"lineNumber":169,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-20"},{"lineNumber":170,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":171,"author":{"gitId":"warrencxw"},"content":"        int numberChars \u003d input.length();","lastModifiedDate":"2022-03-20"},{"lineNumber":172,"author":{"gitId":"warrencxw"},"content":"        int indexOfDecimal \u003d input.indexOf(\u0027.\u0027);","lastModifiedDate":"2022-03-20"},{"lineNumber":173,"author":{"gitId":"warrencxw"},"content":"        if (indexOfDecimal \u003d\u003d INVALID_INDEX_INDICATOR) {","lastModifiedDate":"2022-03-20"},{"lineNumber":174,"author":{"gitId":"warrencxw"},"content":"            return numberChars \u003c\u003d places;","lastModifiedDate":"2022-03-20"},{"lineNumber":175,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-20"},{"lineNumber":176,"author":{"gitId":"warrencxw"},"content":"        return indexOfDecimal \u003c\u003d places;","lastModifiedDate":"2022-03-20"},{"lineNumber":177,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":178,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":179,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":180,"author":{"gitId":"warrencxw"},"content":"     * Checks if the given String object representing a monetary value has at most twelve digits before decimal point.","lastModifiedDate":"2022-03-20"},{"lineNumber":181,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-20"},{"lineNumber":182,"author":{"gitId":"warrencxw"},"content":"     * @param input A String object representing a monetary value.","lastModifiedDate":"2022-03-20"},{"lineNumber":183,"author":{"gitId":"warrencxw"},"content":"     * @return true if the String object can be parsed as a double and","lastModifiedDate":"2022-03-20"},{"lineNumber":184,"author":{"gitId":"warrencxw"},"content":"     *         represents a monetary value that has at most twelve digits before decimal point,","lastModifiedDate":"2022-03-20"},{"lineNumber":185,"author":{"gitId":"warrencxw"},"content":"     *         false otherwise.","lastModifiedDate":"2022-03-20"},{"lineNumber":186,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":187,"author":{"gitId":"warrencxw"},"content":"    private static boolean hasAtMostTwelveIntegerPlaces(String input) {","lastModifiedDate":"2022-03-20"},{"lineNumber":188,"author":{"gitId":"warrencxw"},"content":"        return hasAtMostGivenIntegerPlaces(input, 12);","lastModifiedDate":"2022-03-20"},{"lineNumber":189,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":190,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":191,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":192,"author":{"gitId":"warrencxw"},"content":"     * Returns a double representing a cost value, represented by the provided input String object.","lastModifiedDate":"2022-03-20"},{"lineNumber":193,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-20"},{"lineNumber":194,"author":{"gitId":"warrencxw"},"content":"     * @param input     A String object that contains numeric characters or a single decimal point character,","lastModifiedDate":"2022-03-20"},{"lineNumber":195,"author":{"gitId":"warrencxw"},"content":"     *                  representing a cost value.","lastModifiedDate":"2022-03-20"},{"lineNumber":196,"author":{"gitId":"warrencxw"},"content":"     * @param delimiter A String object that represents a demarcation of a specific argument in the command.","lastModifiedDate":"2022-03-20"},{"lineNumber":197,"author":{"gitId":"warrencxw"},"content":"     * @return A double representing a cost value.","lastModifiedDate":"2022-03-21"},{"lineNumber":198,"author":{"gitId":"warrencxw"},"content":"     * @throws InvalidFormatException If the provided input String object contains characters other than numeric","lastModifiedDate":"2022-03-20"},{"lineNumber":199,"author":{"gitId":"warrencxw"},"content":"     *                                characters or a single decimal point character,","lastModifiedDate":"2022-03-20"},{"lineNumber":200,"author":{"gitId":"warrencxw"},"content":"     *                                and cannot be parsed as a double,","lastModifiedDate":"2022-03-20"},{"lineNumber":201,"author":{"gitId":"warrencxw"},"content":"     *                                if the double parsed from the input String object is not a positive value,","lastModifiedDate":"2022-03-20"},{"lineNumber":202,"author":{"gitId":"warrencxw"},"content":"     *                                if the parsed double has more than 2 decimal points, or","lastModifiedDate":"2022-03-20"},{"lineNumber":203,"author":{"gitId":"warrencxw"},"content":"     *                                if the parsed double has more than 12 digits before the decimal point.","lastModifiedDate":"2022-03-20"},{"lineNumber":204,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":205,"author":{"gitId":"warrencxw"},"content":"    static double parseCostFromString(String input, String delimiter) throws InvalidFormatException {","lastModifiedDate":"2022-03-20"},{"lineNumber":206,"author":{"gitId":"warrencxw"},"content":"        assert input !\u003d null : Message.ASSERT_PARSER_TOKEN_INPUT_NULL;","lastModifiedDate":"2022-03-20"},{"lineNumber":207,"author":{"gitId":"warrencxw"},"content":"        assert delimiter !\u003d null : Message.ASSERT_PARSER_DELIMITER_NULL;","lastModifiedDate":"2022-03-20"},{"lineNumber":208,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-20"},{"lineNumber":209,"author":{"gitId":"warrencxw"},"content":"        double cost;","lastModifiedDate":"2022-03-20"},{"lineNumber":210,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-20"},{"lineNumber":211,"author":{"gitId":"warrencxw"},"content":"            cost \u003d Double.parseDouble(input);","lastModifiedDate":"2022-03-20"},{"lineNumber":212,"author":{"gitId":"warrencxw"},"content":"        } catch (NumberFormatException exception) {","lastModifiedDate":"2022-03-20"},{"lineNumber":213,"author":{"gitId":"warrencxw"},"content":"            throw new InvalidFormatException(ParserErrors.getNonMonetaryErrorMessage(delimiter));","lastModifiedDate":"2022-03-20"},{"lineNumber":214,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-20"},{"lineNumber":215,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-20"},{"lineNumber":216,"author":{"gitId":"warrencxw"},"content":"        if (cost \u003c\u003d 0) {","lastModifiedDate":"2022-03-20"},{"lineNumber":217,"author":{"gitId":"warrencxw"},"content":"            throw new InvalidFormatException(Message.ERROR_PARSER_COST_NOT_POSITIVE);","lastModifiedDate":"2022-03-20"},{"lineNumber":218,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-20"},{"lineNumber":219,"author":{"gitId":"warrencxw"},"content":"        if (!hasAtMostTwoDecimalPlaces(input)) {","lastModifiedDate":"2022-03-20"},{"lineNumber":220,"author":{"gitId":"warrencxw"},"content":"            throw new InvalidFormatException(Message.ERROR_PARSER_COST_NOT_TWO_DP);","lastModifiedDate":"2022-03-20"},{"lineNumber":221,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-20"},{"lineNumber":222,"author":{"gitId":"warrencxw"},"content":"        if (!hasAtMostTwelveIntegerPlaces(input)) {","lastModifiedDate":"2022-03-20"},{"lineNumber":223,"author":{"gitId":"warrencxw"},"content":"            throw new InvalidFormatException(Message.ERROR_PARSER_COST_MORE_THAN_TWELVE_DIGITS_BEFORE_DP);","lastModifiedDate":"2022-03-20"},{"lineNumber":224,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-20"},{"lineNumber":225,"author":{"gitId":"warrencxw"},"content":"        return cost;","lastModifiedDate":"2022-03-20"},{"lineNumber":226,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":227,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":228,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-21"},{"lineNumber":229,"author":{"gitId":"warrencxw"},"content":"     * Returns a double representing a percentage value, represented by the provided input String object.","lastModifiedDate":"2022-03-21"},{"lineNumber":230,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-21"},{"lineNumber":231,"author":{"gitId":"warrencxw"},"content":"     * @param input     A String object that contains numeric characters or a single decimal point character,","lastModifiedDate":"2022-03-21"},{"lineNumber":232,"author":{"gitId":"warrencxw"},"content":"     *                  representing a percentage value.","lastModifiedDate":"2022-03-21"},{"lineNumber":233,"author":{"gitId":"warrencxw"},"content":"     * @param delimiter A String object that represents a demarcation of a specific argument in the command.","lastModifiedDate":"2022-03-21"},{"lineNumber":234,"author":{"gitId":"warrencxw"},"content":"     * @return A double representing a percentage value.","lastModifiedDate":"2022-03-21"},{"lineNumber":235,"author":{"gitId":"warrencxw"},"content":"     * @throws InvalidFormatException If the provided input String object contains characters other than numeric","lastModifiedDate":"2022-03-21"},{"lineNumber":236,"author":{"gitId":"warrencxw"},"content":"     *                                characters or a single decimal point character,","lastModifiedDate":"2022-03-21"},{"lineNumber":237,"author":{"gitId":"warrencxw"},"content":"     *                                and cannot be parsed as a double,","lastModifiedDate":"2022-03-21"},{"lineNumber":238,"author":{"gitId":"warrencxw"},"content":"     *                                if the double parsed from the input String object is a negative value,","lastModifiedDate":"2022-03-25"},{"lineNumber":239,"author":{"gitId":"warrencxw"},"content":"     *                                if the parsed double has more than 2 decimal points, or","lastModifiedDate":"2022-03-21"},{"lineNumber":240,"author":{"gitId":"warrencxw"},"content":"     *                                if the parsed double has more than 3 digits before the decimal point.","lastModifiedDate":"2022-03-21"},{"lineNumber":241,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-21"},{"lineNumber":242,"author":{"gitId":"warrencxw"},"content":"    static double parsePercentageFromString(String input, String delimiter) throws InvalidFormatException {","lastModifiedDate":"2022-03-21"},{"lineNumber":243,"author":{"gitId":"warrencxw"},"content":"        assert input !\u003d null : Message.ASSERT_PARSER_TOKEN_INPUT_NULL;","lastModifiedDate":"2022-03-21"},{"lineNumber":244,"author":{"gitId":"warrencxw"},"content":"        assert delimiter !\u003d null : Message.ASSERT_PARSER_DELIMITER_NULL;","lastModifiedDate":"2022-03-21"},{"lineNumber":245,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":246,"author":{"gitId":"warrencxw"},"content":"        double percentage;","lastModifiedDate":"2022-03-21"},{"lineNumber":247,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-21"},{"lineNumber":248,"author":{"gitId":"warrencxw"},"content":"            percentage \u003d Double.parseDouble(input);","lastModifiedDate":"2022-03-21"},{"lineNumber":249,"author":{"gitId":"warrencxw"},"content":"        } catch (NumberFormatException exception) {","lastModifiedDate":"2022-03-21"},{"lineNumber":250,"author":{"gitId":"warrencxw"},"content":"            throw new InvalidFormatException(ParserErrors.getNonPercentageErrorMessage(delimiter));","lastModifiedDate":"2022-03-21"},{"lineNumber":251,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-21"},{"lineNumber":252,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":253,"author":{"gitId":"warrencxw"},"content":"        if (percentage \u003c 0) {","lastModifiedDate":"2022-03-21"},{"lineNumber":254,"author":{"gitId":"warrencxw"},"content":"            throw new InvalidFormatException(Message.ERROR_PARSER_PERCENTAGE_NEGATIVE);","lastModifiedDate":"2022-03-21"},{"lineNumber":255,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-21"},{"lineNumber":256,"author":{"gitId":"warrencxw"},"content":"        if (!hasAtMostTwoDecimalPlaces(input)) {","lastModifiedDate":"2022-03-21"},{"lineNumber":257,"author":{"gitId":"warrencxw"},"content":"            throw new InvalidFormatException(Message.ERROR_PARSER_PERCENTAGE_NOT_TWO_DP);","lastModifiedDate":"2022-03-21"},{"lineNumber":258,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-21"},{"lineNumber":259,"author":{"gitId":"warrencxw"},"content":"        if (!hasAtMostGivenIntegerPlaces(input, PERCENTAGE_ALLOWED_INTEGER_PLACES)) {","lastModifiedDate":"2022-03-21"},{"lineNumber":260,"author":{"gitId":"warrencxw"},"content":"            throw new InvalidFormatException(Message.ERROR_PARSER_PERCENTAGE_MORE_THAN_THREE_DIGITS_BEFORE_DP);","lastModifiedDate":"2022-03-21"},{"lineNumber":261,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-21"},{"lineNumber":262,"author":{"gitId":"warrencxw"},"content":"        return percentage;","lastModifiedDate":"2022-03-21"},{"lineNumber":263,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-21"},{"lineNumber":264,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":265,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":266,"author":{"gitId":"warrencxw"},"content":"     * Checks the provided String object which represents the command arguments for the existence of a specified","lastModifiedDate":"2022-03-20"},{"lineNumber":267,"author":{"gitId":"warrencxw"},"content":"     * delimiter.","lastModifiedDate":"2022-03-20"},{"lineNumber":268,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-03-20"},{"lineNumber":269,"author":{"gitId":"warrencxw"},"content":"     * @param commandArgs A String object containing the arguments portion of the entire command input from the user.","lastModifiedDate":"2022-03-20"},{"lineNumber":270,"author":{"gitId":"warrencxw"},"content":"     * @param delimiter   A String object that represents a demarcation of a specific argument in the command.","lastModifiedDate":"2022-03-20"},{"lineNumber":271,"author":{"gitId":"warrencxw"},"content":"     * @return true if the String object representing the command arguments contains the specified delimiter,","lastModifiedDate":"2022-03-20"},{"lineNumber":272,"author":{"gitId":"warrencxw"},"content":"     *         false otherwise.","lastModifiedDate":"2022-03-20"},{"lineNumber":273,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":274,"author":{"gitId":"warrencxw"},"content":"    static boolean hasDelimiter(String commandArgs, String delimiter) {","lastModifiedDate":"2022-03-20"},{"lineNumber":275,"author":{"gitId":"warrencxw"},"content":"        assert commandArgs !\u003d null : Message.ASSERT_PARSER_COMMAND_ARGUMENTS_NULL;","lastModifiedDate":"2022-03-20"},{"lineNumber":276,"author":{"gitId":"warrencxw"},"content":"        assert delimiter !\u003d null : Message.ASSERT_PARSER_DELIMITER_NULL;","lastModifiedDate":"2022-03-20"},{"lineNumber":277,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-20"},{"lineNumber":278,"author":{"gitId":"warrencxw"},"content":"        int delimiterIndex \u003d commandArgs.indexOf(delimiter);","lastModifiedDate":"2022-03-20"},{"lineNumber":279,"author":{"gitId":"warrencxw"},"content":"        return delimiterIndex !\u003d INVALID_INDEX_INDICATOR;","lastModifiedDate":"2022-03-20"},{"lineNumber":280,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":281,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":282,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":283,"author":{"gitId":"warrencxw"},"content":"     * Checks if the provided String object, which represents a single token in the command arguments, is a delimiter","lastModifiedDate":"2022-03-20"},{"lineNumber":284,"author":{"gitId":"warrencxw"},"content":"     * that is used in any of the commands available in SplitLah.","lastModifiedDate":"2022-03-20"},{"lineNumber":285,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-03-20"},{"lineNumber":286,"author":{"gitId":"warrencxw"},"content":"     * @param token A String object representing a sequence of characters that are isolated by whitespaces in the","lastModifiedDate":"2022-03-20"},{"lineNumber":287,"author":{"gitId":"warrencxw"},"content":"     *              command arguments.","lastModifiedDate":"2022-03-20"},{"lineNumber":288,"author":{"gitId":"warrencxw"},"content":"     * @return true if the provided String object is a delimiter used in any of the commands available in SplitLah,","lastModifiedDate":"2022-03-20"},{"lineNumber":289,"author":{"gitId":"warrencxw"},"content":"     *         false otherwise.","lastModifiedDate":"2022-03-20"},{"lineNumber":290,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":291,"author":{"gitId":"warrencxw"},"content":"    private static boolean isValidDelimiter(String token) {","lastModifiedDate":"2022-03-20"},{"lineNumber":292,"author":{"gitId":"warrencxw"},"content":"        assert token !\u003d null : Message.ASSERT_PARSER_TOKEN_INPUT_NULL;","lastModifiedDate":"2022-03-20"},{"lineNumber":293,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-20"},{"lineNumber":294,"author":{"gitId":"warrencxw"},"content":"        switch (token) {","lastModifiedDate":"2022-03-20"},{"lineNumber":295,"author":{"gitId":"warrencxw"},"content":"        case NAME_DELIMITER:","lastModifiedDate":"2022-03-20"},{"lineNumber":296,"author":{"gitId":"warrencxw"},"content":"            // Fallthrough","lastModifiedDate":"2022-03-20"},{"lineNumber":297,"author":{"gitId":"warrencxw"},"content":"        case PERSON_LIST_DELIMITER:","lastModifiedDate":"2022-03-20"},{"lineNumber":298,"author":{"gitId":"warrencxw"},"content":"            // Fallthrough","lastModifiedDate":"2022-03-20"},{"lineNumber":299,"author":{"gitId":"warrencxw"},"content":"        case INVOLVED_DELIMITER:","lastModifiedDate":"2022-03-20"},{"lineNumber":300,"author":{"gitId":"warrencxw"},"content":"            // Fallthrough","lastModifiedDate":"2022-03-20"},{"lineNumber":301,"author":{"gitId":"warrencxw"},"content":"        case PAYER_DELIMITER:","lastModifiedDate":"2022-03-20"},{"lineNumber":302,"author":{"gitId":"warrencxw"},"content":"            // Fallthrough","lastModifiedDate":"2022-03-20"},{"lineNumber":303,"author":{"gitId":"warrencxw"},"content":"        case SESSION_ID_DELIMITER:","lastModifiedDate":"2022-03-20"},{"lineNumber":304,"author":{"gitId":"warrencxw"},"content":"            // Fallthrough","lastModifiedDate":"2022-03-20"},{"lineNumber":305,"author":{"gitId":"warrencxw"},"content":"        case ACTIVITY_ID_DELIMITER:","lastModifiedDate":"2022-03-20"},{"lineNumber":306,"author":{"gitId":"warrencxw"},"content":"            // Fallthrough","lastModifiedDate":"2022-03-20"},{"lineNumber":307,"author":{"gitId":"warrencxw"},"content":"        case GROUP_ID_DELIMITER:","lastModifiedDate":"2022-03-20"},{"lineNumber":308,"author":{"gitId":"warrencxw"},"content":"            // Fallthrough","lastModifiedDate":"2022-03-20"},{"lineNumber":309,"author":{"gitId":"warrencxw"},"content":"        case DATE_DELIMITER:","lastModifiedDate":"2022-03-20"},{"lineNumber":310,"author":{"gitId":"warrencxw"},"content":"            // Fallthrough","lastModifiedDate":"2022-03-20"},{"lineNumber":311,"author":{"gitId":"warrencxw"},"content":"        case TOTAL_COST_DELIMITER:","lastModifiedDate":"2022-03-20"},{"lineNumber":312,"author":{"gitId":"warrencxw"},"content":"            // Fallthrough","lastModifiedDate":"2022-03-20"},{"lineNumber":313,"author":{"gitId":"warrencxw"},"content":"        case COST_LIST_DELIMITER:","lastModifiedDate":"2022-03-20"},{"lineNumber":314,"author":{"gitId":"warrencxw"},"content":"            // Fallthrough","lastModifiedDate":"2022-03-20"},{"lineNumber":315,"author":{"gitId":"warrencxw"},"content":"        case GST_DELIMITER:","lastModifiedDate":"2022-03-20"},{"lineNumber":316,"author":{"gitId":"warrencxw"},"content":"            // Fallthrough","lastModifiedDate":"2022-03-20"},{"lineNumber":317,"author":{"gitId":"warrencxw"},"content":"        case SERVICE_CHARGE_DELIMITER:","lastModifiedDate":"2022-03-20"},{"lineNumber":318,"author":{"gitId":"warrencxw"},"content":"            return true;","lastModifiedDate":"2022-03-20"},{"lineNumber":319,"author":{"gitId":"warrencxw"},"content":"        default:","lastModifiedDate":"2022-03-20"},{"lineNumber":320,"author":{"gitId":"warrencxw"},"content":"            return false;","lastModifiedDate":"2022-03-20"},{"lineNumber":321,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-20"},{"lineNumber":322,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":323,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":324,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":325,"author":{"gitId":"warrencxw"},"content":"     * Checks whether the provided String object which represents the command arguments contains any invalid","lastModifiedDate":"2022-03-20"},{"lineNumber":326,"author":{"gitId":"warrencxw"},"content":"     * delimiters.","lastModifiedDate":"2022-03-20"},{"lineNumber":327,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-03-20"},{"lineNumber":328,"author":{"gitId":"warrencxw"},"content":"     * @param commandArgs A String object containing the arguments portion of the entire command input from the user.","lastModifiedDate":"2022-03-20"},{"lineNumber":329,"author":{"gitId":"warrencxw"},"content":"     * @return true if there are tokens in the command arguments that contains a forward slash character (\u0027/\u0027) but is","lastModifiedDate":"2022-03-20"},{"lineNumber":330,"author":{"gitId":"warrencxw"},"content":"     *         not a valid delimiter used in any commands in SplitLah,","lastModifiedDate":"2022-03-20"},{"lineNumber":331,"author":{"gitId":"warrencxw"},"content":"     *         false otherwise.","lastModifiedDate":"2022-03-20"},{"lineNumber":332,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":333,"author":{"gitId":"warrencxw"},"content":"    private static boolean containsInvalidDelimiters(String commandArgs) {","lastModifiedDate":"2022-03-20"},{"lineNumber":334,"author":{"gitId":"warrencxw"},"content":"        assert commandArgs !\u003d null : Message.ASSERT_PARSER_TOKEN_INPUT_NULL;","lastModifiedDate":"2022-03-20"},{"lineNumber":335,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-20"},{"lineNumber":336,"author":{"gitId":"warrencxw"},"content":"        String[] argumentTokens \u003d commandArgs.split(REGEX_WHITESPACES_DELIMITER);","lastModifiedDate":"2022-03-20"},{"lineNumber":337,"author":{"gitId":"warrencxw"},"content":"        for (String token : argumentTokens) {","lastModifiedDate":"2022-03-20"},{"lineNumber":338,"author":{"gitId":"warrencxw"},"content":"            if (token.contains(DELIMITER_INDICATOR) \u0026\u0026 !isValidDelimiter(token)) {","lastModifiedDate":"2022-03-20"},{"lineNumber":339,"author":{"gitId":"warrencxw"},"content":"                return true;","lastModifiedDate":"2022-03-20"},{"lineNumber":340,"author":{"gitId":"warrencxw"},"content":"            }","lastModifiedDate":"2022-03-20"},{"lineNumber":341,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-20"},{"lineNumber":342,"author":{"gitId":"warrencxw"},"content":"        return false;","lastModifiedDate":"2022-03-20"},{"lineNumber":343,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":344,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":345,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":346,"author":{"gitId":"warrencxw"},"content":"     * Checks whether the provided String object which represents the command arguments contains any duplicate","lastModifiedDate":"2022-03-20"},{"lineNumber":347,"author":{"gitId":"warrencxw"},"content":"     * delimiters.","lastModifiedDate":"2022-03-20"},{"lineNumber":348,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-03-20"},{"lineNumber":349,"author":{"gitId":"warrencxw"},"content":"     * @param commandArgs A String object containing the arguments portion of the entire command input from the user.","lastModifiedDate":"2022-03-20"},{"lineNumber":350,"author":{"gitId":"warrencxw"},"content":"     * @return true if there are tokens in the command arguments containing a forward slash character (\u0027/\u0027) that","lastModifiedDate":"2022-03-20"},{"lineNumber":351,"author":{"gitId":"warrencxw"},"content":"     *         appears twice or more times in the arguments,","lastModifiedDate":"2022-03-20"},{"lineNumber":352,"author":{"gitId":"warrencxw"},"content":"     *         false otherwise.","lastModifiedDate":"2022-03-20"},{"lineNumber":353,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":354,"author":{"gitId":"warrencxw"},"content":"    private static boolean containsDuplicateDelimiters(String commandArgs) {","lastModifiedDate":"2022-03-20"},{"lineNumber":355,"author":{"gitId":"warrencxw"},"content":"        assert commandArgs !\u003d null : Message.ASSERT_PARSER_COMMAND_ARGUMENTS_NULL;","lastModifiedDate":"2022-03-20"},{"lineNumber":356,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":357,"author":{"gitId":"warrencxw"},"content":"        Set\u003cString\u003e delimiterSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2022-03-20"},{"lineNumber":358,"author":{"gitId":"warrencxw"},"content":"        String[] argumentTokens \u003d commandArgs.split(REGEX_WHITESPACES_DELIMITER);","lastModifiedDate":"2022-03-20"},{"lineNumber":359,"author":{"gitId":"warrencxw"},"content":"        for (String token : argumentTokens) {","lastModifiedDate":"2022-03-20"},{"lineNumber":360,"author":{"gitId":"warrencxw"},"content":"            if (token.contains(DELIMITER_INDICATOR) \u0026\u0026 !delimiterSet.add(token)) {","lastModifiedDate":"2022-03-20"},{"lineNumber":361,"author":{"gitId":"warrencxw"},"content":"                return true;","lastModifiedDate":"2022-03-20"},{"lineNumber":362,"author":{"gitId":"warrencxw"},"content":"            }","lastModifiedDate":"2022-03-20"},{"lineNumber":363,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-20"},{"lineNumber":364,"author":{"gitId":"warrencxw"},"content":"        return false;","lastModifiedDate":"2022-03-20"},{"lineNumber":365,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":366,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":367,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":368,"author":{"gitId":"warrencxw"},"content":"     * Checks whether a String array object contains a String object ","lastModifiedDate":"2022-03-20"},{"lineNumber":369,"author":{"gitId":"warrencxw"},"content":"     * with the same contents, ignoring case, as the specified String object.","lastModifiedDate":"2022-03-20"},{"lineNumber":370,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-03-20"},{"lineNumber":371,"author":{"gitId":"warrencxw"},"content":"     * @param stringToCheck A String object that is specified to be checked against the String array object.","lastModifiedDate":"2022-03-20"},{"lineNumber":372,"author":{"gitId":"warrencxw"},"content":"     * @param stringArray   A String array object to be checked against.","lastModifiedDate":"2022-03-20"},{"lineNumber":373,"author":{"gitId":"warrencxw"},"content":"     * @return true if stringArray contains a String object with the same contents as stringToCheck,","lastModifiedDate":"2022-03-20"},{"lineNumber":374,"author":{"gitId":"warrencxw"},"content":"     *         false otherwise.","lastModifiedDate":"2022-03-20"},{"lineNumber":375,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":376,"author":{"gitId":"warrencxw"},"content":"    private static boolean hasStringInStringArray(String stringToCheck, String[] stringArray) {","lastModifiedDate":"2022-03-20"},{"lineNumber":377,"author":{"gitId":"warrencxw"},"content":"        assert stringToCheck !\u003d null \u0026\u0026 stringArray !\u003d null : Message.ASSERT_PARSER_PARAMETERS_NULL;","lastModifiedDate":"2022-03-20"},{"lineNumber":378,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-20"},{"lineNumber":379,"author":{"gitId":"warrencxw"},"content":"        for (String string : stringArray) {","lastModifiedDate":"2022-03-20"},{"lineNumber":380,"author":{"gitId":"warrencxw"},"content":"            if (string.equalsIgnoreCase(stringToCheck)) {","lastModifiedDate":"2022-03-20"},{"lineNumber":381,"author":{"gitId":"warrencxw"},"content":"                return true;","lastModifiedDate":"2022-03-20"},{"lineNumber":382,"author":{"gitId":"warrencxw"},"content":"            }","lastModifiedDate":"2022-03-20"},{"lineNumber":383,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-20"},{"lineNumber":384,"author":{"gitId":"warrencxw"},"content":"        return false;","lastModifiedDate":"2022-03-20"},{"lineNumber":385,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":386,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":387,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":388,"author":{"gitId":"warrencxw"},"content":"     * Checks whether any delimiter inside the provided String object which represents the command arguments does not","lastModifiedDate":"2022-03-20"},{"lineNumber":389,"author":{"gitId":"warrencxw"},"content":"     * belong to the command type specified by the String object which represents the command type.","lastModifiedDate":"2022-03-20"},{"lineNumber":390,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-03-20"},{"lineNumber":391,"author":{"gitId":"warrencxw"},"content":"     * @param commandType   A String object representing the command type of the command input from the user.","lastModifiedDate":"2022-03-20"},{"lineNumber":392,"author":{"gitId":"warrencxw"},"content":"     * @param remainingArgs A String object containing the arguments portion of the entire command input from the user.","lastModifiedDate":"2022-03-20"},{"lineNumber":393,"author":{"gitId":"warrencxw"},"content":"     * @return true if any delimiter inside remainingArgs do not belong to command type as represented by commandType,","lastModifiedDate":"2022-03-20"},{"lineNumber":394,"author":{"gitId":"warrencxw"},"content":"     *         false otherwise.","lastModifiedDate":"2022-03-20"},{"lineNumber":395,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":396,"author":{"gitId":"warrencxw"},"content":"    private static boolean containsDelimitersNotFromCommand(String commandType, String remainingArgs) {","lastModifiedDate":"2022-03-20"},{"lineNumber":397,"author":{"gitId":"warrencxw"},"content":"        assert commandType !\u003d null : Message.ASSERT_PARSER_COMMAND_TYPE_NULL;","lastModifiedDate":"2022-03-20"},{"lineNumber":398,"author":{"gitId":"warrencxw"},"content":"        assert remainingArgs !\u003d null : Message.ASSERT_PARSER_COMMAND_ARGUMENTS_NULL;","lastModifiedDate":"2022-03-20"},{"lineNumber":399,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-20"},{"lineNumber":400,"author":{"gitId":"warrencxw"},"content":"        String[] delimiterList;","lastModifiedDate":"2022-03-20"},{"lineNumber":401,"author":{"gitId":"warrencxw"},"content":"        switch (commandType) {","lastModifiedDate":"2022-03-20"},{"lineNumber":402,"author":{"gitId":"ivanaitzliddat"},"content":"        case ActivityCreateCommandParser.COMMAND_TEXT:","lastModifiedDate":"2022-03-24"},{"lineNumber":403,"author":{"gitId":"ivanaitzliddat"},"content":"            delimiterList \u003d ActivityCreateCommandParser.COMMAND_DELIMITERS;","lastModifiedDate":"2022-03-24"},{"lineNumber":404,"author":{"gitId":"warrencxw"},"content":"            break;","lastModifiedDate":"2022-03-20"},{"lineNumber":405,"author":{"gitId":"warrencxw"},"content":"        case ActivityDeleteCommand.COMMAND_TEXT:","lastModifiedDate":"2022-03-20"},{"lineNumber":406,"author":{"gitId":"warrencxw"},"content":"            delimiterList \u003d ActivityDeleteCommand.COMMAND_DELIMITERS;","lastModifiedDate":"2022-03-20"},{"lineNumber":407,"author":{"gitId":"warrencxw"},"content":"            break;","lastModifiedDate":"2022-03-20"},{"lineNumber":408,"author":{"gitId":"warrencxw"},"content":"        case ActivityListCommand.COMMAND_TEXT:","lastModifiedDate":"2022-03-20"},{"lineNumber":409,"author":{"gitId":"warrencxw"},"content":"            delimiterList \u003d ActivityListCommand.COMMAND_DELIMITERS;","lastModifiedDate":"2022-03-20"},{"lineNumber":410,"author":{"gitId":"warrencxw"},"content":"            break;","lastModifiedDate":"2022-03-20"},{"lineNumber":411,"author":{"gitId":"warrencxw"},"content":"        case ActivityViewCommand.COMMAND_TEXT:","lastModifiedDate":"2022-03-20"},{"lineNumber":412,"author":{"gitId":"warrencxw"},"content":"            delimiterList \u003d ActivityViewCommand.COMMAND_DELIMITERS;","lastModifiedDate":"2022-03-20"},{"lineNumber":413,"author":{"gitId":"warrencxw"},"content":"            break;","lastModifiedDate":"2022-03-20"},{"lineNumber":414,"author":{"gitId":"froststein"},"content":"        case SessionCreateCommandParser.COMMAND_TEXT:","lastModifiedDate":"2022-03-25"},{"lineNumber":415,"author":{"gitId":"froststein"},"content":"            delimiterList \u003d SessionCreateCommandParser.COMMAND_DELIMITERS;","lastModifiedDate":"2022-03-25"},{"lineNumber":416,"author":{"gitId":"warrencxw"},"content":"            break;","lastModifiedDate":"2022-03-20"},{"lineNumber":417,"author":{"gitId":"warrencxw"},"content":"        case SessionDeleteCommand.COMMAND_TEXT:","lastModifiedDate":"2022-03-20"},{"lineNumber":418,"author":{"gitId":"warrencxw"},"content":"            delimiterList \u003d SessionDeleteCommand.COMMAND_DELIMITERS;","lastModifiedDate":"2022-03-20"},{"lineNumber":419,"author":{"gitId":"warrencxw"},"content":"            break;","lastModifiedDate":"2022-03-20"},{"lineNumber":420,"author":{"gitId":"warrencxw"},"content":"        case SessionSummaryCommandParser.COMMAND_TEXT:","lastModifiedDate":"2022-03-22"},{"lineNumber":421,"author":{"gitId":"warrencxw"},"content":"            delimiterList \u003d SessionSummaryCommandParser.COMMAND_DELIMITERS;","lastModifiedDate":"2022-03-22"},{"lineNumber":422,"author":{"gitId":"warrencxw"},"content":"            break;","lastModifiedDate":"2022-03-20"},{"lineNumber":423,"author":{"gitId":"warrencxw"},"content":"        case GroupCreateCommand.COMMAND_TEXT:","lastModifiedDate":"2022-03-20"},{"lineNumber":424,"author":{"gitId":"warrencxw"},"content":"            delimiterList \u003d GroupCreateCommand.COMMAND_DELIMITERS;","lastModifiedDate":"2022-03-20"},{"lineNumber":425,"author":{"gitId":"warrencxw"},"content":"            break;","lastModifiedDate":"2022-03-20"},{"lineNumber":426,"author":{"gitId":"warrencxw"},"content":"        case GroupDeleteCommand.COMMAND_TEXT:","lastModifiedDate":"2022-03-20"},{"lineNumber":427,"author":{"gitId":"warrencxw"},"content":"            delimiterList \u003d GroupDeleteCommand.COMMAND_DELIMITERS;","lastModifiedDate":"2022-03-20"},{"lineNumber":428,"author":{"gitId":"warrencxw"},"content":"            break;","lastModifiedDate":"2022-03-20"},{"lineNumber":429,"author":{"gitId":"ivanaitzliddat"},"content":"        case GroupViewCommand.COMMAND_TEXT:","lastModifiedDate":"2022-03-20"},{"lineNumber":430,"author":{"gitId":"ivanaitzliddat"},"content":"            delimiterList \u003d GroupViewCommand.COMMAND_DELIMITERS;","lastModifiedDate":"2022-03-20"},{"lineNumber":431,"author":{"gitId":"ivanaitzliddat"},"content":"            break;","lastModifiedDate":"2022-03-20"},{"lineNumber":432,"author":{"gitId":"warrencxw"},"content":"        default:","lastModifiedDate":"2022-03-20"},{"lineNumber":433,"author":{"gitId":"warrencxw"},"content":"            return !remainingArgs.isEmpty();","lastModifiedDate":"2022-03-20"},{"lineNumber":434,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-20"},{"lineNumber":435,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":436,"author":{"gitId":"warrencxw"},"content":"        String[] argumentTokens \u003d remainingArgs.split(REGEX_WHITESPACES_DELIMITER);","lastModifiedDate":"2022-03-20"},{"lineNumber":437,"author":{"gitId":"warrencxw"},"content":"        for (String token : argumentTokens) {","lastModifiedDate":"2022-03-20"},{"lineNumber":438,"author":{"gitId":"warrencxw"},"content":"            if (token.contains(DELIMITER_INDICATOR) \u0026\u0026 !hasStringInStringArray(token, delimiterList)) {","lastModifiedDate":"2022-03-20"},{"lineNumber":439,"author":{"gitId":"warrencxw"},"content":"                return true;","lastModifiedDate":"2022-03-20"},{"lineNumber":440,"author":{"gitId":"warrencxw"},"content":"            }","lastModifiedDate":"2022-03-20"},{"lineNumber":441,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-20"},{"lineNumber":442,"author":{"gitId":"warrencxw"},"content":"        return false;","lastModifiedDate":"2022-03-20"},{"lineNumber":443,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":444,"author":{"gitId":"warrencxw"},"content":"    ","lastModifiedDate":"2022-03-20"},{"lineNumber":445,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":446,"author":{"gitId":"warrencxw"},"content":"     * Checks if the provided String object representing the command type of the command input from the user,","lastModifiedDate":"2022-03-20"},{"lineNumber":447,"author":{"gitId":"warrencxw"},"content":"     * is a valid command type in SplitLah.","lastModifiedDate":"2022-03-20"},{"lineNumber":448,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-20"},{"lineNumber":449,"author":{"gitId":"warrencxw"},"content":"     * @param commandType   A String object representing the command type of the command input from the user.","lastModifiedDate":"2022-03-20"},{"lineNumber":450,"author":{"gitId":"warrencxw"},"content":"     * @return true if the provided String object is a command type available in SplitLah,","lastModifiedDate":"2022-03-20"},{"lineNumber":451,"author":{"gitId":"warrencxw"},"content":"     *         false otherwise.","lastModifiedDate":"2022-03-20"},{"lineNumber":452,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":453,"author":{"gitId":"warrencxw"},"content":"    private static boolean isValidCommandType(String commandType) {","lastModifiedDate":"2022-03-20"},{"lineNumber":454,"author":{"gitId":"warrencxw"},"content":"        assert commandType !\u003d null : Message.ASSERT_PARSER_COMMAND_TYPE_NULL;","lastModifiedDate":"2022-03-20"},{"lineNumber":455,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-20"},{"lineNumber":456,"author":{"gitId":"warrencxw"},"content":"        switch (commandType.toLowerCase()) {","lastModifiedDate":"2022-03-20"},{"lineNumber":457,"author":{"gitId":"froststein"},"content":"        case SessionCreateCommandParser.COMMAND_TEXT:","lastModifiedDate":"2022-03-25"},{"lineNumber":458,"author":{"gitId":"warrencxw"},"content":"            // Fallthrough","lastModifiedDate":"2022-03-20"},{"lineNumber":459,"author":{"gitId":"warrencxw"},"content":"        case SessionDeleteCommand.COMMAND_TEXT:","lastModifiedDate":"2022-03-20"},{"lineNumber":460,"author":{"gitId":"warrencxw"},"content":"            // Fallthrough","lastModifiedDate":"2022-03-20"},{"lineNumber":461,"author":{"gitId":"warrencxw"},"content":"        case SessionSummaryCommandParser.COMMAND_TEXT:","lastModifiedDate":"2022-03-22"},{"lineNumber":462,"author":{"gitId":"warrencxw"},"content":"            // Fallthrough","lastModifiedDate":"2022-03-20"},{"lineNumber":463,"author":{"gitId":"froststein"},"content":"        case SessionListCommandParser.COMMAND_TEXT:","lastModifiedDate":"2022-03-23"},{"lineNumber":464,"author":{"gitId":"warrencxw"},"content":"            // Fallthrough","lastModifiedDate":"2022-03-20"},{"lineNumber":465,"author":{"gitId":"ivanaitzliddat"},"content":"        case ActivityCreateCommandParser.COMMAND_TEXT:","lastModifiedDate":"2022-03-24"},{"lineNumber":466,"author":{"gitId":"warrencxw"},"content":"            // Fallthrough","lastModifiedDate":"2022-03-20"},{"lineNumber":467,"author":{"gitId":"warrencxw"},"content":"        case ActivityDeleteCommand.COMMAND_TEXT:","lastModifiedDate":"2022-03-20"},{"lineNumber":468,"author":{"gitId":"warrencxw"},"content":"            // Fallthrough","lastModifiedDate":"2022-03-20"},{"lineNumber":469,"author":{"gitId":"warrencxw"},"content":"        case ActivityListCommand.COMMAND_TEXT:","lastModifiedDate":"2022-03-20"},{"lineNumber":470,"author":{"gitId":"warrencxw"},"content":"            // Fallthrough","lastModifiedDate":"2022-03-20"},{"lineNumber":471,"author":{"gitId":"warrencxw"},"content":"        case ActivityViewCommand.COMMAND_TEXT:","lastModifiedDate":"2022-03-20"},{"lineNumber":472,"author":{"gitId":"warrencxw"},"content":"            // Fallthrough","lastModifiedDate":"2022-03-20"},{"lineNumber":473,"author":{"gitId":"warrencxw"},"content":"        case GroupCreateCommand.COMMAND_TEXT:","lastModifiedDate":"2022-03-20"},{"lineNumber":474,"author":{"gitId":"warrencxw"},"content":"            // Fallthrough","lastModifiedDate":"2022-03-20"},{"lineNumber":475,"author":{"gitId":"warrencxw"},"content":"        case GroupDeleteCommand.COMMAND_TEXT:","lastModifiedDate":"2022-03-20"},{"lineNumber":476,"author":{"gitId":"warrencxw"},"content":"            // Fallthrough","lastModifiedDate":"2022-03-20"},{"lineNumber":477,"author":{"gitId":"ivanaitzliddat"},"content":"        case GroupListCommand.COMMAND_TEXT:","lastModifiedDate":"2022-03-21"},{"lineNumber":478,"author":{"gitId":"ivanaitzliddat"},"content":"            // Fallthrough","lastModifiedDate":"2022-03-21"},{"lineNumber":479,"author":{"gitId":"ivanaitzliddat"},"content":"        case GroupViewCommand.COMMAND_TEXT:","lastModifiedDate":"2022-03-20"},{"lineNumber":480,"author":{"gitId":"ivanaitzliddat"},"content":"            // Fallthrough","lastModifiedDate":"2022-03-20"},{"lineNumber":481,"author":{"gitId":"warrencxw"},"content":"        case HelpCommandParser.COMMAND_TEXT:","lastModifiedDate":"2022-03-22"},{"lineNumber":482,"author":{"gitId":"warrencxw"},"content":"            // Fallthrough","lastModifiedDate":"2022-03-20"},{"lineNumber":483,"author":{"gitId":"warrencxw"},"content":"        case ExitCommand.COMMAND_TEXT:","lastModifiedDate":"2022-03-20"},{"lineNumber":484,"author":{"gitId":"warrencxw"},"content":"            // Fallthrough","lastModifiedDate":"2022-03-20"},{"lineNumber":485,"author":{"gitId":"warrencxw"},"content":"            return true;","lastModifiedDate":"2022-03-20"},{"lineNumber":486,"author":{"gitId":"warrencxw"},"content":"        default:","lastModifiedDate":"2022-03-20"},{"lineNumber":487,"author":{"gitId":"warrencxw"},"content":"            return false;","lastModifiedDate":"2022-03-20"},{"lineNumber":488,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-20"},{"lineNumber":489,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":490,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":491,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":492,"author":{"gitId":"warrencxw"},"content":"     * Returns a String object that represents a corresponding error message for the first error check to be failed,","lastModifiedDate":"2022-03-20"},{"lineNumber":493,"author":{"gitId":"warrencxw"},"content":"     * when checking for validity of arguments for a specified command.","lastModifiedDate":"2022-03-20"},{"lineNumber":494,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-03-20"},{"lineNumber":495,"author":{"gitId":"warrencxw"},"content":"     * @param commandType   A String object representing the command type of the command input from the user.","lastModifiedDate":"2022-03-20"},{"lineNumber":496,"author":{"gitId":"warrencxw"},"content":"     * @param remainingArgs A String object containing the arguments portion of the entire command input from the user.","lastModifiedDate":"2022-03-20"},{"lineNumber":497,"author":{"gitId":"warrencxw"},"content":"     * @return A String object with the first error check to be failed, if any, or","lastModifiedDate":"2022-03-20"},{"lineNumber":498,"author":{"gitId":"warrencxw"},"content":"     *         an empty String object if remainingArgs is empty or if none of the error checks fail.","lastModifiedDate":"2022-03-20"},{"lineNumber":499,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":500,"author":{"gitId":"warrencxw"},"content":"    static String checkIfArgumentsValidForCommand(String commandType, String remainingArgs) {","lastModifiedDate":"2022-03-20"},{"lineNumber":501,"author":{"gitId":"warrencxw"},"content":"        assert commandType !\u003d null : Message.ASSERT_PARSER_COMMAND_TYPE_NULL;","lastModifiedDate":"2022-03-20"},{"lineNumber":502,"author":{"gitId":"warrencxw"},"content":"        assert remainingArgs !\u003d null : Message.ASSERT_PARSER_COMMAND_ARGUMENTS_NULL;","lastModifiedDate":"2022-03-20"},{"lineNumber":503,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-20"},{"lineNumber":504,"author":{"gitId":"warrencxw"},"content":"        if (remainingArgs.isEmpty()) {","lastModifiedDate":"2022-03-20"},{"lineNumber":505,"author":{"gitId":"warrencxw"},"content":"            return \"\";","lastModifiedDate":"2022-03-20"},{"lineNumber":506,"author":{"gitId":"warrencxw"},"content":"        } else if (!remainingArgs.startsWith(DELIMITER_INDICATOR)) {","lastModifiedDate":"2022-03-20"},{"lineNumber":507,"author":{"gitId":"warrencxw"},"content":"            return Message.ERROR_PARSER_ADDITIONAL_INVALID_TOKEN;","lastModifiedDate":"2022-03-20"},{"lineNumber":508,"author":{"gitId":"warrencxw"},"content":"        } else if (containsInvalidDelimiters(remainingArgs)","lastModifiedDate":"2022-03-20"},{"lineNumber":509,"author":{"gitId":"warrencxw"},"content":"                || containsDelimitersNotFromCommand(commandType, remainingArgs)) {","lastModifiedDate":"2022-03-20"},{"lineNumber":510,"author":{"gitId":"warrencxw"},"content":"            return Message.ERROR_PARSER_INVALID_DELIMITERS;","lastModifiedDate":"2022-03-20"},{"lineNumber":511,"author":{"gitId":"warrencxw"},"content":"        } else if (containsDuplicateDelimiters(remainingArgs)) {","lastModifiedDate":"2022-03-20"},{"lineNumber":512,"author":{"gitId":"warrencxw"},"content":"            return Message.ERROR_PARSER_DUPLICATE_DELIMITERS;","lastModifiedDate":"2022-03-20"},{"lineNumber":513,"author":{"gitId":"warrencxw"},"content":"        } else {","lastModifiedDate":"2022-03-20"},{"lineNumber":514,"author":{"gitId":"warrencxw"},"content":"            return \"\";","lastModifiedDate":"2022-03-20"},{"lineNumber":515,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-20"},{"lineNumber":516,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":517,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":518,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-20"},{"lineNumber":519,"author":{"gitId":"warrencxw"},"content":"     * Returns a String object that represents a corresponding error message for the first error check to be failed,","lastModifiedDate":"2022-03-20"},{"lineNumber":520,"author":{"gitId":"warrencxw"},"content":"     * when checking for validity of the command type followed by the validity of the command arguments.","lastModifiedDate":"2022-03-20"},{"lineNumber":521,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-03-20"},{"lineNumber":522,"author":{"gitId":"warrencxw"},"content":"     * @param commandType   A String object representing the command type of the command input from the user.","lastModifiedDate":"2022-03-20"},{"lineNumber":523,"author":{"gitId":"warrencxw"},"content":"     * @param remainingArgs A String object containing the arguments portion of the entire command input from the user.","lastModifiedDate":"2022-03-20"},{"lineNumber":524,"author":{"gitId":"warrencxw"},"content":"     * @return A String object with the first error check to be failed, if any, or","lastModifiedDate":"2022-03-20"},{"lineNumber":525,"author":{"gitId":"warrencxw"},"content":"     *         an empty String object if remainingArgs is empty or if none of the error checks fail.","lastModifiedDate":"2022-03-20"},{"lineNumber":526,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-20"},{"lineNumber":527,"author":{"gitId":"ivanaitzliddat"},"content":"    public static String checkIfCommandIsValid(String commandType, String remainingArgs) {","lastModifiedDate":"2022-03-25"},{"lineNumber":528,"author":{"gitId":"warrencxw"},"content":"        assert commandType !\u003d null : Message.ASSERT_PARSER_COMMAND_TYPE_NULL;","lastModifiedDate":"2022-03-20"},{"lineNumber":529,"author":{"gitId":"warrencxw"},"content":"        assert remainingArgs !\u003d null : Message.ASSERT_PARSER_COMMAND_ARGUMENTS_NULL;","lastModifiedDate":"2022-03-20"},{"lineNumber":530,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":531,"author":{"gitId":"warrencxw"},"content":"        if (commandType.isEmpty()) {","lastModifiedDate":"2022-03-20"},{"lineNumber":532,"author":{"gitId":"warrencxw"},"content":"            return Message.ERROR_PARSER_EMPTY_COMMAND;","lastModifiedDate":"2022-03-20"},{"lineNumber":533,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-20"},{"lineNumber":534,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-20"},{"lineNumber":535,"author":{"gitId":"warrencxw"},"content":"        if (!isValidCommandType(commandType)) {","lastModifiedDate":"2022-03-20"},{"lineNumber":536,"author":{"gitId":"warrencxw"},"content":"            return Message.ERROR_PARSER_INVALID_COMMAND;","lastModifiedDate":"2022-03-20"},{"lineNumber":537,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-20"},{"lineNumber":538,"author":{"gitId":"warrencxw"},"content":"        return checkIfArgumentsValidForCommand(commandType, remainingArgs);","lastModifiedDate":"2022-03-20"},{"lineNumber":539,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-20"},{"lineNumber":540,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-03-20"}],"authorContributionMap":{"ivanaitzliddat":14,"warrencxw":520,"froststein":6}},{"path":"src/main/java/seedu/splitlah/parser/commandparser/ActivityCreateCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ivanaitzliddat"},"content":"package seedu.splitlah.parser.commandparser;","lastModifiedDate":"2022-03-24"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.command.ActivityCreateCommand;","lastModifiedDate":"2022-03-24"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.exceptions.InvalidFormatException;","lastModifiedDate":"2022-03-24"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.parser.Parser;","lastModifiedDate":"2022-03-24"},{"lineNumber":6,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.parser.ParserUtils;","lastModifiedDate":"2022-03-24"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-24"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"/**","lastModifiedDate":"2022-03-24"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":" * Represents a command parser that is able to parse user arguments into an ActivityCreateCommand object.","lastModifiedDate":"2022-03-24"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":" */","lastModifiedDate":"2022-03-24"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":"public class ActivityCreateCommandParser implements CommandParser\u003cActivityCreateCommand\u003e {","lastModifiedDate":"2022-03-24"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":14,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String COMMAND_TEXT \u003d \"activity /create\";","lastModifiedDate":"2022-03-24"},{"lineNumber":15,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":16,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String COMMAND_FORMAT \u003d \"Syntax:\\n\\t\";","lastModifiedDate":"2022-03-24"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String COMMAND_FORMAT_FIRST \u003d","lastModifiedDate":"2022-03-24"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":"            \"activity /create /sid [SESSION_ID] /n [ACTIVITY_NAME] /p [PAYER] /i [NAME1 NAME2...] \"","lastModifiedDate":"2022-03-25"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"                    + \"/co [TOTAL_COST] [\u003c/gst [GST_PERCENTAGE]\u003e] [\u003c/sc [SERVICE_CHARGE]\u003e]\";","lastModifiedDate":"2022-03-25"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":22,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String COMMAND_FORMAT_SECOND \u003d","lastModifiedDate":"2022-03-24"},{"lineNumber":23,"author":{"gitId":"ivanaitzliddat"},"content":"            \"activity /create /sid [SESSION_ID] /n [ACTIVITY_NAME] /p [PAYER] /i [NAME1 NAME2...] \"","lastModifiedDate":"2022-03-25"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"                    + \"/cl [COST1 COST2...] [\u003c/gst [GST_PERCENTAGE]\u003e] [\u003c/sc [SERVICE_CHARGE]\u003e]\";","lastModifiedDate":"2022-03-25"},{"lineNumber":25,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":26,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String[] COMMAND_DELIMITERS \u003d {","lastModifiedDate":"2022-03-24"},{"lineNumber":27,"author":{"gitId":"ivanaitzliddat"},"content":"        ParserUtils.SESSION_ID_DELIMITER,","lastModifiedDate":"2022-03-24"},{"lineNumber":28,"author":{"gitId":"ivanaitzliddat"},"content":"        ParserUtils.NAME_DELIMITER,","lastModifiedDate":"2022-03-24"},{"lineNumber":29,"author":{"gitId":"ivanaitzliddat"},"content":"        ParserUtils.PAYER_DELIMITER,","lastModifiedDate":"2022-03-24"},{"lineNumber":30,"author":{"gitId":"ivanaitzliddat"},"content":"        ParserUtils.INVOLVED_DELIMITER,","lastModifiedDate":"2022-03-24"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"        ParserUtils.TOTAL_COST_DELIMITER,","lastModifiedDate":"2022-03-24"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"        ParserUtils.COST_LIST_DELIMITER,","lastModifiedDate":"2022-03-24"},{"lineNumber":33,"author":{"gitId":"ivanaitzliddat"},"content":"        ParserUtils.GST_DELIMITER,","lastModifiedDate":"2022-03-24"},{"lineNumber":34,"author":{"gitId":"ivanaitzliddat"},"content":"        ParserUtils.SERVICE_CHARGE_DELIMITER","lastModifiedDate":"2022-03-24"},{"lineNumber":35,"author":{"gitId":"ivanaitzliddat"},"content":"    };","lastModifiedDate":"2022-03-24"},{"lineNumber":36,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":37,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-24"},{"lineNumber":38,"author":{"gitId":"ivanaitzliddat"},"content":"     * Returns a ActivityCreateCommand object after parsing the input arguments from the user.","lastModifiedDate":"2022-03-24"},{"lineNumber":39,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-03-24"},{"lineNumber":40,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param commandArgs A String object representing arguments provided by the user.","lastModifiedDate":"2022-03-24"},{"lineNumber":41,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return An ActivityCreateCommand object if all necessary parameters required are found in the input arguments.","lastModifiedDate":"2022-03-24"},{"lineNumber":42,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws InvalidFormatException If at least one of the necessary parameters cannot be found","lastModifiedDate":"2022-03-24"},{"lineNumber":43,"author":{"gitId":"ivanaitzliddat"},"content":"     *                                in the input arguments.","lastModifiedDate":"2022-03-24"},{"lineNumber":44,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-24"},{"lineNumber":45,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-03-24"},{"lineNumber":46,"author":{"gitId":"ivanaitzliddat"},"content":"    public ActivityCreateCommand getCommand(String commandArgs) throws InvalidFormatException {","lastModifiedDate":"2022-03-24"},{"lineNumber":47,"author":{"gitId":"ivanaitzliddat"},"content":"        int sessionId;","lastModifiedDate":"2022-03-24"},{"lineNumber":48,"author":{"gitId":"ivanaitzliddat"},"content":"        String activityName;","lastModifiedDate":"2022-03-24"},{"lineNumber":49,"author":{"gitId":"ivanaitzliddat"},"content":"        String payer;","lastModifiedDate":"2022-03-24"},{"lineNumber":50,"author":{"gitId":"ivanaitzliddat"},"content":"        String[] involvedList;","lastModifiedDate":"2022-03-24"},{"lineNumber":51,"author":{"gitId":"ivanaitzliddat"},"content":"        double totalCost \u003d 0;","lastModifiedDate":"2022-03-24"},{"lineNumber":52,"author":{"gitId":"ivanaitzliddat"},"content":"        double[] costList \u003d null;","lastModifiedDate":"2022-03-24"},{"lineNumber":53,"author":{"gitId":"ivanaitzliddat"},"content":"        double gst;","lastModifiedDate":"2022-03-24"},{"lineNumber":54,"author":{"gitId":"ivanaitzliddat"},"content":"        double serviceCharge;","lastModifiedDate":"2022-03-24"},{"lineNumber":55,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":56,"author":{"gitId":"ivanaitzliddat"},"content":"        try {","lastModifiedDate":"2022-03-24"},{"lineNumber":57,"author":{"gitId":"ivanaitzliddat"},"content":"            sessionId \u003d Parser.parseSessionId(commandArgs);","lastModifiedDate":"2022-03-24"},{"lineNumber":58,"author":{"gitId":"ivanaitzliddat"},"content":"            activityName \u003d Parser.parseName(commandArgs);","lastModifiedDate":"2022-03-24"},{"lineNumber":59,"author":{"gitId":"ivanaitzliddat"},"content":"            payer \u003d Parser.parsePayer(commandArgs);","lastModifiedDate":"2022-03-24"},{"lineNumber":60,"author":{"gitId":"ivanaitzliddat"},"content":"            involvedList \u003d Parser.parseInvolved(commandArgs);","lastModifiedDate":"2022-03-24"},{"lineNumber":61,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (InvalidFormatException e) {","lastModifiedDate":"2022-03-24"},{"lineNumber":62,"author":{"gitId":"ivanaitzliddat"},"content":"            throw new InvalidFormatException(e.getMessage() + \"\\n\" + COMMAND_FORMAT + COMMAND_FORMAT_FIRST + \"\\n\\t\"","lastModifiedDate":"2022-03-24"},{"lineNumber":63,"author":{"gitId":"ivanaitzliddat"},"content":"                    + COMMAND_FORMAT_SECOND);","lastModifiedDate":"2022-03-24"},{"lineNumber":64,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-24"},{"lineNumber":65,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":66,"author":{"gitId":"ivanaitzliddat"},"content":"        boolean isMissingCost \u003d false;","lastModifiedDate":"2022-03-24"},{"lineNumber":67,"author":{"gitId":"ivanaitzliddat"},"content":"        boolean isMissingCostList \u003d false;","lastModifiedDate":"2022-03-24"},{"lineNumber":68,"author":{"gitId":"ivanaitzliddat"},"content":"        boolean hasDifferentLength \u003d false;","lastModifiedDate":"2022-03-24"},{"lineNumber":69,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":70,"author":{"gitId":"ivanaitzliddat"},"content":"        try {","lastModifiedDate":"2022-03-24"},{"lineNumber":71,"author":{"gitId":"ivanaitzliddat"},"content":"            totalCost \u003d Parser.parseTotalCost(commandArgs);","lastModifiedDate":"2022-03-24"},{"lineNumber":72,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (InvalidFormatException e) {","lastModifiedDate":"2022-03-24"},{"lineNumber":73,"author":{"gitId":"ivanaitzliddat"},"content":"            if (!e.getMessage().equalsIgnoreCase(Message.ERROR_PARSER_DELIMITER_NOT_FOUND","lastModifiedDate":"2022-03-24"},{"lineNumber":74,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ParserUtils.TOTAL_COST_DELIMITER)) {","lastModifiedDate":"2022-03-24"},{"lineNumber":75,"author":{"gitId":"ivanaitzliddat"},"content":"                throw new InvalidFormatException(e.getMessage() + \"\\n\" + COMMAND_FORMAT + COMMAND_FORMAT_FIRST","lastModifiedDate":"2022-03-24"},{"lineNumber":76,"author":{"gitId":"ivanaitzliddat"},"content":"                        + \"\\n\\t\" + COMMAND_FORMAT_SECOND);","lastModifiedDate":"2022-03-24"},{"lineNumber":77,"author":{"gitId":"ivanaitzliddat"},"content":"            }","lastModifiedDate":"2022-03-24"},{"lineNumber":78,"author":{"gitId":"ivanaitzliddat"},"content":"            isMissingCost \u003d true;","lastModifiedDate":"2022-03-24"},{"lineNumber":79,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-24"},{"lineNumber":80,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":81,"author":{"gitId":"ivanaitzliddat"},"content":"        try {","lastModifiedDate":"2022-03-24"},{"lineNumber":82,"author":{"gitId":"ivanaitzliddat"},"content":"            costList \u003d Parser.parseCostList(commandArgs);","lastModifiedDate":"2022-03-24"},{"lineNumber":83,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (InvalidFormatException e) {","lastModifiedDate":"2022-03-24"},{"lineNumber":84,"author":{"gitId":"ivanaitzliddat"},"content":"            if (!e.getMessage().equalsIgnoreCase(Message.ERROR_PARSER_DELIMITER_NOT_FOUND","lastModifiedDate":"2022-03-24"},{"lineNumber":85,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ParserUtils.COST_LIST_DELIMITER)) {","lastModifiedDate":"2022-03-24"},{"lineNumber":86,"author":{"gitId":"ivanaitzliddat"},"content":"                throw new InvalidFormatException(e.getMessage() + \"\\n\" + COMMAND_FORMAT + COMMAND_FORMAT_FIRST","lastModifiedDate":"2022-03-24"},{"lineNumber":87,"author":{"gitId":"ivanaitzliddat"},"content":"                        + \"\\n\\t\" + COMMAND_FORMAT_SECOND);","lastModifiedDate":"2022-03-24"},{"lineNumber":88,"author":{"gitId":"ivanaitzliddat"},"content":"            }","lastModifiedDate":"2022-03-24"},{"lineNumber":89,"author":{"gitId":"ivanaitzliddat"},"content":"            isMissingCostList \u003d true;","lastModifiedDate":"2022-03-24"},{"lineNumber":90,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-24"},{"lineNumber":91,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":92,"author":{"gitId":"ivanaitzliddat"},"content":"        boolean hasMissingCostAndMissingCostList \u003d isMissingCostList \u0026\u0026 isMissingCost;","lastModifiedDate":"2022-03-24"},{"lineNumber":93,"author":{"gitId":"ivanaitzliddat"},"content":"        if (hasMissingCostAndMissingCostList) {","lastModifiedDate":"2022-03-24"},{"lineNumber":94,"author":{"gitId":"ivanaitzliddat"},"content":"            throw new InvalidFormatException(Message.ERROR_ACTIVITYCREATE_MISSING_COST_AND_COST_LIST","lastModifiedDate":"2022-03-24"},{"lineNumber":95,"author":{"gitId":"ivanaitzliddat"},"content":"                    + \"\\n\" + COMMAND_FORMAT + COMMAND_FORMAT_FIRST + \"\\n\\t\" + COMMAND_FORMAT_SECOND);","lastModifiedDate":"2022-03-24"},{"lineNumber":96,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-24"},{"lineNumber":97,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":98,"author":{"gitId":"ivanaitzliddat"},"content":"        boolean hasBothCostAndCostList \u003d !isMissingCostList \u0026\u0026 !isMissingCost;","lastModifiedDate":"2022-03-24"},{"lineNumber":99,"author":{"gitId":"ivanaitzliddat"},"content":"        if (hasBothCostAndCostList) {","lastModifiedDate":"2022-03-24"},{"lineNumber":100,"author":{"gitId":"ivanaitzliddat"},"content":"            throw new InvalidFormatException(Message.ERROR_ACTIVITYCREATE_HAS_BOTH_COST_AND_COST_LIST","lastModifiedDate":"2022-03-24"},{"lineNumber":101,"author":{"gitId":"ivanaitzliddat"},"content":"                    + \"\\n\" + COMMAND_FORMAT + COMMAND_FORMAT_FIRST + \"\\n\\t\" + COMMAND_FORMAT_SECOND);","lastModifiedDate":"2022-03-24"},{"lineNumber":102,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-24"},{"lineNumber":103,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":104,"author":{"gitId":"ivanaitzliddat"},"content":"        if (isMissingCost) {","lastModifiedDate":"2022-03-24"},{"lineNumber":105,"author":{"gitId":"ivanaitzliddat"},"content":"            hasDifferentLength \u003d involvedList.length !\u003d costList.length;","lastModifiedDate":"2022-03-24"},{"lineNumber":106,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-24"},{"lineNumber":107,"author":{"gitId":"ivanaitzliddat"},"content":"        if (hasDifferentLength) {","lastModifiedDate":"2022-03-24"},{"lineNumber":108,"author":{"gitId":"ivanaitzliddat"},"content":"            throw new InvalidFormatException(Message.ERROR_ACTIVITYCREATE_INVOLVED_AND_COST_DIFFERENT_LENGTH","lastModifiedDate":"2022-03-24"},{"lineNumber":109,"author":{"gitId":"ivanaitzliddat"},"content":"                    + \"\\n\" + COMMAND_FORMAT + COMMAND_FORMAT_FIRST + \"\\n\\t\" + COMMAND_FORMAT_SECOND);","lastModifiedDate":"2022-03-24"},{"lineNumber":110,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-24"},{"lineNumber":111,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":112,"author":{"gitId":"ivanaitzliddat"},"content":"        try {","lastModifiedDate":"2022-03-24"},{"lineNumber":113,"author":{"gitId":"ivanaitzliddat"},"content":"            gst \u003d Parser.parseGst(commandArgs);","lastModifiedDate":"2022-03-24"},{"lineNumber":114,"author":{"gitId":"ivanaitzliddat"},"content":"            serviceCharge \u003d Parser.parseServiceCharge(commandArgs);","lastModifiedDate":"2022-03-24"},{"lineNumber":115,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (InvalidFormatException e) {","lastModifiedDate":"2022-03-24"},{"lineNumber":116,"author":{"gitId":"ivanaitzliddat"},"content":"            throw new InvalidFormatException(e.getMessage() + \"\\n\" + COMMAND_FORMAT + COMMAND_FORMAT_FIRST","lastModifiedDate":"2022-03-24"},{"lineNumber":117,"author":{"gitId":"ivanaitzliddat"},"content":"                    + \"\\n\\t\" + COMMAND_FORMAT_SECOND);","lastModifiedDate":"2022-03-24"},{"lineNumber":118,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-24"},{"lineNumber":119,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":120,"author":{"gitId":"ivanaitzliddat"},"content":"        return new ActivityCreateCommand(sessionId, activityName, totalCost, payer, involvedList, costList, gst,","lastModifiedDate":"2022-03-24"},{"lineNumber":121,"author":{"gitId":"ivanaitzliddat"},"content":"                serviceCharge);","lastModifiedDate":"2022-03-24"},{"lineNumber":122,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-24"},{"lineNumber":123,"author":{"gitId":"ivanaitzliddat"},"content":"}","lastModifiedDate":"2022-03-24"}],"authorContributionMap":{"ivanaitzliddat":123}},{"path":"src/main/java/seedu/splitlah/parser/commandparser/CommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package seedu.splitlah.parser.commandparser;","lastModifiedDate":"2022-03-22"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.command.Command;","lastModifiedDate":"2022-03-22"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.exceptions.InvalidFormatException;","lastModifiedDate":"2022-03-22"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":" * Represents a command parser that is able to parse user arguments into an object of a subclass of Command.","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":" * ","lastModifiedDate":"2022-03-22"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":" * @param \u003cT\u003e A subclass of Command class.","lastModifiedDate":"2022-03-22"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-03-22"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"public interface CommandParser\u003cT extends Command\u003e {","lastModifiedDate":"2022-03-22"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"    ","lastModifiedDate":"2022-03-22"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"     * Returns an object of a subclass of Command given a String object representing arguments provided by the user.","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"     * @param commandArgs A String object representing arguments provided by the user.","lastModifiedDate":"2022-03-22"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"     * @return An object of a subclass of Command representing the parsed instructions of the user.","lastModifiedDate":"2022-03-22"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"    public T getCommand(String commandArgs) throws InvalidFormatException;","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-03-22"}],"authorContributionMap":{"warrencxw":20}},{"path":"src/main/java/seedu/splitlah/parser/commandparser/HelpCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package seedu.splitlah.parser.commandparser;","lastModifiedDate":"2022-03-22"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.command.HelpCommand;","lastModifiedDate":"2022-03-22"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.exceptions.InvalidFormatException;","lastModifiedDate":"2022-03-22"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":" * Represents a command parser that is able to parse user arguments into a HelpCommand object.","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-03-22"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":"public class HelpCommandParser implements CommandParser\u003cHelpCommand\u003e {","lastModifiedDate":"2022-03-22"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"    public static final String COMMAND_TEXT \u003d \"help\";","lastModifiedDate":"2022-03-22"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"    public static final String COMMAND_FORMAT \u003d \"Syntax: help\";","lastModifiedDate":"2022-03-22"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"     * Returns a HelpCommand object after parsing the input arguments from the user.","lastModifiedDate":"2022-03-22"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-22"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"     * @param commandArgs A String object representing arguments provided by the user.","lastModifiedDate":"2022-03-22"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"     * @return A HelpCommand object when method is called.","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"    @Override","lastModifiedDate":"2022-03-22"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"    public HelpCommand getCommand(String commandArgs) throws InvalidFormatException {","lastModifiedDate":"2022-03-22"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"        return new HelpCommand();","lastModifiedDate":"2022-03-22"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-03-22"}],"authorContributionMap":{"warrencxw":25}},{"path":"src/main/java/seedu/splitlah/parser/commandparser/SessionCreateCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah.parser.commandparser;","lastModifiedDate":"2022-03-25"},{"lineNumber":2,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.command.SessionCreateCommand;","lastModifiedDate":"2022-03-25"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.exceptions.InvalidFormatException;","lastModifiedDate":"2022-03-25"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.parser.Parser;","lastModifiedDate":"2022-03-25"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.parser.ParserUtils;","lastModifiedDate":"2022-03-25"},{"lineNumber":7,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-25"},{"lineNumber":8,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":9,"author":{"gitId":"froststein"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-03-25"},{"lineNumber":10,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":11,"author":{"gitId":"froststein"},"content":"/**","lastModifiedDate":"2022-03-25"},{"lineNumber":12,"author":{"gitId":"froststein"},"content":" * Represents a command parser that is able to parse user arguments into a SessionCreateCommand object.","lastModifiedDate":"2022-03-25"},{"lineNumber":13,"author":{"gitId":"froststein"},"content":" */","lastModifiedDate":"2022-03-25"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":"public class SessionCreateCommandParser implements CommandParser\u003cSessionCreateCommand\u003e {","lastModifiedDate":"2022-03-25"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":"    public static final String COMMAND_TEXT \u003d \"session /create\";","lastModifiedDate":"2022-03-25"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"    public static final String COMMAND_FORMAT \u003d","lastModifiedDate":"2022-03-25"},{"lineNumber":19,"author":{"gitId":"froststein"},"content":"            \"Syntax: session /create /n [SESSION_NAME] /d [SESSION_DATE] /pl [NAME1 NAME2...] \"","lastModifiedDate":"2022-03-25"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"                    + \"[\u003c/gid [GROUP_ID]\u003e]\";","lastModifiedDate":"2022-03-25"},{"lineNumber":21,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":22,"author":{"gitId":"froststein"},"content":"    public static final String[] COMMAND_DELIMITERS \u003d {","lastModifiedDate":"2022-03-25"},{"lineNumber":23,"author":{"gitId":"froststein"},"content":"        ParserUtils.NAME_DELIMITER,","lastModifiedDate":"2022-03-25"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"        ParserUtils.DATE_DELIMITER,","lastModifiedDate":"2022-03-25"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"        ParserUtils.PERSON_LIST_DELIMITER,","lastModifiedDate":"2022-03-25"},{"lineNumber":26,"author":{"gitId":"froststein"},"content":"        ParserUtils.GROUP_ID_DELIMITER","lastModifiedDate":"2022-03-25"},{"lineNumber":27,"author":{"gitId":"froststein"},"content":"    };","lastModifiedDate":"2022-03-25"},{"lineNumber":28,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":29,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-25"},{"lineNumber":30,"author":{"gitId":"froststein"},"content":"     * Returns a SessionCreateCommand object after parsing the input arguments from the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":31,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-25"},{"lineNumber":32,"author":{"gitId":"froststein"},"content":"     * @param commandArgs A String object representing arguments provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":33,"author":{"gitId":"froststein"},"content":"     * @return A SessionCreateCommand object if all necessary arguments required for the SessionCreateCommand object","lastModifiedDate":"2022-03-25"},{"lineNumber":34,"author":{"gitId":"froststein"},"content":"     *         to function are found in the input arguments.","lastModifiedDate":"2022-03-25"},{"lineNumber":35,"author":{"gitId":"froststein"},"content":"     * @throws InvalidFormatException If at least one of the necessary arguments cannot be found in the input arguments.","lastModifiedDate":"2022-03-25"},{"lineNumber":36,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-25"},{"lineNumber":37,"author":{"gitId":"froststein"},"content":"    @Override","lastModifiedDate":"2022-03-25"},{"lineNumber":38,"author":{"gitId":"froststein"},"content":"    public SessionCreateCommand getCommand(String commandArgs) throws InvalidFormatException {","lastModifiedDate":"2022-03-25"},{"lineNumber":39,"author":{"gitId":"froststein"},"content":"        assert commandArgs !\u003d null : Message.ASSERT_PARSER_COMMAND_ARGUMENTS_NULL;","lastModifiedDate":"2022-03-25"},{"lineNumber":40,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":41,"author":{"gitId":"froststein"},"content":"        boolean hasPersonListDelimiter \u003d false;","lastModifiedDate":"2022-03-25"},{"lineNumber":42,"author":{"gitId":"froststein"},"content":"        String [] parsedNames \u003d null;","lastModifiedDate":"2022-03-25"},{"lineNumber":43,"author":{"gitId":"froststein"},"content":"        try {","lastModifiedDate":"2022-03-25"},{"lineNumber":44,"author":{"gitId":"froststein"},"content":"            parsedNames \u003d Parser.parsePersonList(commandArgs);","lastModifiedDate":"2022-03-25"},{"lineNumber":45,"author":{"gitId":"froststein"},"content":"            hasPersonListDelimiter \u003d true;","lastModifiedDate":"2022-03-25"},{"lineNumber":46,"author":{"gitId":"froststein"},"content":"        } catch (InvalidFormatException formatException) {","lastModifiedDate":"2022-03-25"},{"lineNumber":47,"author":{"gitId":"froststein"},"content":"            if (!formatException.getMessage().equalsIgnoreCase(Message.ERROR_PARSER_DELIMITER_NOT_FOUND","lastModifiedDate":"2022-03-25"},{"lineNumber":48,"author":{"gitId":"froststein"},"content":"                    + ParserUtils.PERSON_LIST_DELIMITER)) {","lastModifiedDate":"2022-03-25"},{"lineNumber":49,"author":{"gitId":"froststein"},"content":"                String invalidCommandMessage \u003d formatException.getMessage() + \"\\n\" +  COMMAND_FORMAT;","lastModifiedDate":"2022-03-25"},{"lineNumber":50,"author":{"gitId":"froststein"},"content":"                throw new InvalidFormatException(invalidCommandMessage);","lastModifiedDate":"2022-03-25"},{"lineNumber":51,"author":{"gitId":"froststein"},"content":"            }","lastModifiedDate":"2022-03-25"},{"lineNumber":52,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":53,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":54,"author":{"gitId":"froststein"},"content":"        boolean hasGroupIdDelimiter \u003d false;","lastModifiedDate":"2022-03-25"},{"lineNumber":55,"author":{"gitId":"froststein"},"content":"        int groupId \u003d -1;","lastModifiedDate":"2022-03-25"},{"lineNumber":56,"author":{"gitId":"froststein"},"content":"        try {","lastModifiedDate":"2022-03-25"},{"lineNumber":57,"author":{"gitId":"froststein"},"content":"            groupId \u003d Parser.parseGroupId(commandArgs);","lastModifiedDate":"2022-03-25"},{"lineNumber":58,"author":{"gitId":"froststein"},"content":"            hasGroupIdDelimiter \u003d true;","lastModifiedDate":"2022-03-25"},{"lineNumber":59,"author":{"gitId":"froststein"},"content":"        } catch (InvalidFormatException formatException) {","lastModifiedDate":"2022-03-25"},{"lineNumber":60,"author":{"gitId":"froststein"},"content":"            if (!formatException.getMessage().equalsIgnoreCase(Message.ERROR_PARSER_DELIMITER_NOT_FOUND","lastModifiedDate":"2022-03-25"},{"lineNumber":61,"author":{"gitId":"froststein"},"content":"                    + ParserUtils.GROUP_ID_DELIMITER)) {","lastModifiedDate":"2022-03-25"},{"lineNumber":62,"author":{"gitId":"froststein"},"content":"                String invalidCommandMessage \u003d formatException.getMessage() + \"\\n\" + COMMAND_FORMAT;","lastModifiedDate":"2022-03-25"},{"lineNumber":63,"author":{"gitId":"froststein"},"content":"                throw new InvalidFormatException(invalidCommandMessage);","lastModifiedDate":"2022-03-25"},{"lineNumber":64,"author":{"gitId":"froststein"},"content":"            }","lastModifiedDate":"2022-03-25"},{"lineNumber":65,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":66,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":67,"author":{"gitId":"froststein"},"content":"        boolean isMissingBothDelimiters \u003d !hasPersonListDelimiter \u0026\u0026 !hasGroupIdDelimiter;","lastModifiedDate":"2022-03-25"},{"lineNumber":68,"author":{"gitId":"froststein"},"content":"        if (isMissingBothDelimiters) {","lastModifiedDate":"2022-03-25"},{"lineNumber":69,"author":{"gitId":"froststein"},"content":"            String invalidCommandMessage \u003d Message.ERROR_SESSIONCREATE_MISSING_PERSONLIST_AND_GROUP_DELIMITERS + \"\\n\"","lastModifiedDate":"2022-03-25"},{"lineNumber":70,"author":{"gitId":"froststein"},"content":"                    + COMMAND_FORMAT;","lastModifiedDate":"2022-03-25"},{"lineNumber":71,"author":{"gitId":"froststein"},"content":"            throw new InvalidFormatException(invalidCommandMessage);","lastModifiedDate":"2022-03-25"},{"lineNumber":72,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":73,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":74,"author":{"gitId":"froststein"},"content":"        try {","lastModifiedDate":"2022-03-25"},{"lineNumber":75,"author":{"gitId":"froststein"},"content":"            String parsedSessionName \u003d Parser.parseName(commandArgs);","lastModifiedDate":"2022-03-25"},{"lineNumber":76,"author":{"gitId":"froststein"},"content":"            LocalDate parsedSessionDate \u003d Parser.parseLocalDate(commandArgs);","lastModifiedDate":"2022-03-25"},{"lineNumber":77,"author":{"gitId":"froststein"},"content":"            return new SessionCreateCommand(parsedSessionName, parsedNames, parsedSessionDate, groupId);","lastModifiedDate":"2022-03-25"},{"lineNumber":78,"author":{"gitId":"froststein"},"content":"        } catch (InvalidFormatException formatException) {","lastModifiedDate":"2022-03-25"},{"lineNumber":79,"author":{"gitId":"froststein"},"content":"            String invalidCommandMessage \u003d formatException.getMessage() + \"\\n\" + COMMAND_FORMAT;","lastModifiedDate":"2022-03-25"},{"lineNumber":80,"author":{"gitId":"froststein"},"content":"            throw new InvalidFormatException(invalidCommandMessage);","lastModifiedDate":"2022-03-25"},{"lineNumber":81,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":82,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-25"},{"lineNumber":83,"author":{"gitId":"froststein"},"content":"}","lastModifiedDate":"2022-03-25"}],"authorContributionMap":{"froststein":83}},{"path":"src/main/java/seedu/splitlah/parser/commandparser/SessionListCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah.parser.commandparser;","lastModifiedDate":"2022-03-23"},{"lineNumber":2,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.command.SessionListCommand;","lastModifiedDate":"2022-03-23"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.exceptions.InvalidFormatException;","lastModifiedDate":"2022-03-23"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":"/**","lastModifiedDate":"2022-03-23"},{"lineNumber":7,"author":{"gitId":"froststein"},"content":" * Represents a command parser that is able to parse user arguments into a SessionListCommand object.","lastModifiedDate":"2022-03-23"},{"lineNumber":8,"author":{"gitId":"froststein"},"content":" */","lastModifiedDate":"2022-03-23"},{"lineNumber":9,"author":{"gitId":"froststein"},"content":"public class SessionListCommandParser implements CommandParser\u003cSessionListCommand\u003e {","lastModifiedDate":"2022-03-23"},{"lineNumber":10,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":11,"author":{"gitId":"froststein"},"content":"    public static final String COMMAND_TEXT \u003d \"session /list\";","lastModifiedDate":"2022-03-23"},{"lineNumber":12,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":13,"author":{"gitId":"froststein"},"content":"    public static final String COMMAND_FORMAT \u003d \"Syntax: session /list\";","lastModifiedDate":"2022-03-23"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-23"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":"     * Returns a SessionListCommand object after parsing the input arguments from the user.","lastModifiedDate":"2022-03-23"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-23"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"     * @param commandArgs A String object representing arguments provided by the user.","lastModifiedDate":"2022-03-23"},{"lineNumber":19,"author":{"gitId":"froststein"},"content":"     * @return A SessionListCommand object when method is called.","lastModifiedDate":"2022-03-23"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-23"},{"lineNumber":21,"author":{"gitId":"froststein"},"content":"    @Override","lastModifiedDate":"2022-03-23"},{"lineNumber":22,"author":{"gitId":"froststein"},"content":"    public SessionListCommand getCommand(String commandArgs) throws InvalidFormatException {","lastModifiedDate":"2022-03-23"},{"lineNumber":23,"author":{"gitId":"froststein"},"content":"        return new SessionListCommand();","lastModifiedDate":"2022-03-23"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"}","lastModifiedDate":"2022-03-23"}],"authorContributionMap":{"froststein":25}},{"path":"src/main/java/seedu/splitlah/parser/commandparser/SessionSummaryCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package seedu.splitlah.parser.commandparser;","lastModifiedDate":"2022-03-22"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.command.SessionSummaryCommand;","lastModifiedDate":"2022-03-22"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.exceptions.InvalidFormatException;","lastModifiedDate":"2022-03-22"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.parser.Parser;","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.parser.ParserUtils;","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-03-22"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":" * Represents a command parser that is able to parse user arguments into a SessionSummaryCommand object.","lastModifiedDate":"2022-03-22"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-03-22"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"public class SessionSummaryCommandParser implements CommandParser\u003cSessionSummaryCommand\u003e {","lastModifiedDate":"2022-03-22"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"    public static final String COMMAND_TEXT \u003d \"session /summary\";","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"    public static final String COMMAND_FORMAT \u003d \"Syntax: session /summary /sid [SESSION_ID]\";","lastModifiedDate":"2022-03-22"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"    public static final String[] COMMAND_DELIMITERS \u003d {","lastModifiedDate":"2022-03-22"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"        ParserUtils.SESSION_ID_DELIMITER","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"    };","lastModifiedDate":"2022-03-22"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"     * Returns a SessionSummaryCommand object after parsing the input arguments from the user.","lastModifiedDate":"2022-03-22"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-03-22"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"     * @param commandArgs A String object representing arguments provided by the user.","lastModifiedDate":"2022-03-22"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"     * @return A SessionSummaryCommand object if a valid integer representing a session\u0027s unique identifier is found","lastModifiedDate":"2022-03-22"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"     *         in the input arguments.","lastModifiedDate":"2022-03-25"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"     * @throws InvalidFormatException If a valid integer representing a session\u0027s unique identifier cannot be found","lastModifiedDate":"2022-03-22"},{"lineNumber":29,"author":{"gitId":"warrencxw"},"content":"     *                                in the input arguments.","lastModifiedDate":"2022-03-25"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":31,"author":{"gitId":"warrencxw"},"content":"    @Override","lastModifiedDate":"2022-03-22"},{"lineNumber":32,"author":{"gitId":"warrencxw"},"content":"    public SessionSummaryCommand getCommand(String commandArgs) throws InvalidFormatException {","lastModifiedDate":"2022-03-22"},{"lineNumber":33,"author":{"gitId":"warrencxw"},"content":"        assert commandArgs !\u003d null : Message.ASSERT_PARSER_COMMAND_ARGUMENTS_NULL;","lastModifiedDate":"2022-03-22"},{"lineNumber":34,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-22"},{"lineNumber":35,"author":{"gitId":"warrencxw"},"content":"            int sessionId \u003d Parser.parseSessionId(commandArgs);","lastModifiedDate":"2022-03-22"},{"lineNumber":36,"author":{"gitId":"warrencxw"},"content":"            return new SessionSummaryCommand(sessionId);","lastModifiedDate":"2022-03-22"},{"lineNumber":37,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-22"},{"lineNumber":38,"author":{"gitId":"warrencxw"},"content":"            String invalidCommandMessage \u003d exception.getMessage() + \"\\n\" + COMMAND_FORMAT;","lastModifiedDate":"2022-03-22"},{"lineNumber":39,"author":{"gitId":"warrencxw"},"content":"            throw new InvalidFormatException(invalidCommandMessage);","lastModifiedDate":"2022-03-22"},{"lineNumber":40,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-22"},{"lineNumber":41,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":42,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-03-22"}],"authorContributionMap":{"warrencxw":42}},{"path":"src/main/java/seedu/splitlah/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah.storage;","lastModifiedDate":"2022-03-22"},{"lineNumber":2,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.data.Profile;","lastModifiedDate":"2022-03-22"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"import java.io.File;","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":"import java.io.FileInputStream;","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"froststein"},"content":"import java.io.FileOutputStream;","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"froststein"},"content":"import java.io.IOException;","lastModifiedDate":"2022-03-22"},{"lineNumber":9,"author":{"gitId":"froststein"},"content":"import java.io.ObjectInputStream;","lastModifiedDate":"2022-03-22"},{"lineNumber":10,"author":{"gitId":"froststein"},"content":"import java.io.ObjectOutputStream;","lastModifiedDate":"2022-03-22"},{"lineNumber":11,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":12,"author":{"gitId":"froststein"},"content":"public class Storage {","lastModifiedDate":"2022-03-22"},{"lineNumber":13,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":"    private static final String FILE_DIRECTORY \u003d \"data/\";","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":"    private static final String FILE_NAME \u003d \"SplitLah.data\";","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":"    private static final String FILE_FULL_PATH \u003d FILE_DIRECTORY + FILE_NAME;","lastModifiedDate":"2022-03-22"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"    private Profile profile;","lastModifiedDate":"2022-03-22"},{"lineNumber":19,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":21,"author":{"gitId":"froststein"},"content":"     * Initializes a Storage object.","lastModifiedDate":"2022-03-22"},{"lineNumber":22,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":23,"author":{"gitId":"froststein"},"content":"    public Storage() {","lastModifiedDate":"2022-03-22"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"        profile \u003d new Profile();","lastModifiedDate":"2022-03-22"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":26,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":27,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":28,"author":{"gitId":"froststein"},"content":"     * Returns a Profile object.","lastModifiedDate":"2022-03-22"},{"lineNumber":29,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-22"},{"lineNumber":30,"author":{"gitId":"froststein"},"content":"     * @return A Project object.","lastModifiedDate":"2022-03-22"},{"lineNumber":31,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":32,"author":{"gitId":"froststein"},"content":"    public Profile getProfile() {","lastModifiedDate":"2022-03-22"},{"lineNumber":33,"author":{"gitId":"froststein"},"content":"        return profile;","lastModifiedDate":"2022-03-22"},{"lineNumber":34,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":35,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":36,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":37,"author":{"gitId":"froststein"},"content":"     * Checks to see if file directory for save file exists.","lastModifiedDate":"2022-03-22"},{"lineNumber":38,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-22"},{"lineNumber":39,"author":{"gitId":"froststein"},"content":"     * @return true if file directory exists, or","lastModifiedDate":"2022-03-22"},{"lineNumber":40,"author":{"gitId":"froststein"},"content":"     *         true if it does not exist but can be created,","lastModifiedDate":"2022-03-22"},{"lineNumber":41,"author":{"gitId":"froststein"},"content":"     *         false if file directory does not exist and no directory was created.","lastModifiedDate":"2022-03-22"},{"lineNumber":42,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":43,"author":{"gitId":"froststein"},"content":"    public boolean hasDataDirectory() {","lastModifiedDate":"2022-03-22"},{"lineNumber":44,"author":{"gitId":"froststein"},"content":"        File directory \u003d new File(FILE_DIRECTORY);","lastModifiedDate":"2022-03-22"},{"lineNumber":45,"author":{"gitId":"froststein"},"content":"        return directory.exists() || directory.mkdir();","lastModifiedDate":"2022-03-22"},{"lineNumber":46,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":47,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":48,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":49,"author":{"gitId":"froststein"},"content":"     * Checks to see if file exists.","lastModifiedDate":"2022-03-22"},{"lineNumber":50,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-22"},{"lineNumber":51,"author":{"gitId":"froststein"},"content":"     * @return true if file exists, or","lastModifiedDate":"2022-03-22"},{"lineNumber":52,"author":{"gitId":"froststein"},"content":"     *         true if it does not exist but can be created,","lastModifiedDate":"2022-03-22"},{"lineNumber":53,"author":{"gitId":"froststein"},"content":"     *         false if file does not exist and no file was created.","lastModifiedDate":"2022-03-22"},{"lineNumber":54,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":55,"author":{"gitId":"froststein"},"content":"    public boolean hasDataFile() {","lastModifiedDate":"2022-03-22"},{"lineNumber":56,"author":{"gitId":"froststein"},"content":"        File file \u003d new File(FILE_FULL_PATH);","lastModifiedDate":"2022-03-22"},{"lineNumber":57,"author":{"gitId":"froststein"},"content":"        try {","lastModifiedDate":"2022-03-22"},{"lineNumber":58,"author":{"gitId":"froststein"},"content":"            if (!file.exists() \u0026\u0026 !file.createNewFile()) {","lastModifiedDate":"2022-03-22"},{"lineNumber":59,"author":{"gitId":"froststein"},"content":"                return true;","lastModifiedDate":"2022-03-22"},{"lineNumber":60,"author":{"gitId":"froststein"},"content":"            }","lastModifiedDate":"2022-03-22"},{"lineNumber":61,"author":{"gitId":"froststein"},"content":"        } catch (IOException ioException) {","lastModifiedDate":"2022-03-22"},{"lineNumber":62,"author":{"gitId":"froststein"},"content":"            return false;","lastModifiedDate":"2022-03-22"},{"lineNumber":63,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-22"},{"lineNumber":64,"author":{"gitId":"froststein"},"content":"        return true;","lastModifiedDate":"2022-03-22"},{"lineNumber":65,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":66,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":67,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":68,"author":{"gitId":"froststein"},"content":"     * Saves the serialized Profile object into a file.","lastModifiedDate":"2022-03-22"},{"lineNumber":69,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-22"},{"lineNumber":70,"author":{"gitId":"froststein"},"content":"     * @param profile A Profile object to be saved.","lastModifiedDate":"2022-03-22"},{"lineNumber":71,"author":{"gitId":"froststein"},"content":"     * @throws IOException if an I/O error occurs while writing to save file.","lastModifiedDate":"2022-03-22"},{"lineNumber":72,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":73,"author":{"gitId":"froststein"},"content":"    public void saveProfileToFile(Profile profile) throws IOException {","lastModifiedDate":"2022-03-22"},{"lineNumber":74,"author":{"gitId":"froststein"},"content":"        FileOutputStream file \u003d new FileOutputStream(FILE_FULL_PATH);","lastModifiedDate":"2022-03-22"},{"lineNumber":75,"author":{"gitId":"froststein"},"content":"        ObjectOutputStream out \u003d new ObjectOutputStream(file);","lastModifiedDate":"2022-03-22"},{"lineNumber":76,"author":{"gitId":"froststein"},"content":"        out.writeObject(profile);","lastModifiedDate":"2022-03-22"},{"lineNumber":77,"author":{"gitId":"froststein"},"content":"        out.close();","lastModifiedDate":"2022-03-22"},{"lineNumber":78,"author":{"gitId":"froststein"},"content":"        file.close();","lastModifiedDate":"2022-03-22"},{"lineNumber":79,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":80,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":81,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":82,"author":{"gitId":"froststein"},"content":"     * Saves the data from the save file into the Profile object.","lastModifiedDate":"2022-03-22"},{"lineNumber":83,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-03-22"},{"lineNumber":84,"author":{"gitId":"froststein"},"content":"     * @throws IOException            if an I/O error occurs while reading from the save file.","lastModifiedDate":"2022-03-22"},{"lineNumber":85,"author":{"gitId":"froststein"},"content":"     * @throws ClassNotFoundException if Class of a serialized object cannot be found","lastModifiedDate":"2022-03-22"},{"lineNumber":86,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":87,"author":{"gitId":"froststein"},"content":"    public void loadStorage() throws IOException, ClassNotFoundException {","lastModifiedDate":"2022-03-22"},{"lineNumber":88,"author":{"gitId":"froststein"},"content":"        FileInputStream file \u003d new FileInputStream(FILE_FULL_PATH);","lastModifiedDate":"2022-03-22"},{"lineNumber":89,"author":{"gitId":"froststein"},"content":"        ObjectInputStream in \u003d new ObjectInputStream(file);","lastModifiedDate":"2022-03-22"},{"lineNumber":90,"author":{"gitId":"froststein"},"content":"        profile \u003d (Profile) in.readObject();","lastModifiedDate":"2022-03-22"},{"lineNumber":91,"author":{"gitId":"froststein"},"content":"        in.close();","lastModifiedDate":"2022-03-22"},{"lineNumber":92,"author":{"gitId":"froststein"},"content":"        file.close();","lastModifiedDate":"2022-03-22"},{"lineNumber":93,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":94,"author":{"gitId":"froststein"},"content":"}","lastModifiedDate":"2022-03-22"}],"authorContributionMap":{"froststein":94}},{"path":"src/main/java/seedu/splitlah/ui/Message.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah.ui;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.command.ActivityDeleteCommand;","lastModifiedDate":"2022-03-14"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.command.ActivityListCommand;","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.command.ActivityViewCommand;","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.command.ExitCommand;","lastModifiedDate":"2022-03-14"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.command.GroupCreateCommand;","lastModifiedDate":"2022-03-23"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.command.GroupDeleteCommand;","lastModifiedDate":"2022-03-23"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.command.GroupListCommand;","lastModifiedDate":"2022-03-23"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.command.GroupViewCommand;","lastModifiedDate":"2022-03-23"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.command.SessionCreateCommand;","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.command.SessionDeleteCommand;","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.parser.commandparser.HelpCommandParser;","lastModifiedDate":"2022-03-22"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.parser.commandparser.SessionCreateCommandParser;","lastModifiedDate":"2022-03-25"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.parser.commandparser.SessionListCommandParser;","lastModifiedDate":"2022-03-23"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.parser.commandparser.SessionSummaryCommandParser;","lastModifiedDate":"2022-03-22"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.parser.commandparser.ActivityCreateCommandParser;","lastModifiedDate":"2022-03-24"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"matheril"},"content":"/**","lastModifiedDate":"2022-03-03"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":" * Container of hardcoded messages.","lastModifiedDate":"2022-03-09"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":" * Naming convention: [TYPE]_[CLASS]_[MESSAGE].","lastModifiedDate":"2022-03-09"},{"lineNumber":22,"author":{"gitId":"matheril"},"content":" *","lastModifiedDate":"2022-03-04"},{"lineNumber":23,"author":{"gitId":"matheril"},"content":" * @author Saurav","lastModifiedDate":"2022-03-03"},{"lineNumber":24,"author":{"gitId":"matheril"},"content":" */","lastModifiedDate":"2022-03-03"},{"lineNumber":25,"author":{"gitId":"matheril"},"content":"public abstract class Message {","lastModifiedDate":"2022-03-03"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":27,"author":{"gitId":"froststein"},"content":"    // SplitLah","lastModifiedDate":"2022-03-17"},{"lineNumber":28,"author":{"gitId":"froststein"},"content":"    public static final String LOGGER_SPLITLAH_APPLICATION_EXIT \u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":29,"author":{"gitId":"froststein"},"content":"            \"The application is terminated\";","lastModifiedDate":"2022-03-17"},{"lineNumber":30,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":31,"author":{"gitId":"matheril"},"content":"    // TextUI","lastModifiedDate":"2022-03-07"},{"lineNumber":32,"author":{"gitId":"warrencxw"},"content":"    public static final String ASCII_TEXTUI_LOGO \u003d","lastModifiedDate":"2022-03-09"},{"lineNumber":33,"author":{"gitId":"warrencxw"},"content":"            \" $$$$$$\\\\            $$\\\\ $$\\\\   $$\\\\     $$\\\\           $$\\\\\\n\"","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"matheril"},"content":"            + \"$$  $$\\\\           $$ |\\\\|  $$ |    $$ |          $$ |\\n\"","lastModifiedDate":"2022-03-04"},{"lineNumber":35,"author":{"gitId":"matheril"},"content":"            + \"$$ /  \\\\__| $$$$$$\\\\  $$ |$$\\\\ $$$$$$\\\\   $$ | $$$$$$\\\\  $$$$$$$\\\\\\n\"","lastModifiedDate":"2022-03-04"},{"lineNumber":36,"author":{"gitId":"matheril"},"content":"            + \"\\\\$$$$$$\\\\  $$  $$\\\\ $$ |$$ |\\\\_$$  _|  $$ | \\\\____$$\\\\ $$  __$$\\\\\\n\"","lastModifiedDate":"2022-03-04"},{"lineNumber":37,"author":{"gitId":"matheril"},"content":"            + \" \\\\____$$\\\\ $$ /  $$ |$$ |$$ |  $$ |    $$ | $$$$$$$ |$$ |  $$ |\\n\"","lastModifiedDate":"2022-03-04"},{"lineNumber":38,"author":{"gitId":"matheril"},"content":"            + \"$$\\\\   $$ |$$ |  $$ |$$ |$$ |  $$ |$$\\\\ $$ |$$  __$$ |$$ |  $$ |\\n\"","lastModifiedDate":"2022-03-04"},{"lineNumber":39,"author":{"gitId":"matheril"},"content":"            + \"\\\\$$$$$$  |$$$$$$$  |$$ |$$ |  \\\\$$$$  |$$ |\\\\$$$$$$$ |$$ |  $$ |\\n\"","lastModifiedDate":"2022-03-04"},{"lineNumber":40,"author":{"gitId":"matheril"},"content":"            + \" \\\\______/ $$  ____/ \\\\|\\\\__|   \\\\____/ \\\\__| \\\\_______|\\\\__|  \\\\__|\\n\"","lastModifiedDate":"2022-03-04"},{"lineNumber":41,"author":{"gitId":"matheril"},"content":"            + \"          $$ |\\n\"","lastModifiedDate":"2022-03-04"},{"lineNumber":42,"author":{"gitId":"matheril"},"content":"            + \"          $$ |\\n\"","lastModifiedDate":"2022-03-04"},{"lineNumber":43,"author":{"gitId":"matheril"},"content":"            + \"          \\\\__|\";","lastModifiedDate":"2022-03-04"},{"lineNumber":44,"author":{"gitId":"warrencxw"},"content":"    public static final String MESSAGE_TEXTUI_HELP_MENU \u003d","lastModifiedDate":"2022-03-09"},{"lineNumber":45,"author":{"gitId":"warrencxw"},"content":"            \"HELP MENU --\\n\"","lastModifiedDate":"2022-03-14"},{"lineNumber":46,"author":{"gitId":"warrencxw"},"content":"                    + \"1.  Create a new session\\n\"","lastModifiedDate":"2022-03-14"},{"lineNumber":47,"author":{"gitId":"froststein"},"content":"                    + \"        \" + SessionCreateCommandParser.COMMAND_FORMAT + \"\\n\"","lastModifiedDate":"2022-03-25"},{"lineNumber":48,"author":{"gitId":"warrencxw"},"content":"                    + \"2.  Delete an existing session\\n\"","lastModifiedDate":"2022-03-14"},{"lineNumber":49,"author":{"gitId":"warrencxw"},"content":"                    + \"        \" + SessionDeleteCommand.COMMAND_FORMAT + \"\\n\"","lastModifiedDate":"2022-03-14"},{"lineNumber":50,"author":{"gitId":"warrencxw"},"content":"                    + \"3.  List all existing sessions\\n\"","lastModifiedDate":"2022-03-14"},{"lineNumber":51,"author":{"gitId":"froststein"},"content":"                    + \"        \" + SessionListCommandParser.COMMAND_FORMAT + \"\\n\"","lastModifiedDate":"2022-03-23"},{"lineNumber":52,"author":{"gitId":"warrencxw"},"content":"                    + \"4.  Create a new activity\\n\"","lastModifiedDate":"2022-03-14"},{"lineNumber":53,"author":{"gitId":"ivanaitzliddat"},"content":"                    + \"        Syntax: \" + ActivityCreateCommandParser.COMMAND_FORMAT_FIRST + \"\\n\"","lastModifiedDate":"2022-03-24"},{"lineNumber":54,"author":{"gitId":"ivanaitzliddat"},"content":"                    + \"                \" + ActivityCreateCommandParser.COMMAND_FORMAT_SECOND + \"\\n\"","lastModifiedDate":"2022-03-24"},{"lineNumber":55,"author":{"gitId":"warrencxw"},"content":"                    + \"5.  Delete an existing activity\\n\"","lastModifiedDate":"2022-03-14"},{"lineNumber":56,"author":{"gitId":"warrencxw"},"content":"                    + \"        \" + ActivityDeleteCommand.COMMAND_FORMAT + \"\\n\"","lastModifiedDate":"2022-03-14"},{"lineNumber":57,"author":{"gitId":"warrencxw"},"content":"                    + \"6.  View an existing activity\u0027s details\\n\"","lastModifiedDate":"2022-03-23"},{"lineNumber":58,"author":{"gitId":"warrencxw"},"content":"                    + \"        \" + ActivityViewCommand.COMMAND_FORMAT + \"\\n\"","lastModifiedDate":"2022-03-14"},{"lineNumber":59,"author":{"gitId":"warrencxw"},"content":"                    + \"7.  List all existing activities\\n\"","lastModifiedDate":"2022-03-23"},{"lineNumber":60,"author":{"gitId":"warrencxw"},"content":"                    + \"        \" + ActivityListCommand.COMMAND_FORMAT + \"\\n\"","lastModifiedDate":"2022-03-23"},{"lineNumber":61,"author":{"gitId":"warrencxw"},"content":"                    + \"8.  Show the summary of an existing session\\n\"","lastModifiedDate":"2022-03-14"},{"lineNumber":62,"author":{"gitId":"warrencxw"},"content":"                    + \"        \" + SessionSummaryCommandParser.COMMAND_FORMAT + \"\\n\"","lastModifiedDate":"2022-03-22"},{"lineNumber":63,"author":{"gitId":"warrencxw"},"content":"                    + \"9.  Create a new group\\n\"","lastModifiedDate":"2022-03-23"},{"lineNumber":64,"author":{"gitId":"warrencxw"},"content":"                    + \"        \" + GroupCreateCommand.COMMAND_FORMAT + \"\\n\"","lastModifiedDate":"2022-03-23"},{"lineNumber":65,"author":{"gitId":"warrencxw"},"content":"                    + \"10. Delete an existing group\\n\"","lastModifiedDate":"2022-03-23"},{"lineNumber":66,"author":{"gitId":"warrencxw"},"content":"                    + \"        \" + GroupDeleteCommand.COMMAND_FORMAT + \"\\n\"","lastModifiedDate":"2022-03-23"},{"lineNumber":67,"author":{"gitId":"warrencxw"},"content":"                    + \"11. View an existing group\u0027s details\\n\"","lastModifiedDate":"2022-03-23"},{"lineNumber":68,"author":{"gitId":"warrencxw"},"content":"                    + \"        \" + GroupViewCommand.COMMAND_FORMAT + \"\\n\"","lastModifiedDate":"2022-03-23"},{"lineNumber":69,"author":{"gitId":"warrencxw"},"content":"                    + \"12. List all existing groups\\n\"","lastModifiedDate":"2022-03-23"},{"lineNumber":70,"author":{"gitId":"warrencxw"},"content":"                    + \"        \" + GroupListCommand.COMMAND_FORMAT + \"\\n\"","lastModifiedDate":"2022-03-23"},{"lineNumber":71,"author":{"gitId":"warrencxw"},"content":"                    + \"13.  Show this help menu\\n\"","lastModifiedDate":"2022-03-23"},{"lineNumber":72,"author":{"gitId":"warrencxw"},"content":"                    + \"        \" + HelpCommandParser.COMMAND_FORMAT + \"\\n\"","lastModifiedDate":"2022-03-22"},{"lineNumber":73,"author":{"gitId":"warrencxw"},"content":"                    + \"14. Exit the program\\n\"","lastModifiedDate":"2022-03-23"},{"lineNumber":74,"author":{"gitId":"warrencxw"},"content":"                    + \"        \" + ExitCommand.COMMAND_FORMAT;","lastModifiedDate":"2022-03-14"},{"lineNumber":75,"author":{"gitId":"matheril"},"content":"    public static final String PROMPT_TEXTUI_AWAITING_INPUT \u003d","lastModifiedDate":"2022-03-11"},{"lineNumber":76,"author":{"gitId":"matheril"},"content":"            \"\u003e \";","lastModifiedDate":"2022-03-11"},{"lineNumber":77,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-04"},{"lineNumber":78,"author":{"gitId":"warrencxw"},"content":"    // Parser","lastModifiedDate":"2022-03-08"},{"lineNumber":79,"author":{"gitId":"warrencxw"},"content":"    public static final String ERROR_PARSER_DELIMITER_NOT_FOUND \u003d","lastModifiedDate":"2022-03-04"},{"lineNumber":80,"author":{"gitId":"warrencxw"},"content":"            \"Please include the following delimiter in your input: \";","lastModifiedDate":"2022-03-04"},{"lineNumber":81,"author":{"gitId":"warrencxw"},"content":"    public static final String ERROR_PARSER_MISSING_ARGUMENT \u003d","lastModifiedDate":"2022-03-04"},{"lineNumber":82,"author":{"gitId":"warrencxw"},"content":"            \"Please include an argument after the following delimiter: \";","lastModifiedDate":"2022-03-04"},{"lineNumber":83,"author":{"gitId":"warrencxw"},"content":"    public static final String ERROR_PARSER_MORE_THAN_ONE_PAYER \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":84,"author":{"gitId":"warrencxw"},"content":"            \"The activity should only have a single payer. Please rectify and try again.\";","lastModifiedDate":"2022-03-15"},{"lineNumber":85,"author":{"gitId":"warrencxw"},"content":"    public static final String ERROR_PARSER_NON_INTEGER_ARGUMENT \u003d","lastModifiedDate":"2022-03-04"},{"lineNumber":86,"author":{"gitId":"warrencxw"},"content":"            \"Please enter a valid integer after the following delimiter: \";","lastModifiedDate":"2022-03-04"},{"lineNumber":87,"author":{"gitId":"warrencxw"},"content":"    public static final String ERROR_PARSER_ID_VALUE_NOT_POSITIVE \u003d","lastModifiedDate":"2022-03-11"},{"lineNumber":88,"author":{"gitId":"warrencxw"},"content":"            \"Please enter a positive value for identifier numbers.\";","lastModifiedDate":"2022-03-11"},{"lineNumber":89,"author":{"gitId":"warrencxw"},"content":"    public static final String ERROR_PARSER_INVALID_DATE_FORMAT \u003d","lastModifiedDate":"2022-03-12"},{"lineNumber":90,"author":{"gitId":"warrencxw"},"content":"            \"Please enter the date in the form DD-MM-YYYY or enter \u0027today\u0027 for today\u0027s date.\";","lastModifiedDate":"2022-03-12"},{"lineNumber":91,"author":{"gitId":"warrencxw"},"content":"    public static final String ERROR_PARSER_NON_MONETARY_VALUE_ARGUMENT \u003d","lastModifiedDate":"2022-03-04"},{"lineNumber":92,"author":{"gitId":"warrencxw"},"content":"            \"Please enter a valid monetary value(s) after the following delimiter: \";","lastModifiedDate":"2022-03-04"},{"lineNumber":93,"author":{"gitId":"warrencxw"},"content":"    public static final String ERROR_PARSER_COST_NOT_POSITIVE \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":94,"author":{"gitId":"warrencxw"},"content":"            \"Please enter a positive value for monetary value(s).\";","lastModifiedDate":"2022-03-15"},{"lineNumber":95,"author":{"gitId":"warrencxw"},"content":"    public static final String ERROR_PARSER_COST_NOT_TWO_DP \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":96,"author":{"gitId":"warrencxw"},"content":"            \"Please enter a value up to 2 decimal places for monetary value(s).\";","lastModifiedDate":"2022-03-15"},{"lineNumber":97,"author":{"gitId":"froststein"},"content":"    public static final String ERROR_PARSER_COST_MORE_THAN_TWELVE_DIGITS_BEFORE_DP \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":98,"author":{"gitId":"froststein"},"content":"            \"Please enter a value up to 12 digits in dollars for monetary value(s).\";","lastModifiedDate":"2022-03-15"},{"lineNumber":99,"author":{"gitId":"warrencxw"},"content":"    public static final String ERROR_PARSER_NON_PERCENTAGE_ARGUMENT \u003d","lastModifiedDate":"2022-03-21"},{"lineNumber":100,"author":{"gitId":"warrencxw"},"content":"            \"Please enter a valid percentage value after the delimiter: \";","lastModifiedDate":"2022-03-21"},{"lineNumber":101,"author":{"gitId":"warrencxw"},"content":"    public static final String ERROR_PARSER_PERCENTAGE_NEGATIVE \u003d","lastModifiedDate":"2022-03-21"},{"lineNumber":102,"author":{"gitId":"warrencxw"},"content":"            \"Please enter a non-negative percentage value.\";","lastModifiedDate":"2022-03-21"},{"lineNumber":103,"author":{"gitId":"warrencxw"},"content":"    public static final String ERROR_PARSER_PERCENTAGE_NOT_TWO_DP \u003d","lastModifiedDate":"2022-03-21"},{"lineNumber":104,"author":{"gitId":"warrencxw"},"content":"            \"Please enter a value up to 2 decimal places for percentage values.\";","lastModifiedDate":"2022-03-21"},{"lineNumber":105,"author":{"gitId":"warrencxw"},"content":"    public static final String ERROR_PARSER_PERCENTAGE_MORE_THAN_THREE_DIGITS_BEFORE_DP \u003d","lastModifiedDate":"2022-03-21"},{"lineNumber":106,"author":{"gitId":"warrencxw"},"content":"            \"Please enter a value up to 3 digits before the decimal point for percentage values.\";","lastModifiedDate":"2022-03-21"},{"lineNumber":107,"author":{"gitId":"warrencxw"},"content":"    public static final String ERROR_PARSER_INVALID_GST_SURCHARGE \u003d","lastModifiedDate":"2022-03-04"},{"lineNumber":108,"author":{"gitId":"warrencxw"},"content":"            \"Please enter a valid GST surcharge in % in the range [0, 100] after the delimiter: \";","lastModifiedDate":"2022-03-18"},{"lineNumber":109,"author":{"gitId":"warrencxw"},"content":"    public static final String ERROR_PARSER_INVALID_SERVICE_CHARGE \u003d","lastModifiedDate":"2022-03-04"},{"lineNumber":110,"author":{"gitId":"warrencxw"},"content":"            \"Please enter a valid service charge in % in the range [0, 100] after the delimiter: \";","lastModifiedDate":"2022-03-18"},{"lineNumber":111,"author":{"gitId":"warrencxw"},"content":"    public static final String ERROR_PARSER_EMPTY_COMMAND \u003d","lastModifiedDate":"2022-03-06"},{"lineNumber":112,"author":{"gitId":"warrencxw"},"content":"            \"Please enter a command.\";","lastModifiedDate":"2022-03-06"},{"lineNumber":113,"author":{"gitId":"warrencxw"},"content":"    public static final String ERROR_PARSER_INVALID_COMMAND \u003d","lastModifiedDate":"2022-03-05"},{"lineNumber":114,"author":{"gitId":"warrencxw"},"content":"            \"Please enter a valid command.\";","lastModifiedDate":"2022-03-05"},{"lineNumber":115,"author":{"gitId":"warrencxw"},"content":"    public static final String ERROR_PARSER_ADDITIONAL_INVALID_TOKEN \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":116,"author":{"gitId":"warrencxw"},"content":"            \"The command contains an argument that does not have a delimiter. Please rectify and try again.\";","lastModifiedDate":"2022-03-15"},{"lineNumber":117,"author":{"gitId":"warrencxw"},"content":"    public static final String ERROR_PARSER_INVALID_DELIMITERS \u003d","lastModifiedDate":"2022-03-06"},{"lineNumber":118,"author":{"gitId":"warrencxw"},"content":"            \"The command contains one or more invalid delimiters. Please rectify and try again.\";","lastModifiedDate":"2022-03-06"},{"lineNumber":119,"author":{"gitId":"warrencxw"},"content":"    public static final String ERROR_PARSER_DUPLICATE_DELIMITERS \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":120,"author":{"gitId":"warrencxw"},"content":"            \"The command contains one or more duplicate delimiters. Please rectify and try again.\";","lastModifiedDate":"2022-03-15"},{"lineNumber":121,"author":{"gitId":"warrencxw"},"content":"    public static final String ASSERT_PARSER_COMMAND_TYPE_NULL \u003d","lastModifiedDate":"2022-03-20"},{"lineNumber":122,"author":{"gitId":"warrencxw"},"content":"            \"The command type cannot be null.\";","lastModifiedDate":"2022-03-20"},{"lineNumber":123,"author":{"gitId":"froststein"},"content":"    public static final String ASSERT_PARSER_COMMAND_ARGUMENTS_NULL \u003d","lastModifiedDate":"2022-03-20"},{"lineNumber":124,"author":{"gitId":"froststein"},"content":"            \"The command arguments cannot be null.\";","lastModifiedDate":"2022-03-12"},{"lineNumber":125,"author":{"gitId":"warrencxw"},"content":"    public static final String ASSERT_PARSER_TOKEN_INPUT_NULL \u003d","lastModifiedDate":"2022-03-20"},{"lineNumber":126,"author":{"gitId":"warrencxw"},"content":"            \"The token input cannot be null.\";","lastModifiedDate":"2022-03-20"},{"lineNumber":127,"author":{"gitId":"warrencxw"},"content":"    public static final String ASSERT_PARSER_DELIMITER_NULL \u003d","lastModifiedDate":"2022-03-20"},{"lineNumber":128,"author":{"gitId":"warrencxw"},"content":"            \"The delimiter cannot be null.\";","lastModifiedDate":"2022-03-20"},{"lineNumber":129,"author":{"gitId":"warrencxw"},"content":"    public static final String ASSERT_PARSER_PARAMETERS_NULL \u003d","lastModifiedDate":"2022-03-20"},{"lineNumber":130,"author":{"gitId":"warrencxw"},"content":"            \"The input parameters cannot be null.\";","lastModifiedDate":"2022-03-20"},{"lineNumber":131,"author":{"gitId":"warrencxw"},"content":"    public static final String ASSERT_PARSER_PLACES_NEGATIVE \u003d","lastModifiedDate":"2022-03-18"},{"lineNumber":132,"author":{"gitId":"warrencxw"},"content":"            \"A number cannot have less than 0 digits before the integer position.\";","lastModifiedDate":"2022-03-18"},{"lineNumber":133,"author":{"gitId":"warrencxw"},"content":"    public static final String ASSERT_PARSER_PERCENTAGE_NEGATIVE \u003d","lastModifiedDate":"2022-03-25"},{"lineNumber":134,"author":{"gitId":"warrencxw"},"content":"            \"A parsed percentage value cannot be negative.\";","lastModifiedDate":"2022-03-25"},{"lineNumber":135,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":136,"author":{"gitId":"matheril"},"content":"    // ActivityCost","lastModifiedDate":"2022-03-17"},{"lineNumber":137,"author":{"gitId":"matheril"},"content":"    public static final String LOGGER_ACTIVITYCOST_CONSTRUCT_WITH_DEFAULT_PARAMS \u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":138,"author":{"gitId":"matheril"},"content":"            \"Constructing ActivityCost with default parameters\";","lastModifiedDate":"2022-03-17"},{"lineNumber":139,"author":{"gitId":"matheril"},"content":"    public static final String LOGGER_ACTIVITYCOST_CONSTRUCT_WITH_ACTIVITYID \u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":140,"author":{"gitId":"matheril"},"content":"            \"Constructing ActivityCost with activityId\";","lastModifiedDate":"2022-03-17"},{"lineNumber":141,"author":{"gitId":"matheril"},"content":"    public static final String LOGGER_ACTIVITYCOST_CONSTRUCT_WITH_ALL_PARAMS \u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":142,"author":{"gitId":"matheril"},"content":"            \"Constructing ActivityCost with activityId, costPaid and costOwed\";","lastModifiedDate":"2022-03-17"},{"lineNumber":143,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":144,"author":{"gitId":"matheril"},"content":"    // Person","lastModifiedDate":"2022-03-07"},{"lineNumber":145,"author":{"gitId":"matheril"},"content":"    public static final String ERROR_PERSON_NO_ACTIVITIES \u003d","lastModifiedDate":"2022-03-07"},{"lineNumber":146,"author":{"gitId":"matheril"},"content":"            \"This person is not participating in any activities.\";","lastModifiedDate":"2022-03-07"},{"lineNumber":147,"author":{"gitId":"matheril"},"content":"    public static final String ERROR_PERSON_ACTIVITY_NOT_FOUND \u003d","lastModifiedDate":"2022-03-07"},{"lineNumber":148,"author":{"gitId":"froststein"},"content":"            \"This person is not participating in the activity with Id: \";","lastModifiedDate":"2022-03-15"},{"lineNumber":149,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-07"},{"lineNumber":150,"author":{"gitId":"froststein"},"content":"    // PersonList","lastModifiedDate":"2022-03-21"},{"lineNumber":151,"author":{"gitId":"froststein"},"content":"    public static final String ASSERT_PERSONLIST_NAME_DUPLICATE_EXISTS_BUT_NOT_DETECTED \u003d","lastModifiedDate":"2022-03-21"},{"lineNumber":152,"author":{"gitId":"froststein"},"content":"            \"Name duplicates exist but not detected.\";","lastModifiedDate":"2022-03-21"},{"lineNumber":153,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":154,"author":{"gitId":"matheril"},"content":"    // Name","lastModifiedDate":"2022-03-15"},{"lineNumber":155,"author":{"gitId":"froststein"},"content":"    public static final String ERROR_NAME_INVALID_NAME \u003d","lastModifiedDate":"2022-03-15"},{"lineNumber":156,"author":{"gitId":"matheril"},"content":"            \"Invalid name. Names must contain only alphabetical characters.\";","lastModifiedDate":"2022-03-15"},{"lineNumber":157,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":158,"author":{"gitId":"warrencxw"},"content":"    // Session","lastModifiedDate":"2022-03-08"},{"lineNumber":159,"author":{"gitId":"warrencxw"},"content":"    public static final String ERROR_SESSION_INDEX_OUT_OF_RANGE_PERSON_LIST \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":160,"author":{"gitId":"warrencxw"},"content":"            \"Please enter a number from 1 to \";","lastModifiedDate":"2022-03-08"},{"lineNumber":161,"author":{"gitId":"warrencxw"},"content":"    public static final String ERROR_SESSION_EMPTY_ACTIVITY_LIST \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":162,"author":{"gitId":"warrencxw"},"content":"            \"The list of activities in the session is currently empty.\";","lastModifiedDate":"2022-03-08"},{"lineNumber":163,"author":{"gitId":"warrencxw"},"content":"    public static final String ERROR_SESSION_ACTIVITY_ID_NOT_IN_LIST \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":164,"author":{"gitId":"warrencxw"},"content":"            \"The activity that you have specified was not found in this session.\";","lastModifiedDate":"2022-03-08"},{"lineNumber":165,"author":{"gitId":"warrencxw"},"content":"    public static final String ERROR_SESSION_EMPTY_PERSON_LIST \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":166,"author":{"gitId":"warrencxw"},"content":"            \"The list of participants in the session is currently empty.\";","lastModifiedDate":"2022-03-08"},{"lineNumber":167,"author":{"gitId":"warrencxw"},"content":"    public static final String ERROR_SESSION_PERSON_NOT_IN_LIST \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":168,"author":{"gitId":"warrencxw"},"content":"            \"The person that you have specified was not found in this session.\";","lastModifiedDate":"2022-03-08"},{"lineNumber":169,"author":{"gitId":"warrencxw"},"content":"    public static final String ASSERT_SESSION_PERSON_LIST_EMPTY \u003d","lastModifiedDate":"2022-03-12"},{"lineNumber":170,"author":{"gitId":"warrencxw"},"content":"            \"Session object cannot be constructed with a null or empty person list.\";","lastModifiedDate":"2022-03-12"},{"lineNumber":171,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-08"},{"lineNumber":172,"author":{"gitId":"froststein"},"content":"    // Profile","lastModifiedDate":"2022-03-08"},{"lineNumber":173,"author":{"gitId":"froststein"},"content":"    public static final String ERROR_PROFILE_DUPLICATE_SESSION \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":174,"author":{"gitId":"froststein"},"content":"            \"There is another session with the same name. Please rename and try again.\";","lastModifiedDate":"2022-03-15"},{"lineNumber":175,"author":{"gitId":"froststein"},"content":"    public static final String ERROR_PROFILE_DUPLICATE_NAME \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":176,"author":{"gitId":"froststein"},"content":"            \"There are duplicate names in the person list for the session you are trying to create. \"","lastModifiedDate":"2022-03-15"},{"lineNumber":177,"author":{"gitId":"froststein"},"content":"                    + \"Please rectify and try again.\";","lastModifiedDate":"2022-03-15"},{"lineNumber":178,"author":{"gitId":"froststein"},"content":"    public static final String ERROR_PROFILE_SESSION_LIST_EMPTY \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":179,"author":{"gitId":"froststein"},"content":"            \"There are currently no sessions stored.\";","lastModifiedDate":"2022-03-15"},{"lineNumber":180,"author":{"gitId":"froststein"},"content":"    public static final String ERROR_PROFILE_SESSION_NOT_IN_LIST \u003d","lastModifiedDate":"2022-03-08"},{"lineNumber":181,"author":{"gitId":"froststein"},"content":"            \"The session that you have specified was not found.\";","lastModifiedDate":"2022-03-08"},{"lineNumber":182,"author":{"gitId":"froststein"},"content":"    public static final String ERROR_PROFILE_GROUP_LIST_EMPTY \u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":183,"author":{"gitId":"froststein"},"content":"            \"There are currently no groups stored.\";","lastModifiedDate":"2022-03-17"},{"lineNumber":184,"author":{"gitId":"froststein"},"content":"    public static final String ERROR_PROFILE_GROUP_NOT_IN_LIST \u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":185,"author":{"gitId":"froststein"},"content":"            \"The group that you have specified was not found.\";","lastModifiedDate":"2022-03-17"},{"lineNumber":186,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":187,"author":{"gitId":"froststein"},"content":"    // Storage","lastModifiedDate":"2022-03-22"},{"lineNumber":188,"author":{"gitId":"froststein"},"content":"    public static final String ERROR_STORAGE_FILE_NOT_FOUND \u003d","lastModifiedDate":"2022-03-22"},{"lineNumber":189,"author":{"gitId":"froststein"},"content":"            \"The data file was not found or has been corrupted. No saves were loaded into SplitLah.\";","lastModifiedDate":"2022-03-22"},{"lineNumber":190,"author":{"gitId":"froststein"},"content":"    public static final String ERROR_STORAGE_PATH_LOCATION_CREATION_FAILED \u003d","lastModifiedDate":"2022-03-22"},{"lineNumber":191,"author":{"gitId":"froststein"},"content":"            \"A new data file could not be created. No data would be saved while using SplitLah.\";","lastModifiedDate":"2022-03-22"},{"lineNumber":192,"author":{"gitId":"froststein"},"content":"    public static final String ERROR_STORAGE_DATA_NOT_SAVED \u003d","lastModifiedDate":"2022-03-22"},{"lineNumber":193,"author":{"gitId":"froststein"},"content":"            \"An error occurred while saving. No data was saved.\";","lastModifiedDate":"2022-03-22"},{"lineNumber":194,"author":{"gitId":"froststein"},"content":"    public static final String ERROR_STORAGE_CLASS_EXCEPTION_ISSUE \u003d","lastModifiedDate":"2022-03-22"},{"lineNumber":195,"author":{"gitId":"froststein"},"content":"            \"It seems that something went wrong internally. No saves were loaded into SplitLah.\";","lastModifiedDate":"2022-03-22"},{"lineNumber":196,"author":{"gitId":"froststein"},"content":"    public static final String LOGGER_STORAGE_CLASS_NOT_FOUND \u003d","lastModifiedDate":"2022-03-22"},{"lineNumber":197,"author":{"gitId":"froststein"},"content":"            \"An internal error of ClassNotFoundException has occurred.\";","lastModifiedDate":"2022-03-22"},{"lineNumber":198,"author":{"gitId":"froststein"},"content":"    public static final String LOGGER_STORAGE_FILE_ERROR \u003d","lastModifiedDate":"2022-03-22"},{"lineNumber":199,"author":{"gitId":"froststein"},"content":"            \"There was an error in retrieving data from save file.\";","lastModifiedDate":"2022-03-22"},{"lineNumber":200,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":201,"author":{"gitId":"ivanaitzliddat"},"content":"    // Activity","lastModifiedDate":"2022-03-10"},{"lineNumber":202,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String ERROR_ACTIVITY_INACCURATE_INVOLVED_LIST \u003d","lastModifiedDate":"2022-03-10"},{"lineNumber":203,"author":{"gitId":"ivanaitzliddat"},"content":"            \"The list of involved persons list is inaccurate \"","lastModifiedDate":"2022-03-10"},{"lineNumber":204,"author":{"gitId":"ivanaitzliddat"},"content":"                    + \"as at least one person did not participate in the activity.\";","lastModifiedDate":"2022-03-10"},{"lineNumber":205,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":206,"author":{"gitId":"matheril"},"content":"    // Invalid Command","lastModifiedDate":"2022-03-17"},{"lineNumber":207,"author":{"gitId":"matheril"},"content":"    public static final String ASSERT_INVALIDCOMMAND_MANAGER_DOES_NOT_EXIST \u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":208,"author":{"gitId":"matheril"},"content":"            \"Manager does not exist.\";","lastModifiedDate":"2022-03-17"},{"lineNumber":209,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":210,"author":{"gitId":"froststein"},"content":"    // Session Create Command","lastModifiedDate":"2022-03-12"},{"lineNumber":211,"author":{"gitId":"froststein"},"content":"    public static final String ERROR_SESSIONCREATE_MISSING_PERSONLIST_AND_GROUP_DELIMITERS \u003d","lastModifiedDate":"2022-03-20"},{"lineNumber":212,"author":{"gitId":"froststein"},"content":"            \"The person list or group identifier delimiters are missing.\";","lastModifiedDate":"2022-03-20"},{"lineNumber":213,"author":{"gitId":"froststein"},"content":"    public static final String ASSERT_SESSIONCREATE_SESSION_NAME_NULL \u003d","lastModifiedDate":"2022-03-20"},{"lineNumber":214,"author":{"gitId":"froststein"},"content":"            \"Session name is empty but was not handled in prepare function.\";","lastModifiedDate":"2022-03-20"},{"lineNumber":215,"author":{"gitId":"froststein"},"content":"    public static final String ASSERT_SESSIONCREATE_SESSION_DATE_NULL \u003d","lastModifiedDate":"2022-03-20"},{"lineNumber":216,"author":{"gitId":"froststein"},"content":"            \"Session data is empty but was not handled in prepare function.\";","lastModifiedDate":"2022-03-20"},{"lineNumber":217,"author":{"gitId":"froststein"},"content":"    public static final String ASSERT_SESSIONCREATE_MISSING_PERSONLIST_AND_GROUP_DELIMITERS \u003d","lastModifiedDate":"2022-03-20"},{"lineNumber":218,"author":{"gitId":"froststein"},"content":"            \"The person list or group identifier delimiters are missing but was not handled in prepare function.\";","lastModifiedDate":"2022-03-20"},{"lineNumber":219,"author":{"gitId":"froststein"},"content":"    public static final String LOGGER_SESSIONCREATE_SESSION_ADDED \u003d","lastModifiedDate":"2022-03-16"},{"lineNumber":220,"author":{"gitId":"froststein"},"content":"            \"A session was added into the list of sessions with Id: \";","lastModifiedDate":"2022-03-16"},{"lineNumber":221,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":222,"author":{"gitId":"froststein"},"content":"    // Session Delete Command","lastModifiedDate":"2022-03-16"},{"lineNumber":223,"author":{"gitId":"froststein"},"content":"    public static final String LOGGER_SESSIONDELETE_SESSION_REMOVED \u003d","lastModifiedDate":"2022-03-16"},{"lineNumber":224,"author":{"gitId":"warrencxw"},"content":"            \"A session was removed from the list of session with Id: \";","lastModifiedDate":"2022-03-17"},{"lineNumber":225,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":226,"author":{"gitId":"warrencxw"},"content":"    // Session Summary Command","lastModifiedDate":"2022-03-11"},{"lineNumber":227,"author":{"gitId":"warrencxw"},"content":"    public static final String MESSAGE_SESSIONSUMMARY_NO_PAYMENTS_REQUIRED \u003d","lastModifiedDate":"2022-03-11"},{"lineNumber":228,"author":{"gitId":"warrencxw"},"content":"            \"There are no payments to be made.\";","lastModifiedDate":"2022-03-11"},{"lineNumber":229,"author":{"gitId":"warrencxw"},"content":"    public static final String ASSERT_SESSIONSUMMARY_INVALID_PERSONCOSTPAIR_LIST \u003d","lastModifiedDate":"2022-03-12"},{"lineNumber":230,"author":{"gitId":"warrencxw"},"content":"            \"The generated personCostPairList is invalid with a non-zero total sum of debt.\";","lastModifiedDate":"2022-03-12"},{"lineNumber":231,"author":{"gitId":"warrencxw"},"content":"    public static final String ASSERT_SESSIONSUMMARY_PAYER_EXPECTS_FROM_RECEIVER \u003d","lastModifiedDate":"2022-03-12"},{"lineNumber":232,"author":{"gitId":"warrencxw"},"content":"            \"Payer has a greater total cost than receiver.\";","lastModifiedDate":"2022-03-12"},{"lineNumber":233,"author":{"gitId":"warrencxw"},"content":"    public static final String LOGGER_SESSIONSUMMARY_SESSION_ID_NOT_FOUND \u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":234,"author":{"gitId":"warrencxw"},"content":"            \"A session summary was not produced as a Session object with the following Id was not found :\";","lastModifiedDate":"2022-03-17"},{"lineNumber":235,"author":{"gitId":"warrencxw"},"content":"    public static final String LOGGER_SESSIONSUMMARY_SESSION_SUMMARY_PRINTED \u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":236,"author":{"gitId":"warrencxw"},"content":"            \"A session summary has been successful produced for the Session object with the following Id: \";","lastModifiedDate":"2022-03-17"},{"lineNumber":237,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-11"},{"lineNumber":238,"author":{"gitId":"ivanaitzliddat"},"content":"    // Activity Create Command","lastModifiedDate":"2022-03-09"},{"lineNumber":239,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String ERROR_ACTIVITYCREATE_INVOLVED_AND_COST_DIFFERENT_LENGTH \u003d","lastModifiedDate":"2022-03-09"},{"lineNumber":240,"author":{"gitId":"froststein"},"content":"            \"There is a mismatch between persons involved and the costs for each person. Please rectify and try again.\";","lastModifiedDate":"2022-03-15"},{"lineNumber":241,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String ERROR_ACTIVITYCREATE_HAS_BOTH_COST_AND_COST_LIST \u003d","lastModifiedDate":"2022-03-09"},{"lineNumber":242,"author":{"gitId":"froststein"},"content":"            \"Please only include either a total cost or a list of costs.\";","lastModifiedDate":"2022-03-15"},{"lineNumber":243,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String ERROR_ACTIVITYCREATE_MISSING_COST_AND_COST_LIST \u003d","lastModifiedDate":"2022-03-09"},{"lineNumber":244,"author":{"gitId":"ivanaitzliddat"},"content":"            \"Please include either a cost or a list of costs.\";","lastModifiedDate":"2022-03-09"},{"lineNumber":245,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String ERROR_ACTIVITYCREATE_DUPLICATE_NAME \u003d","lastModifiedDate":"2022-03-14"},{"lineNumber":246,"author":{"gitId":"froststein"},"content":"            \"There are duplicate names in the persons involved for the activity you are trying to create. \"","lastModifiedDate":"2022-03-15"},{"lineNumber":247,"author":{"gitId":"froststein"},"content":"                    + \"Please rectify and try again.\";","lastModifiedDate":"2022-03-15"},{"lineNumber":248,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String ASSERT_ACTIVITYCREATE_NAME_DUPLICATE_EXISTS_BUT_NOT_DETECTED \u003d","lastModifiedDate":"2022-03-14"},{"lineNumber":249,"author":{"gitId":"ivanaitzliddat"},"content":"            \"Name duplicates exists but not detected.\";","lastModifiedDate":"2022-03-14"},{"lineNumber":250,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String ASSERT_ACTIVITYCREATE_SESSION_ID_LESS_THAN_ONE \u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":251,"author":{"gitId":"ivanaitzliddat"},"content":"            \"Session ID is less than or equals to zero.\";","lastModifiedDate":"2022-03-17"},{"lineNumber":252,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String ASSERT_ACTIVITYCREATE_ACTIVITY_NAME_MISSING \u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":253,"author":{"gitId":"ivanaitzliddat"},"content":"            \"Activity name is missing.\";","lastModifiedDate":"2022-03-17"},{"lineNumber":254,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String ASSERT_ACTIVITYCREATE_TOTAL_COST_LESS_THAN_ONE \u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":255,"author":{"gitId":"ivanaitzliddat"},"content":"            \"Total cost is less than or equals to zero.\";","lastModifiedDate":"2022-03-17"},{"lineNumber":256,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String ASSERT_ACTIVITYCREATE_PAYER_NAME_MISSING \u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":257,"author":{"gitId":"ivanaitzliddat"},"content":"            \"Payer\u0027s name is missing.\";","lastModifiedDate":"2022-03-17"},{"lineNumber":258,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String ASSERT_ACTIVITYCREATE_INVOLVED_LIST_ARRAY_NULL \u003d","lastModifiedDate":"2022-03-18"},{"lineNumber":259,"author":{"gitId":"ivanaitzliddat"},"content":"            \"Involved list array does not contain the list of names of the persons involved in the activity.\";","lastModifiedDate":"2022-03-17"},{"lineNumber":260,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String ASSERT_ACTIVITYCREATE_COST_LIST_ARRAY_NULL \u003d","lastModifiedDate":"2022-03-18"},{"lineNumber":261,"author":{"gitId":"ivanaitzliddat"},"content":"            \"Cost list array does not contain the respective costs of the persons involved in the activity.\";","lastModifiedDate":"2022-03-17"},{"lineNumber":262,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String LOGGER_ACTIVITYCREATE_ACTIVITY_ADDED \u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":263,"author":{"gitId":"ivanaitzliddat"},"content":"            \"An Activity object was succesfully added into the list of activities with Id: \";","lastModifiedDate":"2022-03-17"},{"lineNumber":264,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String LOGGER_ACTIVITYCREATE_FAILED_ADDING_ACTIVITY \u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":265,"author":{"gitId":"ivanaitzliddat"},"content":"            \"An Activity object failed to be added into the list of activities due to the following error: \";","lastModifiedDate":"2022-03-17"},{"lineNumber":266,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String LOGGER_ACTIVITYCREATE_DUPLICATE_NAMES_IN_INVOLVED_LIST \u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":267,"author":{"gitId":"ivanaitzliddat"},"content":"            \"An Activity object failed to be added into the list of activities because there are duplicate names in\"","lastModifiedDate":"2022-03-17"},{"lineNumber":268,"author":{"gitId":"ivanaitzliddat"},"content":"                    + \"the involved list.\";","lastModifiedDate":"2022-03-17"},{"lineNumber":269,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":270,"author":{"gitId":"ivanaitzliddat"},"content":"    // Activity Delete Command","lastModifiedDate":"2022-03-19"},{"lineNumber":271,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String ASSERT_ACTIVITYDELETE_SESSION_IS_NULL \u003d","lastModifiedDate":"2022-03-19"},{"lineNumber":272,"author":{"gitId":"ivanaitzliddat"},"content":"            \"Session is still not initialized.\";","lastModifiedDate":"2022-03-19"},{"lineNumber":273,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String ASSERT_ACTIVITYDELETE_SESSION_ID_NOT_INITIALIZED \u003d","lastModifiedDate":"2022-03-19"},{"lineNumber":274,"author":{"gitId":"ivanaitzliddat"},"content":"            \"Session Id not initialized.\";","lastModifiedDate":"2022-03-19"},{"lineNumber":275,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String ASSERT_ACTIVITYDELETE_ACTIVITY_ID_NOT_INITIALIZED \u003d","lastModifiedDate":"2022-03-19"},{"lineNumber":276,"author":{"gitId":"ivanaitzliddat"},"content":"            \"Activity Id not initialized.\";","lastModifiedDate":"2022-03-19"},{"lineNumber":277,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String LOGGER_ACTIVITYDELETE_ACTIVITY_REMOVED \u003d","lastModifiedDate":"2022-03-19"},{"lineNumber":278,"author":{"gitId":"ivanaitzliddat"},"content":"            \"An Activity object was successfully deleted from the list of activities with Id: \";","lastModifiedDate":"2022-03-19"},{"lineNumber":279,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":280,"author":{"gitId":"lelerer"},"content":"    // Activity List Command","lastModifiedDate":"2022-03-12"},{"lineNumber":281,"author":{"gitId":"lelerer"},"content":"    public static final String ERROR_ACTIVITYLIST_ACTIVITY_EMPTY \u003d","lastModifiedDate":"2022-03-12"},{"lineNumber":282,"author":{"gitId":"froststein"},"content":"            \"There are currently no activities in this session.\";","lastModifiedDate":"2022-03-15"},{"lineNumber":283,"author":{"gitId":"lelerer"},"content":"    public static final String ASSERT_ACTIVITYLIST_SESSION_ID_LESS_THAN_ONE \u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":284,"author":{"gitId":"lelerer"},"content":"            \"Session unique identifier is less than one\";","lastModifiedDate":"2022-03-17"},{"lineNumber":285,"author":{"gitId":"lelerer"},"content":"    public static final String LOGGER_ACTIVITYLIST_SESSION_ID_NOT_FOUND \u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":286,"author":{"gitId":"lelerer"},"content":"            \"Session was not found with unique identifier of:\";","lastModifiedDate":"2022-03-17"},{"lineNumber":287,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":288,"author":{"gitId":"lelerer"},"content":"    // Group","lastModifiedDate":"2022-03-17"},{"lineNumber":289,"author":{"gitId":"lelerer"},"content":"    public static final String ERROR_GROUP_EMPTY_PERSON_LIST \u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":290,"author":{"gitId":"lelerer"},"content":"            \"There are currently no person in this group.\";","lastModifiedDate":"2022-03-17"},{"lineNumber":291,"author":{"gitId":"lelerer"},"content":"    public static final String ERROR_GROUP_PERSON_NOT_IN_LIST \u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":292,"author":{"gitId":"lelerer"},"content":"            \"This person is not in the group.\";","lastModifiedDate":"2022-03-17"},{"lineNumber":293,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":294,"author":{"gitId":"lelerer"},"content":"    // Group Create Command","lastModifiedDate":"2022-03-18"},{"lineNumber":295,"author":{"gitId":"lelerer"},"content":"    public static final String ERROR_GROUPCREATE_DUPLICATE_GROUP_NAME \u003d","lastModifiedDate":"2022-03-18"},{"lineNumber":296,"author":{"gitId":"lelerer"},"content":"            \"There is another group with the same name.\";","lastModifiedDate":"2022-03-18"},{"lineNumber":297,"author":{"gitId":"lelerer"},"content":"    public static final String ERROR_GROUPCREATE_DUPLICATE_NAMES \u003d","lastModifiedDate":"2022-03-18"},{"lineNumber":298,"author":{"gitId":"lelerer"},"content":"            \"There are duplicate names in the person list for the group you are trying to create.\";","lastModifiedDate":"2022-03-18"},{"lineNumber":299,"author":{"gitId":"lelerer"},"content":"    public static final String ERROR_GROUPCREATE_DUPLICATE_GROUP_ID \u003d","lastModifiedDate":"2022-03-18"},{"lineNumber":300,"author":{"gitId":"lelerer"},"content":"             \"There is another group with the same Id.\";","lastModifiedDate":"2022-03-18"},{"lineNumber":301,"author":{"gitId":"lelerer"},"content":"    public static final String ASSERT_GROUPCREATE_NAME_DUPLICATE_EXISTS_BUT_NOT_DETECTED \u003d","lastModifiedDate":"2022-03-18"},{"lineNumber":302,"author":{"gitId":"lelerer"},"content":"             \"Name duplicates exists but not detected.\";","lastModifiedDate":"2022-03-18"},{"lineNumber":303,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-20"},{"lineNumber":304,"author":{"gitId":"ivanaitzliddat"},"content":"    // Group View Command","lastModifiedDate":"2022-03-20"},{"lineNumber":305,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String ASSERT_GROUPVIEW_GROUP_ID_NOT_INITIALIZED \u003d","lastModifiedDate":"2022-03-20"},{"lineNumber":306,"author":{"gitId":"ivanaitzliddat"},"content":"            \"Group Id is not initialized.\";","lastModifiedDate":"2022-03-20"},{"lineNumber":307,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String ASSERT_GROUPVIEW_INCORRECT_GROUP \u003d","lastModifiedDate":"2022-03-20"},{"lineNumber":308,"author":{"gitId":"ivanaitzliddat"},"content":"            \"The group returned is incorrect.\";","lastModifiedDate":"2022-03-20"},{"lineNumber":309,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String ASSERT_GROUPVIEW_GROUP_ID_LESS_THAN_ONE \u003d","lastModifiedDate":"2022-03-20"},{"lineNumber":310,"author":{"gitId":"ivanaitzliddat"},"content":"            \"Group unique identifier is less than one\";","lastModifiedDate":"2022-03-20"},{"lineNumber":311,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String LOGGER_GROUPVIEW_GROUP_VIEWED \u003d","lastModifiedDate":"2022-03-20"},{"lineNumber":312,"author":{"gitId":"ivanaitzliddat"},"content":"            \"A Group object was successfully viewed from the list of groups with Id: \";","lastModifiedDate":"2022-03-20"},{"lineNumber":313,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String LOGGER_GROUPVIEW_GROUP_NOT_VIEWED \u003d","lastModifiedDate":"2022-03-20"},{"lineNumber":314,"author":{"gitId":"ivanaitzliddat"},"content":"            \"A Group object was unable to be viewed from the list of groups with Id: \";","lastModifiedDate":"2022-03-20"},{"lineNumber":315,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":316,"author":{"gitId":"ivanaitzliddat"},"content":"    // Group List Command","lastModifiedDate":"2022-03-21"},{"lineNumber":317,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String ASSERT_GROUPLIST_GROUP_SIZE_NOT_ZERO \u003d","lastModifiedDate":"2022-03-21"},{"lineNumber":318,"author":{"gitId":"ivanaitzliddat"},"content":"            \"The list of groups to be printed is not empty.\";","lastModifiedDate":"2022-03-21"},{"lineNumber":319,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String ASSERT_GROUPLIST_GROUP_SIZE_LESS_THAN_ONE \u003d","lastModifiedDate":"2022-03-21"},{"lineNumber":320,"author":{"gitId":"ivanaitzliddat"},"content":"            \"The size of the list of groups to be printed is less than one.\";","lastModifiedDate":"2022-03-21"},{"lineNumber":321,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String LOGGER_GROUPLIST_GROUPS_NOT_LISTED \u003d","lastModifiedDate":"2022-03-21"},{"lineNumber":322,"author":{"gitId":"ivanaitzliddat"},"content":"            \"There are no groups to be listed.\";","lastModifiedDate":"2022-03-21"},{"lineNumber":323,"author":{"gitId":"ivanaitzliddat"},"content":"    public static final String LOGGER_GROUPLIST_GROUPS_LISTED \u003d","lastModifiedDate":"2022-03-21"},{"lineNumber":324,"author":{"gitId":"ivanaitzliddat"},"content":"            \"All the groups have been listed.\";","lastModifiedDate":"2022-03-21"},{"lineNumber":325,"author":{"gitId":"matheril"},"content":"}","lastModifiedDate":"2022-03-03"}],"authorContributionMap":{"ivanaitzliddat":68,"lelerer":22,"warrencxw":126,"froststein":67,"matheril":42}},{"path":"src/main/java/seedu/splitlah/ui/TableFormatter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"matheril"},"content":"package seedu.splitlah.ui;","lastModifiedDate":"2022-03-23"},{"lineNumber":2,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":3,"author":{"gitId":"matheril"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-23"},{"lineNumber":4,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":5,"author":{"gitId":"matheril"},"content":"/**","lastModifiedDate":"2022-03-23"},{"lineNumber":6,"author":{"gitId":"matheril"},"content":" * Represents a Table Formatter that creates a dynamic table that can be updated to add or remove rows,","lastModifiedDate":"2022-03-24"},{"lineNumber":7,"author":{"gitId":"matheril"},"content":" * and prints a neatly formatted table.","lastModifiedDate":"2022-03-23"},{"lineNumber":8,"author":{"gitId":"matheril"},"content":" *","lastModifiedDate":"2022-03-23"},{"lineNumber":9,"author":{"gitId":"matheril"},"content":" * @author Saurav","lastModifiedDate":"2022-03-23"},{"lineNumber":10,"author":{"gitId":"matheril"},"content":" */","lastModifiedDate":"2022-03-23"},{"lineNumber":11,"author":{"gitId":"matheril"},"content":"public class TableFormatter {","lastModifiedDate":"2022-03-23"},{"lineNumber":12,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":13,"author":{"gitId":"matheril"},"content":"    // KEY CONSTANTS","lastModifiedDate":"2022-03-23"},{"lineNumber":14,"author":{"gitId":"matheril"},"content":"    private static final int MINIMUM_PADDING \u003d 2;","lastModifiedDate":"2022-03-23"},{"lineNumber":15,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":16,"author":{"gitId":"matheril"},"content":"    private TableFormatterRow columnHeaders;","lastModifiedDate":"2022-03-23"},{"lineNumber":17,"author":{"gitId":"matheril"},"content":"    private ArrayList\u003cTableFormatterRow\u003e rows;","lastModifiedDate":"2022-03-23"},{"lineNumber":18,"author":{"gitId":"matheril"},"content":"    private String tableName \u003d null;","lastModifiedDate":"2022-03-23"},{"lineNumber":19,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":20,"author":{"gitId":"matheril"},"content":"    public TableFormatter(String... columnHeaders) {","lastModifiedDate":"2022-03-23"},{"lineNumber":21,"author":{"gitId":"matheril"},"content":"        this.columnHeaders \u003d new TableFormatterRow(columnHeaders);","lastModifiedDate":"2022-03-23"},{"lineNumber":22,"author":{"gitId":"matheril"},"content":"        this.rows \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-23"},{"lineNumber":23,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":24,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":25,"author":{"gitId":"matheril"},"content":"    public int getRowLength() {","lastModifiedDate":"2022-03-23"},{"lineNumber":26,"author":{"gitId":"matheril"},"content":"        return columnHeaders.getRowLength();","lastModifiedDate":"2022-03-23"},{"lineNumber":27,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":28,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":29,"author":{"gitId":"matheril"},"content":"    public void addTableName(String tableName) {","lastModifiedDate":"2022-03-23"},{"lineNumber":30,"author":{"gitId":"matheril"},"content":"        this.tableName \u003d tableName;","lastModifiedDate":"2022-03-23"},{"lineNumber":31,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":32,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":33,"author":{"gitId":"matheril"},"content":"    /**","lastModifiedDate":"2022-03-23"},{"lineNumber":34,"author":{"gitId":"matheril"},"content":"     * Creates a TableFormatterRow object from the supplied String objects and adds the row to the TableFormatter","lastModifiedDate":"2022-03-23"},{"lineNumber":35,"author":{"gitId":"matheril"},"content":"     * object.","lastModifiedDate":"2022-03-23"},{"lineNumber":36,"author":{"gitId":"matheril"},"content":"     * If the number of String objects supplied does not match the number of columns, a new TableFormatterRow object","lastModifiedDate":"2022-03-23"},{"lineNumber":37,"author":{"gitId":"matheril"},"content":"     * is not created or added.","lastModifiedDate":"2022-03-23"},{"lineNumber":38,"author":{"gitId":"matheril"},"content":"     *","lastModifiedDate":"2022-03-23"},{"lineNumber":39,"author":{"gitId":"matheril"},"content":"     * @param rowItems One or more String objects that form this TableFormatterRow object.","lastModifiedDate":"2022-03-23"},{"lineNumber":40,"author":{"gitId":"matheril"},"content":"     * @return true if a new TableFormatterRow object was successfully created and added to the TableFormatter object.","lastModifiedDate":"2022-03-23"},{"lineNumber":41,"author":{"gitId":"matheril"},"content":"     *         false if the number of String objects supplied did not match the number of columns.","lastModifiedDate":"2022-03-23"},{"lineNumber":42,"author":{"gitId":"matheril"},"content":"     */","lastModifiedDate":"2022-03-23"},{"lineNumber":43,"author":{"gitId":"matheril"},"content":"    public boolean addRow(String... rowItems) {","lastModifiedDate":"2022-03-23"},{"lineNumber":44,"author":{"gitId":"matheril"},"content":"        if (rowItems.length !\u003d getRowLength()) {","lastModifiedDate":"2022-03-23"},{"lineNumber":45,"author":{"gitId":"matheril"},"content":"            return false;","lastModifiedDate":"2022-03-23"},{"lineNumber":46,"author":{"gitId":"matheril"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":47,"author":{"gitId":"matheril"},"content":"        rows.add(new TableFormatterRow(rowItems));","lastModifiedDate":"2022-03-23"},{"lineNumber":48,"author":{"gitId":"matheril"},"content":"        return true;","lastModifiedDate":"2022-03-23"},{"lineNumber":49,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":50,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":51,"author":{"gitId":"matheril"},"content":"    /**","lastModifiedDate":"2022-03-23"},{"lineNumber":52,"author":{"gitId":"matheril"},"content":"     * Deletes a row from the table by index. Rows start from 0.","lastModifiedDate":"2022-03-23"},{"lineNumber":53,"author":{"gitId":"matheril"},"content":"     *","lastModifiedDate":"2022-03-23"},{"lineNumber":54,"author":{"gitId":"matheril"},"content":"     * @param row An integer representing the row number.","lastModifiedDate":"2022-03-23"},{"lineNumber":55,"author":{"gitId":"matheril"},"content":"     * @return true if the row was successfully deleted.","lastModifiedDate":"2022-03-23"},{"lineNumber":56,"author":{"gitId":"matheril"},"content":"     *         false if the row index was invalid. No row will be deleted.","lastModifiedDate":"2022-03-23"},{"lineNumber":57,"author":{"gitId":"matheril"},"content":"     */","lastModifiedDate":"2022-03-23"},{"lineNumber":58,"author":{"gitId":"matheril"},"content":"    public boolean deleteRow(int row) {","lastModifiedDate":"2022-03-23"},{"lineNumber":59,"author":{"gitId":"matheril"},"content":"        if (row \u003e\u003d rows.size()) {","lastModifiedDate":"2022-03-23"},{"lineNumber":60,"author":{"gitId":"matheril"},"content":"            return false;","lastModifiedDate":"2022-03-23"},{"lineNumber":61,"author":{"gitId":"matheril"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":62,"author":{"gitId":"matheril"},"content":"        rows.remove(row);","lastModifiedDate":"2022-03-23"},{"lineNumber":63,"author":{"gitId":"matheril"},"content":"        return true;","lastModifiedDate":"2022-03-23"},{"lineNumber":64,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":65,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":66,"author":{"gitId":"matheril"},"content":"    /**","lastModifiedDate":"2022-03-23"},{"lineNumber":67,"author":{"gitId":"matheril"},"content":"     * Calculates maximum width of the specified column. The first column is column 0.","lastModifiedDate":"2022-03-23"},{"lineNumber":68,"author":{"gitId":"matheril"},"content":"     *","lastModifiedDate":"2022-03-23"},{"lineNumber":69,"author":{"gitId":"matheril"},"content":"     * @param column An integer representing the column number.","lastModifiedDate":"2022-03-23"},{"lineNumber":70,"author":{"gitId":"matheril"},"content":"     * @return An integer representing the maximum width of the specified column.","lastModifiedDate":"2022-03-23"},{"lineNumber":71,"author":{"gitId":"matheril"},"content":"     */","lastModifiedDate":"2022-03-23"},{"lineNumber":72,"author":{"gitId":"matheril"},"content":"    private int calculateColumnWidth(int column) {","lastModifiedDate":"2022-03-23"},{"lineNumber":73,"author":{"gitId":"matheril"},"content":"        int maxColumnWidth \u003d 0;","lastModifiedDate":"2022-03-23"},{"lineNumber":74,"author":{"gitId":"matheril"},"content":"        int headerLength \u003d columnHeaders.getItem(column).length();","lastModifiedDate":"2022-03-23"},{"lineNumber":75,"author":{"gitId":"matheril"},"content":"        for (TableFormatterRow row : rows) {","lastModifiedDate":"2022-03-23"},{"lineNumber":76,"author":{"gitId":"matheril"},"content":"            int rowLength \u003d row.getItem(column).length();","lastModifiedDate":"2022-03-23"},{"lineNumber":77,"author":{"gitId":"matheril"},"content":"            maxColumnWidth \u003d Math.max(maxColumnWidth, rowLength);","lastModifiedDate":"2022-03-23"},{"lineNumber":78,"author":{"gitId":"matheril"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":79,"author":{"gitId":"matheril"},"content":"        return Math.max(maxColumnWidth, headerLength);","lastModifiedDate":"2022-03-23"},{"lineNumber":80,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":81,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":82,"author":{"gitId":"matheril"},"content":"    /**","lastModifiedDate":"2022-03-23"},{"lineNumber":83,"author":{"gitId":"matheril"},"content":"     * Calculates all column widths in the table and returns them in an integer array object.","lastModifiedDate":"2022-03-23"},{"lineNumber":84,"author":{"gitId":"matheril"},"content":"     *","lastModifiedDate":"2022-03-23"},{"lineNumber":85,"author":{"gitId":"matheril"},"content":"     * @return An integer array object containing the maximum column widths of each column in order.","lastModifiedDate":"2022-03-23"},{"lineNumber":86,"author":{"gitId":"matheril"},"content":"     */","lastModifiedDate":"2022-03-23"},{"lineNumber":87,"author":{"gitId":"matheril"},"content":"    private int[] calculateAllColumnWidths() {","lastModifiedDate":"2022-03-23"},{"lineNumber":88,"author":{"gitId":"matheril"},"content":"        int[] columnWidths \u003d new int[columnHeaders.getRowLength()];","lastModifiedDate":"2022-03-23"},{"lineNumber":89,"author":{"gitId":"matheril"},"content":"        for (int column \u003d 0; column \u003c columnHeaders.getRowLength(); ++column) {","lastModifiedDate":"2022-03-23"},{"lineNumber":90,"author":{"gitId":"matheril"},"content":"            columnWidths[column] \u003d calculateColumnWidth(column);","lastModifiedDate":"2022-03-23"},{"lineNumber":91,"author":{"gitId":"matheril"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":92,"author":{"gitId":"matheril"},"content":"        return columnWidths;","lastModifiedDate":"2022-03-23"},{"lineNumber":93,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":94,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":95,"author":{"gitId":"matheril"},"content":"    /**","lastModifiedDate":"2022-03-23"},{"lineNumber":96,"author":{"gitId":"matheril"},"content":"     * Pads and formats a row with decorative characters.","lastModifiedDate":"2022-03-23"},{"lineNumber":97,"author":{"gitId":"matheril"},"content":"     *","lastModifiedDate":"2022-03-23"},{"lineNumber":98,"author":{"gitId":"matheril"},"content":"     * @param row A TableFormatterRow object to be formatted.","lastModifiedDate":"2022-03-23"},{"lineNumber":99,"author":{"gitId":"matheril"},"content":"     * @param columnWidths An integer array object containing the maximum column widths of the table.","lastModifiedDate":"2022-03-23"},{"lineNumber":100,"author":{"gitId":"matheril"},"content":"     * @return A String object containing the formatted and decorated row.","lastModifiedDate":"2022-03-23"},{"lineNumber":101,"author":{"gitId":"matheril"},"content":"     */","lastModifiedDate":"2022-03-23"},{"lineNumber":102,"author":{"gitId":"matheril"},"content":"    private String decorateRow(TableFormatterRow row, int[] columnWidths) {","lastModifiedDate":"2022-03-23"},{"lineNumber":103,"author":{"gitId":"matheril"},"content":"        ArrayList\u003cString\u003e paddedRow \u003d row.padRow(columnWidths);","lastModifiedDate":"2022-03-23"},{"lineNumber":104,"author":{"gitId":"matheril"},"content":"        StringBuilder decoratedRow \u003d new StringBuilder();","lastModifiedDate":"2022-03-23"},{"lineNumber":105,"author":{"gitId":"matheril"},"content":"        for (int rowIndex \u003d 0; rowIndex \u003c columnWidths.length; ++rowIndex) {","lastModifiedDate":"2022-03-23"},{"lineNumber":106,"author":{"gitId":"matheril"},"content":"            decoratedRow.append(paddedRow.get(rowIndex));","lastModifiedDate":"2022-03-23"},{"lineNumber":107,"author":{"gitId":"matheril"},"content":"            if (rowIndex \u003c columnWidths.length - 1) {","lastModifiedDate":"2022-03-23"},{"lineNumber":108,"author":{"gitId":"matheril"},"content":"                decoratedRow.append(\"|\");","lastModifiedDate":"2022-03-23"},{"lineNumber":109,"author":{"gitId":"matheril"},"content":"            }","lastModifiedDate":"2022-03-23"},{"lineNumber":110,"author":{"gitId":"matheril"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":111,"author":{"gitId":"matheril"},"content":"        return String.valueOf(decoratedRow);","lastModifiedDate":"2022-03-23"},{"lineNumber":112,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":113,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":114,"author":{"gitId":"matheril"},"content":"    /**","lastModifiedDate":"2022-03-23"},{"lineNumber":115,"author":{"gitId":"matheril"},"content":"     * Calculates total table width from a given integer array object containing column widths.","lastModifiedDate":"2022-03-23"},{"lineNumber":116,"author":{"gitId":"matheril"},"content":"     *","lastModifiedDate":"2022-03-23"},{"lineNumber":117,"author":{"gitId":"matheril"},"content":"     * @param columnWidths An integer array object representing the widths of each column.","lastModifiedDate":"2022-03-23"},{"lineNumber":118,"author":{"gitId":"matheril"},"content":"     * @return The total width of the table.","lastModifiedDate":"2022-03-23"},{"lineNumber":119,"author":{"gitId":"matheril"},"content":"     */","lastModifiedDate":"2022-03-23"},{"lineNumber":120,"author":{"gitId":"matheril"},"content":"    private int calculateTableWidth(int[] columnWidths) {","lastModifiedDate":"2022-03-23"},{"lineNumber":121,"author":{"gitId":"matheril"},"content":"        int tableWidth \u003d 0;","lastModifiedDate":"2022-03-23"},{"lineNumber":122,"author":{"gitId":"matheril"},"content":"        for (int columnWidth : columnWidths) {","lastModifiedDate":"2022-03-23"},{"lineNumber":123,"author":{"gitId":"matheril"},"content":"            tableWidth +\u003d columnWidth;","lastModifiedDate":"2022-03-23"},{"lineNumber":124,"author":{"gitId":"matheril"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":125,"author":{"gitId":"matheril"},"content":"        return (tableWidth + (MINIMUM_PADDING * columnWidths.length));","lastModifiedDate":"2022-03-23"},{"lineNumber":126,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":127,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":128,"author":{"gitId":"matheril"},"content":"    /**","lastModifiedDate":"2022-03-23"},{"lineNumber":129,"author":{"gitId":"matheril"},"content":"     * Formats all rows in this TableFormatter object, decorates them and appends them to a table String object.","lastModifiedDate":"2022-03-23"},{"lineNumber":130,"author":{"gitId":"matheril"},"content":"     *","lastModifiedDate":"2022-03-23"},{"lineNumber":131,"author":{"gitId":"matheril"},"content":"     * @param columnWidths integer array object containing the maximum width of each column.","lastModifiedDate":"2022-03-23"},{"lineNumber":132,"author":{"gitId":"matheril"},"content":"     * @param formattedTable A StringBuilder object representing the formatted table without the rows.","lastModifiedDate":"2022-03-23"},{"lineNumber":133,"author":{"gitId":"matheril"},"content":"     */","lastModifiedDate":"2022-03-23"},{"lineNumber":134,"author":{"gitId":"matheril"},"content":"    private void appendRowsToFormattedTableString(int[] columnWidths, StringBuilder formattedTable) {","lastModifiedDate":"2022-03-23"},{"lineNumber":135,"author":{"gitId":"matheril"},"content":"        for (TableFormatterRow row : rows) {","lastModifiedDate":"2022-03-23"},{"lineNumber":136,"author":{"gitId":"matheril"},"content":"            formattedTable.append(decorateRow(row, columnWidths));","lastModifiedDate":"2022-03-23"},{"lineNumber":137,"author":{"gitId":"matheril"},"content":"            formattedTable.append(\"\\n\");","lastModifiedDate":"2022-03-23"},{"lineNumber":138,"author":{"gitId":"matheril"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":139,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":140,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":141,"author":{"gitId":"matheril"},"content":"    /**","lastModifiedDate":"2022-03-23"},{"lineNumber":142,"author":{"gitId":"matheril"},"content":"     * Appends the name of this TableFormatter object to the table StringBuilder object if a name has been set.","lastModifiedDate":"2022-03-23"},{"lineNumber":143,"author":{"gitId":"matheril"},"content":"     *","lastModifiedDate":"2022-03-23"},{"lineNumber":144,"author":{"gitId":"matheril"},"content":"     * @param formattedTable A StringBuilder object representing the formatted table.","lastModifiedDate":"2022-03-23"},{"lineNumber":145,"author":{"gitId":"matheril"},"content":"     */","lastModifiedDate":"2022-03-23"},{"lineNumber":146,"author":{"gitId":"matheril"},"content":"    private void appendTableNameIfExists(StringBuilder formattedTable) {","lastModifiedDate":"2022-03-23"},{"lineNumber":147,"author":{"gitId":"matheril"},"content":"        if (tableName !\u003d null) {","lastModifiedDate":"2022-03-23"},{"lineNumber":148,"author":{"gitId":"matheril"},"content":"            formattedTable.append(tableName).append(\"\\n\");","lastModifiedDate":"2022-03-23"},{"lineNumber":149,"author":{"gitId":"matheril"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":150,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":151,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":152,"author":{"gitId":"matheril"},"content":"    @Override","lastModifiedDate":"2022-03-23"},{"lineNumber":153,"author":{"gitId":"matheril"},"content":"    public String toString() {","lastModifiedDate":"2022-03-23"},{"lineNumber":154,"author":{"gitId":"matheril"},"content":"        int[] columnWidths \u003d calculateAllColumnWidths();","lastModifiedDate":"2022-03-23"},{"lineNumber":155,"author":{"gitId":"matheril"},"content":"        StringBuilder formattedTable \u003d new StringBuilder();","lastModifiedDate":"2022-03-23"},{"lineNumber":156,"author":{"gitId":"matheril"},"content":"        appendTableNameIfExists(formattedTable);","lastModifiedDate":"2022-03-23"},{"lineNumber":157,"author":{"gitId":"matheril"},"content":"        formattedTable.append(\"-\".repeat(calculateTableWidth(columnWidths) + MINIMUM_PADDING)).append(\"\\n\");","lastModifiedDate":"2022-03-23"},{"lineNumber":158,"author":{"gitId":"matheril"},"content":"        formattedTable.append(decorateRow(columnHeaders, columnWidths)).append(\"\\n\");","lastModifiedDate":"2022-03-23"},{"lineNumber":159,"author":{"gitId":"matheril"},"content":"        formattedTable.append(\"-\".repeat(calculateTableWidth(columnWidths) + MINIMUM_PADDING)).append(\"\\n\");","lastModifiedDate":"2022-03-23"},{"lineNumber":160,"author":{"gitId":"matheril"},"content":"        appendRowsToFormattedTableString(columnWidths, formattedTable);","lastModifiedDate":"2022-03-23"},{"lineNumber":161,"author":{"gitId":"matheril"},"content":"        formattedTable.append(\"\u003d\".repeat(calculateTableWidth(columnWidths) + MINIMUM_PADDING));","lastModifiedDate":"2022-03-23"},{"lineNumber":162,"author":{"gitId":"matheril"},"content":"        return String.valueOf(formattedTable);","lastModifiedDate":"2022-03-23"},{"lineNumber":163,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":164,"author":{"gitId":"matheril"},"content":"}","lastModifiedDate":"2022-03-23"}],"authorContributionMap":{"matheril":164}},{"path":"src/main/java/seedu/splitlah/ui/TableFormatterRow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"matheril"},"content":"package seedu.splitlah.ui;","lastModifiedDate":"2022-03-23"},{"lineNumber":2,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":3,"author":{"gitId":"matheril"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-23"},{"lineNumber":4,"author":{"gitId":"matheril"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-03-23"},{"lineNumber":5,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":6,"author":{"gitId":"matheril"},"content":"/**","lastModifiedDate":"2022-03-23"},{"lineNumber":7,"author":{"gitId":"matheril"},"content":" * Represents a row of items in a TableFormatter object.","lastModifiedDate":"2022-03-23"},{"lineNumber":8,"author":{"gitId":"matheril"},"content":" *","lastModifiedDate":"2022-03-23"},{"lineNumber":9,"author":{"gitId":"matheril"},"content":" * @author Saurav","lastModifiedDate":"2022-03-23"},{"lineNumber":10,"author":{"gitId":"matheril"},"content":" */","lastModifiedDate":"2022-03-23"},{"lineNumber":11,"author":{"gitId":"matheril"},"content":"public class TableFormatterRow {","lastModifiedDate":"2022-03-23"},{"lineNumber":12,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":13,"author":{"gitId":"matheril"},"content":"    private ArrayList\u003cString\u003e rowItems;","lastModifiedDate":"2022-03-23"},{"lineNumber":14,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":15,"author":{"gitId":"matheril"},"content":"    public TableFormatterRow(String... rowItems) {","lastModifiedDate":"2022-03-23"},{"lineNumber":16,"author":{"gitId":"matheril"},"content":"        this.rowItems \u003d new ArrayList\u003c\u003e(Arrays.asList(rowItems));","lastModifiedDate":"2022-03-23"},{"lineNumber":17,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":18,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":19,"author":{"gitId":"matheril"},"content":"    public int getRowLength() {","lastModifiedDate":"2022-03-23"},{"lineNumber":20,"author":{"gitId":"matheril"},"content":"        return rowItems.size();","lastModifiedDate":"2022-03-23"},{"lineNumber":21,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":22,"author":{"gitId":"matheril"},"content":"    /**","lastModifiedDate":"2022-03-23"},{"lineNumber":23,"author":{"gitId":"matheril"},"content":"     * Returns a String object representing a specific row item in a TableFormatterRow object.","lastModifiedDate":"2022-03-23"},{"lineNumber":24,"author":{"gitId":"matheril"},"content":"     * Row items start at index 0.","lastModifiedDate":"2022-03-23"},{"lineNumber":25,"author":{"gitId":"matheril"},"content":"     *","lastModifiedDate":"2022-03-23"},{"lineNumber":26,"author":{"gitId":"matheril"},"content":"     * @param index An integer that represents location of the row item.","lastModifiedDate":"2022-03-23"},{"lineNumber":27,"author":{"gitId":"matheril"},"content":"     * @return A String object representing the row item.","lastModifiedDate":"2022-03-23"},{"lineNumber":28,"author":{"gitId":"matheril"},"content":"     */","lastModifiedDate":"2022-03-23"},{"lineNumber":29,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":30,"author":{"gitId":"matheril"},"content":"    public String getItem(int index) {","lastModifiedDate":"2022-03-23"},{"lineNumber":31,"author":{"gitId":"matheril"},"content":"        return rowItems.get(index);","lastModifiedDate":"2022-03-23"},{"lineNumber":32,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":33,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":34,"author":{"gitId":"matheril"},"content":"    /**","lastModifiedDate":"2022-03-23"},{"lineNumber":35,"author":{"gitId":"matheril"},"content":"     * Returns a String object representing a specific row item in a TableFormatterRow object, padded with whitespace.","lastModifiedDate":"2022-03-23"},{"lineNumber":36,"author":{"gitId":"matheril"},"content":"     * Row items start at index 0.","lastModifiedDate":"2022-03-23"},{"lineNumber":37,"author":{"gitId":"matheril"},"content":"     *","lastModifiedDate":"2022-03-23"},{"lineNumber":38,"author":{"gitId":"matheril"},"content":"     * @param index An integer that represents the location of the row item.","lastModifiedDate":"2022-03-23"},{"lineNumber":39,"author":{"gitId":"matheril"},"content":"     * @param widthToAlignTo An integer that represents the total width that the item should be padded to align to.","lastModifiedDate":"2022-03-23"},{"lineNumber":40,"author":{"gitId":"matheril"},"content":"     * @return A String object representing the padded row item.","lastModifiedDate":"2022-03-23"},{"lineNumber":41,"author":{"gitId":"matheril"},"content":"     */","lastModifiedDate":"2022-03-23"},{"lineNumber":42,"author":{"gitId":"matheril"},"content":"    private String padRowItem(int index, int widthToAlignTo) {","lastModifiedDate":"2022-03-23"},{"lineNumber":43,"author":{"gitId":"matheril"},"content":"        StringBuilder paddedItem \u003d new StringBuilder();","lastModifiedDate":"2022-03-23"},{"lineNumber":44,"author":{"gitId":"matheril"},"content":"        if (index !\u003d 0) {","lastModifiedDate":"2022-03-23"},{"lineNumber":45,"author":{"gitId":"matheril"},"content":"            paddedItem \u003d new StringBuilder(\" \");","lastModifiedDate":"2022-03-23"},{"lineNumber":46,"author":{"gitId":"matheril"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":47,"author":{"gitId":"matheril"},"content":"        paddedItem.append(rowItems.get(index));","lastModifiedDate":"2022-03-23"},{"lineNumber":48,"author":{"gitId":"matheril"},"content":"        int paddingNecessary \u003d widthToAlignTo - rowItems.get(index).length();","lastModifiedDate":"2022-03-23"},{"lineNumber":49,"author":{"gitId":"matheril"},"content":"        assert paddingNecessary \u003e\u003d 0;","lastModifiedDate":"2022-03-23"},{"lineNumber":50,"author":{"gitId":"matheril"},"content":"        paddedItem.append(\" \".repeat(paddingNecessary));","lastModifiedDate":"2022-03-23"},{"lineNumber":51,"author":{"gitId":"matheril"},"content":"        return String.valueOf(paddedItem.append(\" \"));","lastModifiedDate":"2022-03-23"},{"lineNumber":52,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":53,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":54,"author":{"gitId":"matheril"},"content":"    /**","lastModifiedDate":"2022-03-23"},{"lineNumber":55,"author":{"gitId":"matheril"},"content":"     * Returns an ArrayList object containing each row item padded according to the integer array object","lastModifiedDate":"2022-03-23"},{"lineNumber":56,"author":{"gitId":"matheril"},"content":"     * passed into the method.","lastModifiedDate":"2022-03-23"},{"lineNumber":57,"author":{"gitId":"matheril"},"content":"     *","lastModifiedDate":"2022-03-23"},{"lineNumber":58,"author":{"gitId":"matheril"},"content":"     * @param columnWidths An integer array object specifying the width each row item should be aligned to.","lastModifiedDate":"2022-03-23"},{"lineNumber":59,"author":{"gitId":"matheril"},"content":"     * @return An ArrayList object containing each padded row item of this row.","lastModifiedDate":"2022-03-23"},{"lineNumber":60,"author":{"gitId":"matheril"},"content":"     */","lastModifiedDate":"2022-03-23"},{"lineNumber":61,"author":{"gitId":"matheril"},"content":"    public ArrayList\u003cString\u003e padRow(int[] columnWidths) {","lastModifiedDate":"2022-03-23"},{"lineNumber":62,"author":{"gitId":"matheril"},"content":"        ArrayList\u003cString\u003e paddedRow \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-23"},{"lineNumber":63,"author":{"gitId":"matheril"},"content":"        for (int rowItemIndex \u003d 0; rowItemIndex \u003c columnWidths.length; ++rowItemIndex) {","lastModifiedDate":"2022-03-23"},{"lineNumber":64,"author":{"gitId":"matheril"},"content":"            paddedRow.add(padRowItem(rowItemIndex, columnWidths[rowItemIndex]));","lastModifiedDate":"2022-03-23"},{"lineNumber":65,"author":{"gitId":"matheril"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":66,"author":{"gitId":"matheril"},"content":"        return paddedRow;","lastModifiedDate":"2022-03-23"},{"lineNumber":67,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":68,"author":{"gitId":"matheril"},"content":"}","lastModifiedDate":"2022-03-23"}],"authorContributionMap":{"matheril":68}},{"path":"src/main/java/seedu/splitlah/ui/TextUI.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah.ui;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":3,"author":{"gitId":"matheril"},"content":"import java.io.InputStream;","lastModifiedDate":"2022-03-03"},{"lineNumber":4,"author":{"gitId":"matheril"},"content":"import java.io.PrintStream;","lastModifiedDate":"2022-03-03"},{"lineNumber":5,"author":{"gitId":"matheril"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-03-03"},{"lineNumber":6,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":7,"author":{"gitId":"matheril"},"content":"/**","lastModifiedDate":"2022-03-03"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":" * Represents a user interface that reads from and writes to the command line.","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"matheril"},"content":" *","lastModifiedDate":"2022-03-04"},{"lineNumber":10,"author":{"gitId":"matheril"},"content":" * @author Saurav","lastModifiedDate":"2022-03-03"},{"lineNumber":11,"author":{"gitId":"matheril"},"content":" */","lastModifiedDate":"2022-03-03"},{"lineNumber":12,"author":{"gitId":"matheril"},"content":"public class TextUI {","lastModifiedDate":"2022-03-03"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"    ","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"matheril"},"content":"    Scanner in;","lastModifiedDate":"2022-03-03"},{"lineNumber":15,"author":{"gitId":"matheril"},"content":"    PrintStream out;","lastModifiedDate":"2022-03-03"},{"lineNumber":16,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":17,"author":{"gitId":"matheril"},"content":"    public TextUI(InputStream in, PrintStream out) {","lastModifiedDate":"2022-03-03"},{"lineNumber":18,"author":{"gitId":"matheril"},"content":"        this.in \u003d new Scanner(in);","lastModifiedDate":"2022-03-03"},{"lineNumber":19,"author":{"gitId":"matheril"},"content":"        this.out \u003d out;","lastModifiedDate":"2022-03-03"},{"lineNumber":20,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-03"},{"lineNumber":21,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":22,"author":{"gitId":"matheril"},"content":"    public TextUI() {","lastModifiedDate":"2022-03-03"},{"lineNumber":23,"author":{"gitId":"matheril"},"content":"        in \u003d new Scanner(System.in);","lastModifiedDate":"2022-03-03"},{"lineNumber":24,"author":{"gitId":"matheril"},"content":"        out \u003d new PrintStream(System.out);","lastModifiedDate":"2022-03-03"},{"lineNumber":25,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-03"},{"lineNumber":26,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":27,"author":{"gitId":"matheril"},"content":"    public void printMessage(String message) {","lastModifiedDate":"2022-03-12"},{"lineNumber":28,"author":{"gitId":"matheril"},"content":"        out.print(message);","lastModifiedDate":"2022-03-12"},{"lineNumber":29,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-12"},{"lineNumber":30,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":31,"author":{"gitId":"matheril"},"content":"    public void printlnMessage(String message) {","lastModifiedDate":"2022-03-03"},{"lineNumber":32,"author":{"gitId":"matheril"},"content":"        out.println(message);","lastModifiedDate":"2022-03-03"},{"lineNumber":33,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-03"},{"lineNumber":34,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":35,"author":{"gitId":"froststein"},"content":"    public void printlnMessageWithDivider(String message) {","lastModifiedDate":"2022-03-11"},{"lineNumber":36,"author":{"gitId":"froststein"},"content":"        out.println(message);","lastModifiedDate":"2022-03-11"},{"lineNumber":37,"author":{"gitId":"froststein"},"content":"        printDivider();","lastModifiedDate":"2022-03-11"},{"lineNumber":38,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-11"},{"lineNumber":39,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-11"},{"lineNumber":40,"author":{"gitId":"froststein"},"content":"    public void printlnMessageWithDashDivider(String message) {","lastModifiedDate":"2022-03-15"},{"lineNumber":41,"author":{"gitId":"froststein"},"content":"        out.println(message);","lastModifiedDate":"2022-03-15"},{"lineNumber":42,"author":{"gitId":"froststein"},"content":"        printDashDivider();","lastModifiedDate":"2022-03-15"},{"lineNumber":43,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":44,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":45,"author":{"gitId":"matheril"},"content":"    public String readNextLine() {","lastModifiedDate":"2022-03-03"},{"lineNumber":46,"author":{"gitId":"matheril"},"content":"        printMessage(Message.PROMPT_TEXTUI_AWAITING_INPUT);","lastModifiedDate":"2022-03-12"},{"lineNumber":47,"author":{"gitId":"matheril"},"content":"        return in.nextLine();","lastModifiedDate":"2022-03-03"},{"lineNumber":48,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-03"},{"lineNumber":49,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":50,"author":{"gitId":"matheril"},"content":"    public void printWelcome() {","lastModifiedDate":"2022-03-03"},{"lineNumber":51,"author":{"gitId":"matheril"},"content":"        printDivider();","lastModifiedDate":"2022-03-03"},{"lineNumber":52,"author":{"gitId":"warrencxw"},"content":"        out.println(Message.ASCII_TEXTUI_LOGO);","lastModifiedDate":"2022-03-09"},{"lineNumber":53,"author":{"gitId":"matheril"},"content":"        out.println(\"Welcome to Splitlah!\");","lastModifiedDate":"2022-03-03"},{"lineNumber":54,"author":{"gitId":"matheril"},"content":"        printDivider();","lastModifiedDate":"2022-03-03"},{"lineNumber":55,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-03"},{"lineNumber":56,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":57,"author":{"gitId":"matheril"},"content":"    private void printDivider() {","lastModifiedDate":"2022-03-03"},{"lineNumber":58,"author":{"gitId":"matheril"},"content":"        out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2022-03-03"},{"lineNumber":59,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-03"},{"lineNumber":60,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":61,"author":{"gitId":"froststein"},"content":"    public void printDashDivider() {","lastModifiedDate":"2022-03-12"},{"lineNumber":62,"author":{"gitId":"froststein"},"content":"        out.println(\"------------------------------------------------------------\");","lastModifiedDate":"2022-03-12"},{"lineNumber":63,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-12"},{"lineNumber":64,"author":{"gitId":"froststein"},"content":"    ","lastModifiedDate":"2022-03-12"},{"lineNumber":65,"author":{"gitId":"warrencxw"},"content":"    public void printHelpMenu() {","lastModifiedDate":"2022-03-06"},{"lineNumber":66,"author":{"gitId":"warrencxw"},"content":"        printlnMessageWithDivider(Message.MESSAGE_TEXTUI_HELP_MENU);","lastModifiedDate":"2022-03-14"},{"lineNumber":67,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-06"},{"lineNumber":68,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-06"},{"lineNumber":69,"author":{"gitId":"matheril"},"content":"    public void printFarewell() {","lastModifiedDate":"2022-03-03"},{"lineNumber":70,"author":{"gitId":"matheril"},"content":"        printDivider();","lastModifiedDate":"2022-03-03"},{"lineNumber":71,"author":{"gitId":"warrencxw"},"content":"        out.println(Message.ASCII_TEXTUI_LOGO);","lastModifiedDate":"2022-03-09"},{"lineNumber":72,"author":{"gitId":"matheril"},"content":"        out.println(\"Goodbye!\");","lastModifiedDate":"2022-03-03"},{"lineNumber":73,"author":{"gitId":"matheril"},"content":"        printDivider();","lastModifiedDate":"2022-03-03"},{"lineNumber":74,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-03"},{"lineNumber":75,"author":{"gitId":"matheril"},"content":"}","lastModifiedDate":"2022-03-03"}],"authorContributionMap":{"warrencxw":8,"froststein":15,"matheril":52}},{"path":"src/main/java/seedu/splitlah/util/PersonCostPair.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package seedu.splitlah.util;","lastModifiedDate":"2022-03-09"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.data.Person;","lastModifiedDate":"2022-03-09"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-03-09"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-03-09"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":" * Represents a total cost that a person must pay or receive to settle the transactions for the session.","lastModifiedDate":"2022-03-09"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":" * A negative value represents a debt to pay another person with a positive value.","lastModifiedDate":"2022-03-09"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":" * ","lastModifiedDate":"2022-03-09"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":" * @author Warren","lastModifiedDate":"2022-03-09"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-03-09"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"public class PersonCostPair implements Comparable\u003cPersonCostPair\u003e {","lastModifiedDate":"2022-03-09"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"    private Person person;","lastModifiedDate":"2022-03-09"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"    private double cost;","lastModifiedDate":"2022-03-09"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"    private boolean isProcessed;","lastModifiedDate":"2022-03-09"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"    public Person getPerson() {","lastModifiedDate":"2022-03-09"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"        return person;","lastModifiedDate":"2022-03-09"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"    public double getCost() {","lastModifiedDate":"2022-03-09"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"        return cost;","lastModifiedDate":"2022-03-09"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"    public void setCost(double cost) {","lastModifiedDate":"2022-03-09"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"        this.cost \u003d cost;","lastModifiedDate":"2022-03-09"},{"lineNumber":29,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":31,"author":{"gitId":"warrencxw"},"content":"    public boolean isProcessed() {","lastModifiedDate":"2022-03-09"},{"lineNumber":32,"author":{"gitId":"warrencxw"},"content":"        return isProcessed;","lastModifiedDate":"2022-03-09"},{"lineNumber":33,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":34,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":35,"author":{"gitId":"warrencxw"},"content":"    public void setProcessed(boolean processed) {","lastModifiedDate":"2022-03-09"},{"lineNumber":36,"author":{"gitId":"warrencxw"},"content":"        isProcessed \u003d processed;","lastModifiedDate":"2022-03-09"},{"lineNumber":37,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":38,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":39,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":40,"author":{"gitId":"warrencxw"},"content":"     * Returns an integer to identify whether this PersonCostPair object should be ordered","lastModifiedDate":"2022-03-09"},{"lineNumber":41,"author":{"gitId":"warrencxw"},"content":"     * before or after another object.","lastModifiedDate":"2022-03-09"},{"lineNumber":42,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-03-09"},{"lineNumber":43,"author":{"gitId":"warrencxw"},"content":"     * @param personCostPair The specified object that this object is comparing to.","lastModifiedDate":"2022-03-09"},{"lineNumber":44,"author":{"gitId":"warrencxw"},"content":"     * @return A value less than 0 if this object\u0027s cost is smaller than the specified object\u0027s cost, ","lastModifiedDate":"2022-03-09"},{"lineNumber":45,"author":{"gitId":"warrencxw"},"content":"     *         a value greater than 0 if this object\u0027s cost is larger,","lastModifiedDate":"2022-03-09"},{"lineNumber":46,"author":{"gitId":"warrencxw"},"content":"     *         and 0 if both objects\u0027 costs are numerically equal.","lastModifiedDate":"2022-03-09"},{"lineNumber":47,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":48,"author":{"gitId":"warrencxw"},"content":"    @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":49,"author":{"gitId":"warrencxw"},"content":"    public int compareTo(PersonCostPair personCostPair) {","lastModifiedDate":"2022-03-09"},{"lineNumber":50,"author":{"gitId":"warrencxw"},"content":"        return Double.compare(cost, personCostPair.getCost());","lastModifiedDate":"2022-03-09"},{"lineNumber":51,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":52,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":53,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-09"},{"lineNumber":54,"author":{"gitId":"warrencxw"},"content":"     * A Comparator that would sort two PersonCostPair objects in ascending order of their costs. ","lastModifiedDate":"2022-03-09"},{"lineNumber":55,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-09"},{"lineNumber":56,"author":{"gitId":"warrencxw"},"content":"    public static Comparator\u003cPersonCostPair\u003e PersonCostPairComparator \u003d new Comparator\u003cPersonCostPair\u003e() {","lastModifiedDate":"2022-03-09"},{"lineNumber":57,"author":{"gitId":"warrencxw"},"content":"        @Override","lastModifiedDate":"2022-03-09"},{"lineNumber":58,"author":{"gitId":"warrencxw"},"content":"        public int compare(PersonCostPair personCostPair1, PersonCostPair personCostPair2) {","lastModifiedDate":"2022-03-09"},{"lineNumber":59,"author":{"gitId":"warrencxw"},"content":"            return personCostPair1.compareTo(personCostPair2);","lastModifiedDate":"2022-03-09"},{"lineNumber":60,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-09"},{"lineNumber":61,"author":{"gitId":"warrencxw"},"content":"    };","lastModifiedDate":"2022-03-09"},{"lineNumber":62,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-09"},{"lineNumber":63,"author":{"gitId":"warrencxw"},"content":"    public PersonCostPair(Person person) {","lastModifiedDate":"2022-03-09"},{"lineNumber":64,"author":{"gitId":"warrencxw"},"content":"        this.person \u003d person;","lastModifiedDate":"2022-03-09"},{"lineNumber":65,"author":{"gitId":"warrencxw"},"content":"        this.cost \u003d person.getTotalCost();","lastModifiedDate":"2022-03-09"},{"lineNumber":66,"author":{"gitId":"warrencxw"},"content":"        this.isProcessed \u003d false;","lastModifiedDate":"2022-03-09"},{"lineNumber":67,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-09"},{"lineNumber":68,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-03-09"}],"authorContributionMap":{"warrencxw":68}},{"path":"src/test/java/seedu/splitlah/SplitLahTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah;","lastModifiedDate":"2022-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2020-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"froststein"},"content":"class SplitLahTest {","lastModifiedDate":"2022-03-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2020-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public void sampleTest() {","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        assertTrue(true);","lastModifiedDate":"2020-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"froststein":2,"-":10}},{"path":"src/test/java/seedu/splitlah/command/ActivityCreateCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ivanaitzliddat"},"content":"package seedu.splitlah.command;","lastModifiedDate":"2022-03-14"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2022-03-14"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.data.Manager;","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.exceptions.InvalidDataException;","lastModifiedDate":"2022-03-14"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.parser.Parser;","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-14"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":"class ActivityCreateCommandTest {","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":"    Manager manager \u003d new Manager();","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":15,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":16,"author":{"gitId":"ivanaitzliddat"},"content":"     * Creates a session that is stored and managed by the Manager object.","lastModifiedDate":"2022-03-14"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":"     * Creates an activity in the new session that was created.","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":"    @BeforeEach","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"    void setUp() {","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"        String sessionOneArgs \u003d \"session /create /n Class outing /d 15-02-2022 /pl Alice Bob Charlie\";","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"ivanaitzliddat"},"content":"        Command createSessionOne \u003d Parser.getCommand(sessionOneArgs);","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"ivanaitzliddat"},"content":"        createSessionOne.run(manager);","lastModifiedDate":"2022-03-14"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"        String activityOneArgs \u003d \"activity /create /sid 1 /n Lunch /p Alice /i Alice Bob Charlie /co 15\";","lastModifiedDate":"2022-03-14"},{"lineNumber":25,"author":{"gitId":"ivanaitzliddat"},"content":"        Command createActivityOne \u003d Parser.getCommand(activityOneArgs);","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"ivanaitzliddat"},"content":"        createActivityOne.run(manager);","lastModifiedDate":"2022-03-14"},{"lineNumber":27,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":28,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":29,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-18"},{"lineNumber":30,"author":{"gitId":"ivanaitzliddat"},"content":"     * Checks if an activity is not created when an activity has duplicate names in the involved list.","lastModifiedDate":"2022-03-18"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-03-18"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws InvalidDataException If there are no sessions stored or","lastModifiedDate":"2022-03-18"},{"lineNumber":33,"author":{"gitId":"ivanaitzliddat"},"content":"     *                              if the session unique identifier specified was not found.","lastModifiedDate":"2022-03-18"},{"lineNumber":34,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-18"},{"lineNumber":35,"author":{"gitId":"ivanaitzliddat"},"content":"    @Test","lastModifiedDate":"2022-03-18"},{"lineNumber":36,"author":{"gitId":"ivanaitzliddat"},"content":"    public void run_hasNameDuplicatesInInvolvedList_activityListSizeRemainsOne() throws InvalidDataException {","lastModifiedDate":"2022-03-18"},{"lineNumber":37,"author":{"gitId":"ivanaitzliddat"},"content":"        String userInput \u003d \"activity /create /sid 1 /n Dinner /p Alice /i Alice Alice Charlie /co 30\";","lastModifiedDate":"2022-03-18"},{"lineNumber":38,"author":{"gitId":"ivanaitzliddat"},"content":"        Command command \u003d Parser.getCommand(userInput);","lastModifiedDate":"2022-03-18"},{"lineNumber":39,"author":{"gitId":"ivanaitzliddat"},"content":"        assertEquals(ActivityCreateCommand.class, command.getClass());","lastModifiedDate":"2022-03-18"},{"lineNumber":40,"author":{"gitId":"ivanaitzliddat"},"content":"        command.run(manager);","lastModifiedDate":"2022-03-18"},{"lineNumber":41,"author":{"gitId":"ivanaitzliddat"},"content":"        assertEquals(1, manager.getProfile().getSession(1).getActivityList().size());","lastModifiedDate":"2022-03-18"},{"lineNumber":42,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":43,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":44,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-18"},{"lineNumber":45,"author":{"gitId":"ivanaitzliddat"},"content":"     * Checks if activity unique identifier is not incremented if an activity fails","lastModifiedDate":"2022-03-18"},{"lineNumber":46,"author":{"gitId":"ivanaitzliddat"},"content":"     * to be created due to duplicate names in involved list.","lastModifiedDate":"2022-03-18"},{"lineNumber":47,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-18"},{"lineNumber":48,"author":{"gitId":"ivanaitzliddat"},"content":"    @Test","lastModifiedDate":"2022-03-18"},{"lineNumber":49,"author":{"gitId":"ivanaitzliddat"},"content":"    public void run_hasNameDuplicatesInInvolvedList_activityIdNotIncremented() {","lastModifiedDate":"2022-03-18"},{"lineNumber":50,"author":{"gitId":"ivanaitzliddat"},"content":"        int currentActivityId \u003d manager.getProfile().getActivityIdTracker();","lastModifiedDate":"2022-03-18"},{"lineNumber":51,"author":{"gitId":"ivanaitzliddat"},"content":"        String userInput \u003d \"activity /create /sid 1 /n Dinner /p Alice /i Alice Alice Charlie /co 30\";","lastModifiedDate":"2022-03-18"},{"lineNumber":52,"author":{"gitId":"ivanaitzliddat"},"content":"        Command command \u003d Parser.getCommand(userInput);","lastModifiedDate":"2022-03-18"},{"lineNumber":53,"author":{"gitId":"ivanaitzliddat"},"content":"        assertEquals(ActivityCreateCommand.class, command.getClass());","lastModifiedDate":"2022-03-18"},{"lineNumber":54,"author":{"gitId":"ivanaitzliddat"},"content":"        command.run(manager);","lastModifiedDate":"2022-03-18"},{"lineNumber":55,"author":{"gitId":"ivanaitzliddat"},"content":"        int testActivityId \u003d manager.getProfile().getActivityIdTracker();","lastModifiedDate":"2022-03-18"},{"lineNumber":56,"author":{"gitId":"ivanaitzliddat"},"content":"        assertEquals(currentActivityId, testActivityId);","lastModifiedDate":"2022-03-18"},{"lineNumber":57,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":58,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":59,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-18"},{"lineNumber":60,"author":{"gitId":"ivanaitzliddat"},"content":"     * Checks if activity is created successfully and added into list of activities.","lastModifiedDate":"2022-03-18"},{"lineNumber":61,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-03-18"},{"lineNumber":62,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws InvalidDataException If there are no sessions stored or","lastModifiedDate":"2022-03-18"},{"lineNumber":63,"author":{"gitId":"ivanaitzliddat"},"content":"     *                              if the session unique identifier specified was not found.","lastModifiedDate":"2022-03-18"},{"lineNumber":64,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-18"},{"lineNumber":65,"author":{"gitId":"ivanaitzliddat"},"content":"    @Test","lastModifiedDate":"2022-03-18"},{"lineNumber":66,"author":{"gitId":"ivanaitzliddat"},"content":"    public void run_validCommand_activityListSizeBecomesTwo() throws InvalidDataException {","lastModifiedDate":"2022-03-18"},{"lineNumber":67,"author":{"gitId":"ivanaitzliddat"},"content":"        String userInput \u003d \"activity /create /sid 1 /n Dinner /p Alice /i Alice Bob Charlie /co 30\";","lastModifiedDate":"2022-03-18"},{"lineNumber":68,"author":{"gitId":"ivanaitzliddat"},"content":"        Command command \u003d Parser.getCommand(userInput);","lastModifiedDate":"2022-03-18"},{"lineNumber":69,"author":{"gitId":"ivanaitzliddat"},"content":"        assertEquals(ActivityCreateCommand.class, command.getClass());","lastModifiedDate":"2022-03-18"},{"lineNumber":70,"author":{"gitId":"ivanaitzliddat"},"content":"        command.run(manager);","lastModifiedDate":"2022-03-18"},{"lineNumber":71,"author":{"gitId":"ivanaitzliddat"},"content":"        assertEquals(2, manager.getProfile().getSession(1).getActivityList().size());","lastModifiedDate":"2022-03-18"},{"lineNumber":72,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":73,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":74,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-18"},{"lineNumber":75,"author":{"gitId":"ivanaitzliddat"},"content":"     * Checks if activity is created successfully and activity unique identifier is incremented.","lastModifiedDate":"2022-03-18"},{"lineNumber":76,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-18"},{"lineNumber":77,"author":{"gitId":"ivanaitzliddat"},"content":"    @Test","lastModifiedDate":"2022-03-18"},{"lineNumber":78,"author":{"gitId":"ivanaitzliddat"},"content":"    public void run_validCommand_activityIdIncremented() {","lastModifiedDate":"2022-03-18"},{"lineNumber":79,"author":{"gitId":"ivanaitzliddat"},"content":"        int currentActivityId \u003d manager.getProfile().getActivityIdTracker();","lastModifiedDate":"2022-03-18"},{"lineNumber":80,"author":{"gitId":"ivanaitzliddat"},"content":"        String userInput \u003d \"activity /create /sid 1 /n Dinner /p Alice /i Alice Bob Charlie /co 30\";","lastModifiedDate":"2022-03-18"},{"lineNumber":81,"author":{"gitId":"ivanaitzliddat"},"content":"        Command command \u003d Parser.getCommand(userInput);","lastModifiedDate":"2022-03-18"},{"lineNumber":82,"author":{"gitId":"ivanaitzliddat"},"content":"        assertEquals(ActivityCreateCommand.class, command.getClass());","lastModifiedDate":"2022-03-18"},{"lineNumber":83,"author":{"gitId":"ivanaitzliddat"},"content":"        command.run(manager);","lastModifiedDate":"2022-03-18"},{"lineNumber":84,"author":{"gitId":"ivanaitzliddat"},"content":"        int testActivityId \u003d manager.getProfile().getActivityIdTracker();","lastModifiedDate":"2022-03-18"},{"lineNumber":85,"author":{"gitId":"ivanaitzliddat"},"content":"        assertEquals(currentActivityId + 1, testActivityId);","lastModifiedDate":"2022-03-18"},{"lineNumber":86,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":87,"author":{"gitId":"ivanaitzliddat"},"content":"}","lastModifiedDate":"2022-03-14"}],"authorContributionMap":{"ivanaitzliddat":87}},{"path":"src/test/java/seedu/splitlah/command/ActivityDeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ivanaitzliddat"},"content":"package seedu.splitlah.command;","lastModifiedDate":"2022-03-16"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2022-03-16"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-16"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.data.Manager;","lastModifiedDate":"2022-03-16"},{"lineNumber":6,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.exceptions.InvalidDataException;","lastModifiedDate":"2022-03-16"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.parser.Parser;","lastModifiedDate":"2022-03-16"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-16"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":"class ActivityDeleteCommandTest {","lastModifiedDate":"2022-03-16"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":"    Manager manager \u003d new Manager();","lastModifiedDate":"2022-03-16"},{"lineNumber":14,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":15,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":16,"author":{"gitId":"ivanaitzliddat"},"content":"     * Creates a session that is stored and managed by the Manager object.","lastModifiedDate":"2022-03-16"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":"     * Creates two activities in the new session that was created.","lastModifiedDate":"2022-03-22"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":"    @BeforeEach","lastModifiedDate":"2022-03-16"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"    void setUp() {","lastModifiedDate":"2022-03-16"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"        String sessionArgs \u003d \"session /create /n Class outing /d 15-02-2022 /pl Alice Bob Charlie\";","lastModifiedDate":"2022-03-16"},{"lineNumber":22,"author":{"gitId":"ivanaitzliddat"},"content":"        Command createSession \u003d Parser.getCommand(sessionArgs);","lastModifiedDate":"2022-03-16"},{"lineNumber":23,"author":{"gitId":"ivanaitzliddat"},"content":"        createSession.run(manager);","lastModifiedDate":"2022-03-16"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"        String activityOneArgs \u003d \"activity /create /sid 1 /n Lunch /p Alice /i Alice Bob Charlie /co 15\";","lastModifiedDate":"2022-03-16"},{"lineNumber":25,"author":{"gitId":"ivanaitzliddat"},"content":"        Command createActivityOne \u003d Parser.getCommand(activityOneArgs);","lastModifiedDate":"2022-03-16"},{"lineNumber":26,"author":{"gitId":"ivanaitzliddat"},"content":"        createActivityOne.run(manager);","lastModifiedDate":"2022-03-16"},{"lineNumber":27,"author":{"gitId":"ivanaitzliddat"},"content":"        String activityTwoArgs \u003d \"activity /create /sid 1 /n Lunch /p Alice /i Bob Charlie /cl 5 5\";","lastModifiedDate":"2022-03-16"},{"lineNumber":28,"author":{"gitId":"ivanaitzliddat"},"content":"        Command createActivityTwo \u003d Parser.getCommand(activityTwoArgs);","lastModifiedDate":"2022-03-16"},{"lineNumber":29,"author":{"gitId":"ivanaitzliddat"},"content":"        createActivityTwo.run(manager);","lastModifiedDate":"2022-03-16"},{"lineNumber":30,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"ivanaitzliddat"},"content":"     * Checks if an InvalidCommand object is returned when there are delimiters not provided by the user.","lastModifiedDate":"2022-03-22"},{"lineNumber":34,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":35,"author":{"gitId":"ivanaitzliddat"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"ivanaitzliddat"},"content":"    public void prepare_hasMissingDelimiter_InvalidCommand() {","lastModifiedDate":"2022-03-16"},{"lineNumber":37,"author":{"gitId":"ivanaitzliddat"},"content":"        // Case 1: Missing both /sid and /aid delimiters","lastModifiedDate":"2022-03-16"},{"lineNumber":38,"author":{"gitId":"ivanaitzliddat"},"content":"        String argsMissingBothDelimiters \u003d \"activity /delete\";","lastModifiedDate":"2022-03-16"},{"lineNumber":39,"author":{"gitId":"ivanaitzliddat"},"content":"        Command activityWithMissingBothDelimiters \u003d Parser.getCommand(argsMissingBothDelimiters);","lastModifiedDate":"2022-03-16"},{"lineNumber":40,"author":{"gitId":"ivanaitzliddat"},"content":"        assertEquals(InvalidCommand.class, activityWithMissingBothDelimiters.getClass());","lastModifiedDate":"2022-03-16"},{"lineNumber":41,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":42,"author":{"gitId":"ivanaitzliddat"},"content":"        // Case 2: Missing /sid delimiter only","lastModifiedDate":"2022-03-16"},{"lineNumber":43,"author":{"gitId":"ivanaitzliddat"},"content":"        String argsMissingSidDelimiter \u003d \"activity /delete /aid 1\";","lastModifiedDate":"2022-03-16"},{"lineNumber":44,"author":{"gitId":"ivanaitzliddat"},"content":"        Command activityWithMissingSidDelimiter \u003d Parser.getCommand(argsMissingSidDelimiter);","lastModifiedDate":"2022-03-16"},{"lineNumber":45,"author":{"gitId":"ivanaitzliddat"},"content":"        assertEquals(InvalidCommand.class, activityWithMissingSidDelimiter.getClass());","lastModifiedDate":"2022-03-16"},{"lineNumber":46,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":47,"author":{"gitId":"ivanaitzliddat"},"content":"        // Case 3: Missing /aid delimiter only","lastModifiedDate":"2022-03-16"},{"lineNumber":48,"author":{"gitId":"ivanaitzliddat"},"content":"        String argsMissingAidDelimiter \u003d \"activity /delete /sid 1\";","lastModifiedDate":"2022-03-16"},{"lineNumber":49,"author":{"gitId":"ivanaitzliddat"},"content":"        Command activityWithMissingAidDelimiter \u003d Parser.getCommand(argsMissingAidDelimiter);","lastModifiedDate":"2022-03-16"},{"lineNumber":50,"author":{"gitId":"ivanaitzliddat"},"content":"        assertEquals(InvalidCommand.class, activityWithMissingAidDelimiter.getClass());","lastModifiedDate":"2022-03-16"},{"lineNumber":51,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":52,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":53,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-19"},{"lineNumber":54,"author":{"gitId":"ivanaitzliddat"},"content":"     * Checks if an InvalidCommand object is returned when there are arguments not provided by the user.","lastModifiedDate":"2022-03-22"},{"lineNumber":55,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-19"},{"lineNumber":56,"author":{"gitId":"ivanaitzliddat"},"content":"    @Test","lastModifiedDate":"2022-03-19"},{"lineNumber":57,"author":{"gitId":"ivanaitzliddat"},"content":"    public void prepare_hasMissingArgument_InvalidCommand() {","lastModifiedDate":"2022-03-19"},{"lineNumber":58,"author":{"gitId":"ivanaitzliddat"},"content":"        // Case 1: Missing both Session Id and Activity Id arguments","lastModifiedDate":"2022-03-19"},{"lineNumber":59,"author":{"gitId":"ivanaitzliddat"},"content":"        String argsMissingBothArguments \u003d \"activity /delete /sid /aid\";","lastModifiedDate":"2022-03-19"},{"lineNumber":60,"author":{"gitId":"ivanaitzliddat"},"content":"        Command activityWithMissingBothArguments \u003d Parser.getCommand(argsMissingBothArguments);","lastModifiedDate":"2022-03-19"},{"lineNumber":61,"author":{"gitId":"ivanaitzliddat"},"content":"        assertEquals(InvalidCommand.class, activityWithMissingBothArguments.getClass());","lastModifiedDate":"2022-03-19"},{"lineNumber":62,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":63,"author":{"gitId":"ivanaitzliddat"},"content":"        // Case 2: Missing Session Id argument only","lastModifiedDate":"2022-03-19"},{"lineNumber":64,"author":{"gitId":"ivanaitzliddat"},"content":"        String argsMissingSessionIdArgument \u003d \"activity /delete /sid /aid 1\";","lastModifiedDate":"2022-03-19"},{"lineNumber":65,"author":{"gitId":"ivanaitzliddat"},"content":"        Command activityWithMissingSessionIdArgument \u003d Parser.getCommand(argsMissingSessionIdArgument);","lastModifiedDate":"2022-03-19"},{"lineNumber":66,"author":{"gitId":"ivanaitzliddat"},"content":"        assertEquals(InvalidCommand.class, activityWithMissingSessionIdArgument.getClass());","lastModifiedDate":"2022-03-19"},{"lineNumber":67,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":68,"author":{"gitId":"ivanaitzliddat"},"content":"        // Case 3: Missing Activity Id argument only","lastModifiedDate":"2022-03-19"},{"lineNumber":69,"author":{"gitId":"ivanaitzliddat"},"content":"        String argsMissingActivityIdArgument \u003d \"activity /delete /sid 1 /aid\";","lastModifiedDate":"2022-03-19"},{"lineNumber":70,"author":{"gitId":"ivanaitzliddat"},"content":"        Command activityWithMissingActivityIdArgument \u003d Parser.getCommand(argsMissingActivityIdArgument);","lastModifiedDate":"2022-03-19"},{"lineNumber":71,"author":{"gitId":"ivanaitzliddat"},"content":"        assertEquals(InvalidCommand.class, activityWithMissingActivityIdArgument.getClass());","lastModifiedDate":"2022-03-19"},{"lineNumber":72,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":73,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":74,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":75,"author":{"gitId":"ivanaitzliddat"},"content":"     * Checks if an activity is not deleted with an invalid session unique identifier.","lastModifiedDate":"2022-03-19"},{"lineNumber":76,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-03-16"},{"lineNumber":77,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws InvalidDataException If there are no sessions stored or","lastModifiedDate":"2022-03-16"},{"lineNumber":78,"author":{"gitId":"ivanaitzliddat"},"content":"     *                              if the session unique identifier specified was not found.","lastModifiedDate":"2022-03-16"},{"lineNumber":79,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":80,"author":{"gitId":"ivanaitzliddat"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":81,"author":{"gitId":"ivanaitzliddat"},"content":"    public void run_sessionDoesNotExists_activityListSizeRemainsTwo() throws InvalidDataException {","lastModifiedDate":"2022-03-16"},{"lineNumber":82,"author":{"gitId":"ivanaitzliddat"},"content":"        String userInput \u003d \"activity /delete /sid 3 /aid 1\";","lastModifiedDate":"2022-03-16"},{"lineNumber":83,"author":{"gitId":"ivanaitzliddat"},"content":"        Command command \u003d Parser.getCommand(userInput);","lastModifiedDate":"2022-03-16"},{"lineNumber":84,"author":{"gitId":"ivanaitzliddat"},"content":"        command.run(manager);","lastModifiedDate":"2022-03-16"},{"lineNumber":85,"author":{"gitId":"ivanaitzliddat"},"content":"        assertEquals(2, manager.getProfile().getSession(1).getActivityList().size());","lastModifiedDate":"2022-03-16"},{"lineNumber":86,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":87,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":88,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":89,"author":{"gitId":"ivanaitzliddat"},"content":"     * Checks if an activity is not deleted with an invalid activity unique identifier.","lastModifiedDate":"2022-03-19"},{"lineNumber":90,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-03-16"},{"lineNumber":91,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws InvalidDataException If there are no sessions stored or","lastModifiedDate":"2022-03-16"},{"lineNumber":92,"author":{"gitId":"ivanaitzliddat"},"content":"     *                              if the session unique identifier specified was not found.","lastModifiedDate":"2022-03-16"},{"lineNumber":93,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":94,"author":{"gitId":"ivanaitzliddat"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":95,"author":{"gitId":"ivanaitzliddat"},"content":"    public void run_activityDoesNotExists_activityListSizeRemainsTwo() throws InvalidDataException {","lastModifiedDate":"2022-03-16"},{"lineNumber":96,"author":{"gitId":"ivanaitzliddat"},"content":"        String userInput \u003d \"activity /delete /sid 1 /aid 3\";","lastModifiedDate":"2022-03-16"},{"lineNumber":97,"author":{"gitId":"ivanaitzliddat"},"content":"        Command command \u003d Parser.getCommand(userInput);","lastModifiedDate":"2022-03-16"},{"lineNumber":98,"author":{"gitId":"ivanaitzliddat"},"content":"        command.run(manager);","lastModifiedDate":"2022-03-16"},{"lineNumber":99,"author":{"gitId":"ivanaitzliddat"},"content":"        assertEquals(2, manager.getProfile().getSession(1).getActivityList().size());","lastModifiedDate":"2022-03-16"},{"lineNumber":100,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":101,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":102,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-19"},{"lineNumber":103,"author":{"gitId":"ivanaitzliddat"},"content":"     * Checks if an activity is deleted with a valid command.","lastModifiedDate":"2022-03-19"},{"lineNumber":104,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-03-19"},{"lineNumber":105,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws InvalidDataException If there are no sessions stored or","lastModifiedDate":"2022-03-19"},{"lineNumber":106,"author":{"gitId":"ivanaitzliddat"},"content":"     *                              if the session unique identifier specified was not found.","lastModifiedDate":"2022-03-19"},{"lineNumber":107,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-19"},{"lineNumber":108,"author":{"gitId":"ivanaitzliddat"},"content":"    @Test","lastModifiedDate":"2022-03-19"},{"lineNumber":109,"author":{"gitId":"ivanaitzliddat"},"content":"    public void run_validCommand_activityListsSizeBecomesOne() throws InvalidDataException {","lastModifiedDate":"2022-03-19"},{"lineNumber":110,"author":{"gitId":"ivanaitzliddat"},"content":"        String userInput \u003d \"activity /delete /sid 1 /aid 1\";","lastModifiedDate":"2022-03-19"},{"lineNumber":111,"author":{"gitId":"ivanaitzliddat"},"content":"        Command command \u003d Parser.getCommand(userInput);","lastModifiedDate":"2022-03-19"},{"lineNumber":112,"author":{"gitId":"ivanaitzliddat"},"content":"        command.run(manager);","lastModifiedDate":"2022-03-19"},{"lineNumber":113,"author":{"gitId":"ivanaitzliddat"},"content":"        assertEquals(1, manager.getProfile().getSession(1).getActivityList().size());","lastModifiedDate":"2022-03-19"},{"lineNumber":114,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-19"},{"lineNumber":115,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-19"},{"lineNumber":116,"author":{"gitId":"ivanaitzliddat"},"content":"}","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"ivanaitzliddat":115,"froststein":1}},{"path":"src/test/java/seedu/splitlah/command/ActivityListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lelerer"},"content":"package seedu.splitlah.command;","lastModifiedDate":"2022-03-16"},{"lineNumber":2,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"lelerer"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2022-03-17"},{"lineNumber":4,"author":{"gitId":"lelerer"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-17"},{"lineNumber":5,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.data.Manager;","lastModifiedDate":"2022-03-17"},{"lineNumber":6,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.parser.Parser;","lastModifiedDate":"2022-03-17"},{"lineNumber":7,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":8,"author":{"gitId":"lelerer"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-17"},{"lineNumber":9,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":10,"author":{"gitId":"lelerer"},"content":"public class ActivityListCommandTest {","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":12,"author":{"gitId":"lelerer"},"content":"    Manager manager \u003d new Manager();","lastModifiedDate":"2022-03-17"},{"lineNumber":13,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":14,"author":{"gitId":"lelerer"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":15,"author":{"gitId":"lelerer"},"content":"     * Creates a session managed by the Manager object.","lastModifiedDate":"2022-03-17"},{"lineNumber":16,"author":{"gitId":"lelerer"},"content":"     * Creates two activities in the new session.","lastModifiedDate":"2022-03-17"},{"lineNumber":17,"author":{"gitId":"lelerer"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":18,"author":{"gitId":"lelerer"},"content":"    @BeforeEach","lastModifiedDate":"2022-03-17"},{"lineNumber":19,"author":{"gitId":"lelerer"},"content":"    void setUp() {","lastModifiedDate":"2022-03-17"},{"lineNumber":20,"author":{"gitId":"lelerer"},"content":"        String sessionArgs \u003d \"session /create /n Class outing /d 15-02-2022 /pl Alice Bob Charlie\";","lastModifiedDate":"2022-03-17"},{"lineNumber":21,"author":{"gitId":"lelerer"},"content":"        Command createSession \u003d Parser.getCommand(sessionArgs);","lastModifiedDate":"2022-03-17"},{"lineNumber":22,"author":{"gitId":"lelerer"},"content":"        createSession.run(manager);","lastModifiedDate":"2022-03-17"},{"lineNumber":23,"author":{"gitId":"lelerer"},"content":"        String activityOneArgs \u003d \"activity /create /sid 1 /n Lunch /p Alice /i Alice Bob Charlie /co 15\";","lastModifiedDate":"2022-03-17"},{"lineNumber":24,"author":{"gitId":"lelerer"},"content":"        Command createActivityOne \u003d Parser.getCommand(activityOneArgs);","lastModifiedDate":"2022-03-17"},{"lineNumber":25,"author":{"gitId":"lelerer"},"content":"        createActivityOne.run(manager);","lastModifiedDate":"2022-03-17"},{"lineNumber":26,"author":{"gitId":"lelerer"},"content":"        String activityTwoArgs \u003d \"activity /create /sid 1 /n Lunch /p Alice /i Bob Charlie /cl 5 5\";","lastModifiedDate":"2022-03-17"},{"lineNumber":27,"author":{"gitId":"lelerer"},"content":"        Command createActivityTwo \u003d Parser.getCommand(activityTwoArgs);","lastModifiedDate":"2022-03-17"},{"lineNumber":28,"author":{"gitId":"lelerer"},"content":"        createActivityTwo.run(manager);","lastModifiedDate":"2022-03-17"},{"lineNumber":29,"author":{"gitId":"lelerer"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":30,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":31,"author":{"gitId":"lelerer"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":32,"author":{"gitId":"lelerer"},"content":"     * Checks if activities are listed with missing session unique identifier.","lastModifiedDate":"2022-03-17"},{"lineNumber":33,"author":{"gitId":"lelerer"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":34,"author":{"gitId":"lelerer"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":35,"author":{"gitId":"lelerer"},"content":"    public void prepare_hasMissingDelimiters_InvalidCommand() {","lastModifiedDate":"2022-03-17"},{"lineNumber":36,"author":{"gitId":"lelerer"},"content":"        // Missing delimiters","lastModifiedDate":"2022-03-17"},{"lineNumber":37,"author":{"gitId":"lelerer"},"content":"        String inputMissingSidDelimiter \u003d \"activity /list /1\";","lastModifiedDate":"2022-03-17"},{"lineNumber":38,"author":{"gitId":"lelerer"},"content":"        Command activityWithMissingSidDelimiter \u003d Parser.getCommand(inputMissingSidDelimiter);","lastModifiedDate":"2022-03-17"},{"lineNumber":39,"author":{"gitId":"lelerer"},"content":"        assertEquals(InvalidCommand.class, activityWithMissingSidDelimiter.getClass());","lastModifiedDate":"2022-03-17"},{"lineNumber":40,"author":{"gitId":"lelerer"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":41,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":42,"author":{"gitId":"lelerer"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":43,"author":{"gitId":"lelerer"},"content":"     * Checks if activities are listed with missing arguments after the delimiter.","lastModifiedDate":"2022-03-17"},{"lineNumber":44,"author":{"gitId":"lelerer"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":45,"author":{"gitId":"lelerer"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":46,"author":{"gitId":"lelerer"},"content":"    public void prepare_hasMissingArguments_InvalidCommand() {","lastModifiedDate":"2022-03-17"},{"lineNumber":47,"author":{"gitId":"lelerer"},"content":"        // Missing arguments after delimiter.","lastModifiedDate":"2022-03-17"},{"lineNumber":48,"author":{"gitId":"lelerer"},"content":"        String inputMissingArgument \u003d \"activity /list /sid\";","lastModifiedDate":"2022-03-17"},{"lineNumber":49,"author":{"gitId":"lelerer"},"content":"        Command activityWithMissingArgument \u003d Parser.getCommand(inputMissingArgument);","lastModifiedDate":"2022-03-17"},{"lineNumber":50,"author":{"gitId":"lelerer"},"content":"        assertEquals(InvalidCommand.class, activityWithMissingArgument.getClass());","lastModifiedDate":"2022-03-17"},{"lineNumber":51,"author":{"gitId":"lelerer"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":52,"author":{"gitId":"lelerer"},"content":"    ","lastModifiedDate":"2022-03-17"},{"lineNumber":53,"author":{"gitId":"lelerer"},"content":"}","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"lelerer":53}},{"path":"src/test/java/seedu/splitlah/command/ActivityViewCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lelerer"},"content":"package seedu.splitlah.command;","lastModifiedDate":"2022-03-16"},{"lineNumber":2,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":3,"author":{"gitId":"lelerer"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2022-03-17"},{"lineNumber":4,"author":{"gitId":"lelerer"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-17"},{"lineNumber":5,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.data.Manager;","lastModifiedDate":"2022-03-17"},{"lineNumber":6,"author":{"gitId":"lelerer"},"content":"import seedu.splitlah.parser.Parser;","lastModifiedDate":"2022-03-17"},{"lineNumber":7,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":8,"author":{"gitId":"lelerer"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-17"},{"lineNumber":9,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":10,"author":{"gitId":"lelerer"},"content":"public class ActivityViewCommandTest {","lastModifiedDate":"2022-03-16"},{"lineNumber":11,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":12,"author":{"gitId":"lelerer"},"content":"    Manager manager \u003d new Manager();","lastModifiedDate":"2022-03-17"},{"lineNumber":13,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":14,"author":{"gitId":"lelerer"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":15,"author":{"gitId":"lelerer"},"content":"     * Creates a session managed by the Manager object.","lastModifiedDate":"2022-03-17"},{"lineNumber":16,"author":{"gitId":"lelerer"},"content":"     * Creates two activities in the new session.","lastModifiedDate":"2022-03-17"},{"lineNumber":17,"author":{"gitId":"lelerer"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":18,"author":{"gitId":"lelerer"},"content":"    @BeforeEach","lastModifiedDate":"2022-03-17"},{"lineNumber":19,"author":{"gitId":"lelerer"},"content":"    void setUp() {","lastModifiedDate":"2022-03-17"},{"lineNumber":20,"author":{"gitId":"lelerer"},"content":"        String sessionArgs \u003d \"session /create /n Class outing /d 15-02-2022 /pl Alice Bob Charlie\";","lastModifiedDate":"2022-03-17"},{"lineNumber":21,"author":{"gitId":"lelerer"},"content":"        Command createSession \u003d Parser.getCommand(sessionArgs);","lastModifiedDate":"2022-03-17"},{"lineNumber":22,"author":{"gitId":"lelerer"},"content":"        createSession.run(manager);","lastModifiedDate":"2022-03-17"},{"lineNumber":23,"author":{"gitId":"lelerer"},"content":"        String activityOneArgs \u003d \"activity /create /sid 1 /n Lunch /p Alice /i Alice Bob Charlie /co 15\";","lastModifiedDate":"2022-03-17"},{"lineNumber":24,"author":{"gitId":"lelerer"},"content":"        Command createActivityOne \u003d Parser.getCommand(activityOneArgs);","lastModifiedDate":"2022-03-17"},{"lineNumber":25,"author":{"gitId":"lelerer"},"content":"        createActivityOne.run(manager);","lastModifiedDate":"2022-03-17"},{"lineNumber":26,"author":{"gitId":"lelerer"},"content":"        String activityTwoArgs \u003d \"activity /create /sid 1 /n Lunch /p Alice /i Bob Charlie /cl 5 5\";","lastModifiedDate":"2022-03-17"},{"lineNumber":27,"author":{"gitId":"lelerer"},"content":"        Command createActivityTwo \u003d Parser.getCommand(activityTwoArgs);","lastModifiedDate":"2022-03-17"},{"lineNumber":28,"author":{"gitId":"lelerer"},"content":"        createActivityTwo.run(manager);","lastModifiedDate":"2022-03-17"},{"lineNumber":29,"author":{"gitId":"lelerer"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":30,"author":{"gitId":"lelerer"},"content":"    ","lastModifiedDate":"2022-03-17"},{"lineNumber":31,"author":{"gitId":"lelerer"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":32,"author":{"gitId":"lelerer"},"content":"     * Checks if activities are listed with missing delimiters.","lastModifiedDate":"2022-03-17"},{"lineNumber":33,"author":{"gitId":"lelerer"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":34,"author":{"gitId":"lelerer"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":35,"author":{"gitId":"lelerer"},"content":"    public void prepare_hasMissingDelimiter_InvalidCommand() {","lastModifiedDate":"2022-03-17"},{"lineNumber":36,"author":{"gitId":"lelerer"},"content":"        // Missing sid and aid","lastModifiedDate":"2022-03-17"},{"lineNumber":37,"author":{"gitId":"lelerer"},"content":"        String argsMissingSidAidDelimiter \u003d \"activity /view\";","lastModifiedDate":"2022-03-17"},{"lineNumber":38,"author":{"gitId":"lelerer"},"content":"        Command activityWithMissingSidAidDelimiter \u003d Parser.getCommand(argsMissingSidAidDelimiter);","lastModifiedDate":"2022-03-17"},{"lineNumber":39,"author":{"gitId":"lelerer"},"content":"        assertEquals(InvalidCommand.class, activityWithMissingSidAidDelimiter.getClass());","lastModifiedDate":"2022-03-17"},{"lineNumber":40,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":41,"author":{"gitId":"lelerer"},"content":"        // Missing aid","lastModifiedDate":"2022-03-17"},{"lineNumber":42,"author":{"gitId":"lelerer"},"content":"        String argsMissingAidDelimiter \u003d \"activity /view /sid 1\";","lastModifiedDate":"2022-03-17"},{"lineNumber":43,"author":{"gitId":"lelerer"},"content":"        Command activityWithMissingAidDelimiter \u003d Parser.getCommand(argsMissingAidDelimiter);","lastModifiedDate":"2022-03-17"},{"lineNumber":44,"author":{"gitId":"lelerer"},"content":"        assertEquals(InvalidCommand.class, activityWithMissingAidDelimiter.getClass());","lastModifiedDate":"2022-03-17"},{"lineNumber":45,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":46,"author":{"gitId":"lelerer"},"content":"        // Missing sid","lastModifiedDate":"2022-03-17"},{"lineNumber":47,"author":{"gitId":"lelerer"},"content":"        String argsMissingSidDelimiter \u003d \"activity /view /aid 1\";","lastModifiedDate":"2022-03-17"},{"lineNumber":48,"author":{"gitId":"lelerer"},"content":"        Command activityWithMissingSidDelimiter \u003d Parser.getCommand(argsMissingSidDelimiter);","lastModifiedDate":"2022-03-17"},{"lineNumber":49,"author":{"gitId":"lelerer"},"content":"        assertEquals(InvalidCommand.class, activityWithMissingSidDelimiter.getClass());","lastModifiedDate":"2022-03-17"},{"lineNumber":50,"author":{"gitId":"lelerer"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":51,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":52,"author":{"gitId":"lelerer"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":53,"author":{"gitId":"lelerer"},"content":"}","lastModifiedDate":"2022-03-16"}],"authorContributionMap":{"lelerer":53}},{"path":"src/test/java/seedu/splitlah/command/GroupViewCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ivanaitzliddat"},"content":"package seedu.splitlah.command;","lastModifiedDate":"2022-03-22"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2022-03-22"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-22"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.data.Manager;","lastModifiedDate":"2022-03-22"},{"lineNumber":6,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.parser.Parser;","lastModifiedDate":"2022-03-22"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-22"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"class GroupViewCommandTest {","lastModifiedDate":"2022-03-22"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":"    Manager manager \u003d new Manager();","lastModifiedDate":"2022-03-22"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":14,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":15,"author":{"gitId":"ivanaitzliddat"},"content":"     * Creates a group that is stored and managed by the Profile object.","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":"    @BeforeEach","lastModifiedDate":"2022-03-22"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"    void setUp() {","lastModifiedDate":"2022-03-22"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":"        String groupArgs \u003d \"group /create /n OP2 /pl Alice Bob Charlie\";","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"        Command createGroup \u003d Parser.getCommand(groupArgs);","lastModifiedDate":"2022-03-22"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"        createGroup.run(manager);","lastModifiedDate":"2022-03-22"},{"lineNumber":22,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":23,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":25,"author":{"gitId":"ivanaitzliddat"},"content":"     * Checks if an InvalidCommand object is returned when the Group Id delimiter is not provided by the user.","lastModifiedDate":"2022-03-22"},{"lineNumber":26,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":27,"author":{"gitId":"ivanaitzliddat"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":28,"author":{"gitId":"ivanaitzliddat"},"content":"    void prepare_MissingGidDelimiter_InvalidCommand() {","lastModifiedDate":"2022-03-22"},{"lineNumber":29,"author":{"gitId":"ivanaitzliddat"},"content":"        String argMissingGidDelimiter \u003d \"group /view 1\";","lastModifiedDate":"2022-03-22"},{"lineNumber":30,"author":{"gitId":"ivanaitzliddat"},"content":"        Command groupWithMissingGidDelimiter \u003d Parser.getCommand(argMissingGidDelimiter);","lastModifiedDate":"2022-03-22"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"        assertEquals(InvalidCommand.class, groupWithMissingGidDelimiter.getClass());","lastModifiedDate":"2022-03-22"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":33,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":34,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":35,"author":{"gitId":"ivanaitzliddat"},"content":"     * Checks if an InvalidCommand object is returned when the Group Id delimiter is provided but no arguments","lastModifiedDate":"2022-03-22"},{"lineNumber":36,"author":{"gitId":"ivanaitzliddat"},"content":"     * following the Group Id delimiter are provided by the user.","lastModifiedDate":"2022-03-22"},{"lineNumber":37,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":38,"author":{"gitId":"ivanaitzliddat"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":39,"author":{"gitId":"ivanaitzliddat"},"content":"    void prepare_MissingGidArgument_InvalidCommand() {","lastModifiedDate":"2022-03-22"},{"lineNumber":40,"author":{"gitId":"ivanaitzliddat"},"content":"        String argMissingGidArgument \u003d \"group /view /gid\";","lastModifiedDate":"2022-03-22"},{"lineNumber":41,"author":{"gitId":"ivanaitzliddat"},"content":"        Command groupWithMissingGidArgument \u003d Parser.getCommand(argMissingGidArgument);","lastModifiedDate":"2022-03-22"},{"lineNumber":42,"author":{"gitId":"ivanaitzliddat"},"content":"        assertEquals(InvalidCommand.class, groupWithMissingGidArgument.getClass());","lastModifiedDate":"2022-03-22"},{"lineNumber":43,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":44,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-22"},{"lineNumber":45,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-22"},{"lineNumber":46,"author":{"gitId":"ivanaitzliddat"},"content":"     * Checks if a GroupViewCommand object is returned when the Group Id delimiter and Group Id argument","lastModifiedDate":"2022-03-22"},{"lineNumber":47,"author":{"gitId":"ivanaitzliddat"},"content":"     * are provided by the user.","lastModifiedDate":"2022-03-22"},{"lineNumber":48,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-22"},{"lineNumber":49,"author":{"gitId":"ivanaitzliddat"},"content":"    @Test","lastModifiedDate":"2022-03-22"},{"lineNumber":50,"author":{"gitId":"ivanaitzliddat"},"content":"    void prepare_validCommand_GroupViewCommand() {","lastModifiedDate":"2022-03-22"},{"lineNumber":51,"author":{"gitId":"ivanaitzliddat"},"content":"        String groupArgs \u003d \"group /view /gid 1\";","lastModifiedDate":"2022-03-22"},{"lineNumber":52,"author":{"gitId":"ivanaitzliddat"},"content":"        Command viewGroup \u003d Parser.getCommand(groupArgs);","lastModifiedDate":"2022-03-22"},{"lineNumber":53,"author":{"gitId":"ivanaitzliddat"},"content":"        assertEquals(GroupViewCommand.class, viewGroup.getClass());","lastModifiedDate":"2022-03-22"},{"lineNumber":54,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-22"},{"lineNumber":55,"author":{"gitId":"ivanaitzliddat"},"content":"}","lastModifiedDate":"2022-03-22"}],"authorContributionMap":{"ivanaitzliddat":55}},{"path":"src/test/java/seedu/splitlah/command/SessionCreateCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah.command;","lastModifiedDate":"2022-03-10"},{"lineNumber":2,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2022-03-10"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-10"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.data.Manager;","lastModifiedDate":"2022-03-10"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.exceptions.InvalidDataException;","lastModifiedDate":"2022-03-21"},{"lineNumber":7,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.parser.Parser;","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":9,"author":{"gitId":"froststein"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-10"},{"lineNumber":10,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":11,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":12,"author":{"gitId":"froststein"},"content":"class SessionCreateCommandTest {","lastModifiedDate":"2022-03-10"},{"lineNumber":13,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":"    Manager manager \u003d new Manager();","lastModifiedDate":"2022-03-10"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":"     * Creates two sessions and a group that is stored and managed by the Manager object.","lastModifiedDate":"2022-03-23"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":19,"author":{"gitId":"froststein"},"content":"    @BeforeEach","lastModifiedDate":"2022-03-10"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"    void setUp() {","lastModifiedDate":"2022-03-10"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"        String sessionOneArgs \u003d \"session /create /n Class outing /d 15-02-2022 /pl Alice Bob\";","lastModifiedDate":"2022-03-12"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"        String sessionTwoArgs \u003d \"session /create /n Family gathering /d 20-02-2022  /pl Eves Mallory\";","lastModifiedDate":"2022-03-12"},{"lineNumber":23,"author":{"gitId":"froststein"},"content":"        Command createSessionOne \u003d Parser.getCommand(sessionOneArgs);","lastModifiedDate":"2022-03-14"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"        createSessionOne.run(manager);","lastModifiedDate":"2022-03-10"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"        Command createSessionTwo \u003d Parser.getCommand(sessionTwoArgs);","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"froststein"},"content":"        createSessionTwo.run(manager);","lastModifiedDate":"2022-03-10"},{"lineNumber":27,"author":{"gitId":"froststein"},"content":"        String groupArgs \u003d \"group /create /n Class1 /pl Alice Bob\";","lastModifiedDate":"2022-03-21"},{"lineNumber":28,"author":{"gitId":"froststein"},"content":"        Command createGroup \u003d Parser.getCommand(groupArgs);","lastModifiedDate":"2022-03-21"},{"lineNumber":29,"author":{"gitId":"froststein"},"content":"        createGroup.run(manager);","lastModifiedDate":"2022-03-21"},{"lineNumber":30,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":31,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":32,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":33,"author":{"gitId":"froststein"},"content":"     * Checks if session is created successfully with Person List delimiter","lastModifiedDate":"2022-03-21"},{"lineNumber":34,"author":{"gitId":"froststein"},"content":"     * and added into list of sessions.","lastModifiedDate":"2022-03-21"},{"lineNumber":35,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":36,"author":{"gitId":"froststein"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":37,"author":{"gitId":"froststein"},"content":"    public void run_validCommandWithPersonListDelimiter_sessionListSizeBecomesThree() {","lastModifiedDate":"2022-03-21"},{"lineNumber":38,"author":{"gitId":"froststein"},"content":"        String userInput \u003d \"session /create /n Class gathering /d 15-02-2022 /pl Alice Bob\";","lastModifiedDate":"2022-03-16"},{"lineNumber":39,"author":{"gitId":"froststein"},"content":"        Command command \u003d Parser.getCommand(userInput);","lastModifiedDate":"2022-03-16"},{"lineNumber":40,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":41,"author":{"gitId":"froststein"},"content":"        // Check if a SessionCreateCommand instance was returned.","lastModifiedDate":"2022-03-16"},{"lineNumber":42,"author":{"gitId":"froststein"},"content":"        assertEquals(SessionCreateCommand.class, command.getClass());","lastModifiedDate":"2022-03-16"},{"lineNumber":43,"author":{"gitId":"froststein"},"content":"        command.run(manager);","lastModifiedDate":"2022-03-16"},{"lineNumber":44,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":45,"author":{"gitId":"froststein"},"content":"        // Check if session was successfully added into the list of sessions.","lastModifiedDate":"2022-03-16"},{"lineNumber":46,"author":{"gitId":"froststein"},"content":"        assertEquals(3, manager.getProfile().getSessionList().size());","lastModifiedDate":"2022-03-16"},{"lineNumber":47,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":48,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":49,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-18"},{"lineNumber":50,"author":{"gitId":"froststein"},"content":"     * Checks if session is created successfully with Person List delimiter","lastModifiedDate":"2022-03-21"},{"lineNumber":51,"author":{"gitId":"froststein"},"content":"     * and session unique identifier tracker in Profile object is incremented.","lastModifiedDate":"2022-03-21"},{"lineNumber":52,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-18"},{"lineNumber":53,"author":{"gitId":"froststein"},"content":"    @Test","lastModifiedDate":"2022-03-18"},{"lineNumber":54,"author":{"gitId":"froststein"},"content":"    public void run_validCommandWithPersonListDelimiter_sessionIdIncremented() {","lastModifiedDate":"2022-03-21"},{"lineNumber":55,"author":{"gitId":"froststein"},"content":"        String userInput \u003d \"session /create /n Class gathering /d 15-02-2022 /pl Alice Bob\";","lastModifiedDate":"2022-03-18"},{"lineNumber":56,"author":{"gitId":"froststein"},"content":"        Command command \u003d Parser.getCommand(userInput);","lastModifiedDate":"2022-03-18"},{"lineNumber":57,"author":{"gitId":"froststein"},"content":"        int currentSessionId \u003d manager.getProfile().getSessionIdTracker();","lastModifiedDate":"2022-03-18"},{"lineNumber":58,"author":{"gitId":"froststein"},"content":"        command.run(manager);","lastModifiedDate":"2022-03-18"},{"lineNumber":59,"author":{"gitId":"froststein"},"content":"        int testSessionId \u003d manager.getProfile().getSessionIdTracker();","lastModifiedDate":"2022-03-18"},{"lineNumber":60,"author":{"gitId":"froststein"},"content":"        assertEquals(currentSessionId + 1, testSessionId);","lastModifiedDate":"2022-03-18"},{"lineNumber":61,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":62,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":63,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-21"},{"lineNumber":64,"author":{"gitId":"froststein"},"content":"     * Checks if session is created successfully with Group unique identifier delimiter","lastModifiedDate":"2022-03-21"},{"lineNumber":65,"author":{"gitId":"froststein"},"content":"     * and added into list of sessions.","lastModifiedDate":"2022-03-21"},{"lineNumber":66,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-21"},{"lineNumber":67,"author":{"gitId":"froststein"},"content":"    @Test","lastModifiedDate":"2022-03-21"},{"lineNumber":68,"author":{"gitId":"froststein"},"content":"    public void run_validCommandWithGidDelimiter_sessionListSizeBecomesThree() {","lastModifiedDate":"2022-03-21"},{"lineNumber":69,"author":{"gitId":"froststein"},"content":"        String userInput \u003d \"session /create /n Class gathering /d 15-02-2022 /gid 1\";","lastModifiedDate":"2022-03-21"},{"lineNumber":70,"author":{"gitId":"froststein"},"content":"        Command command \u003d Parser.getCommand(userInput);","lastModifiedDate":"2022-03-21"},{"lineNumber":71,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":72,"author":{"gitId":"froststein"},"content":"        // Check if a SessionCreateCommand instance was returned.","lastModifiedDate":"2022-03-21"},{"lineNumber":73,"author":{"gitId":"froststein"},"content":"        assertEquals(SessionCreateCommand.class, command.getClass());","lastModifiedDate":"2022-03-21"},{"lineNumber":74,"author":{"gitId":"froststein"},"content":"        command.run(manager);","lastModifiedDate":"2022-03-21"},{"lineNumber":75,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":76,"author":{"gitId":"froststein"},"content":"        // Check if session was successfully added into the list of sessions.","lastModifiedDate":"2022-03-21"},{"lineNumber":77,"author":{"gitId":"froststein"},"content":"        assertEquals(3, manager.getProfile().getSessionList().size());","lastModifiedDate":"2022-03-21"},{"lineNumber":78,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-21"},{"lineNumber":79,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":80,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-21"},{"lineNumber":81,"author":{"gitId":"froststein"},"content":"     * Checks if session is created successfully with Group unique identifier delimiter","lastModifiedDate":"2022-03-21"},{"lineNumber":82,"author":{"gitId":"froststein"},"content":"     * and session unique identifier tracker in Profile object is incremented.","lastModifiedDate":"2022-03-21"},{"lineNumber":83,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-21"},{"lineNumber":84,"author":{"gitId":"froststein"},"content":"    @Test","lastModifiedDate":"2022-03-21"},{"lineNumber":85,"author":{"gitId":"froststein"},"content":"    public void run_validCommandWithGidDelimiter_sessionIdIncremented() {","lastModifiedDate":"2022-03-21"},{"lineNumber":86,"author":{"gitId":"froststein"},"content":"        String userInput \u003d \"session /create /n Class gathering /d 15-02-2022 /gid 1\";","lastModifiedDate":"2022-03-21"},{"lineNumber":87,"author":{"gitId":"froststein"},"content":"        Command command \u003d Parser.getCommand(userInput);","lastModifiedDate":"2022-03-21"},{"lineNumber":88,"author":{"gitId":"froststein"},"content":"        int currentSessionId \u003d manager.getProfile().getSessionIdTracker();","lastModifiedDate":"2022-03-21"},{"lineNumber":89,"author":{"gitId":"froststein"},"content":"        command.run(manager);","lastModifiedDate":"2022-03-21"},{"lineNumber":90,"author":{"gitId":"froststein"},"content":"        int testSessionId \u003d manager.getProfile().getSessionIdTracker();","lastModifiedDate":"2022-03-21"},{"lineNumber":91,"author":{"gitId":"froststein"},"content":"        assertEquals(currentSessionId + 1, testSessionId);","lastModifiedDate":"2022-03-21"},{"lineNumber":92,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-21"},{"lineNumber":93,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":94,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":95,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-21"},{"lineNumber":96,"author":{"gitId":"froststein"},"content":"     * Checks if session is created with Person List and Group unique identifier delimiter","lastModifiedDate":"2022-03-21"},{"lineNumber":97,"author":{"gitId":"froststein"},"content":"     * and list of persons stored in created session has size of 3.","lastModifiedDate":"2022-03-21"},{"lineNumber":98,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-21"},{"lineNumber":99,"author":{"gitId":"froststein"},"content":"    @Test","lastModifiedDate":"2022-03-21"},{"lineNumber":100,"author":{"gitId":"froststein"},"content":"    public void run_validCommandWithPersonListAndGidDelimiter_personListIsThree() throws InvalidDataException {","lastModifiedDate":"2022-03-21"},{"lineNumber":101,"author":{"gitId":"froststein"},"content":"        String userInput \u003d \"session /create /n Class gathering /d 15-02-2022 /pl Charlie /gid 1\";","lastModifiedDate":"2022-03-21"},{"lineNumber":102,"author":{"gitId":"froststein"},"content":"        Command command \u003d Parser.getCommand(userInput);","lastModifiedDate":"2022-03-21"},{"lineNumber":103,"author":{"gitId":"froststein"},"content":"        command.run(manager);","lastModifiedDate":"2022-03-21"},{"lineNumber":104,"author":{"gitId":"froststein"},"content":"        int sizeOfPersonList \u003d manager.getProfile().getSession(3).getPersonList().size();","lastModifiedDate":"2022-03-21"},{"lineNumber":105,"author":{"gitId":"froststein"},"content":"        assertEquals(3, sizeOfPersonList);","lastModifiedDate":"2022-03-21"},{"lineNumber":106,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-21"},{"lineNumber":107,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":108,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-21"},{"lineNumber":109,"author":{"gitId":"froststein"},"content":"     * Checks if session is created with Person List and Group unique identifier delimiter","lastModifiedDate":"2022-03-21"},{"lineNumber":110,"author":{"gitId":"froststein"},"content":"     * and list of persons stored in created session has size of 3 as name duplicates are removed.","lastModifiedDate":"2022-03-21"},{"lineNumber":111,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-21"},{"lineNumber":112,"author":{"gitId":"froststein"},"content":"    @Test","lastModifiedDate":"2022-03-21"},{"lineNumber":113,"author":{"gitId":"froststein"},"content":"    public void run_validCommandWithPersonListAndGidDelimiterHavingDuplicateNames_personListIsThree()","lastModifiedDate":"2022-03-21"},{"lineNumber":114,"author":{"gitId":"froststein"},"content":"            throws InvalidDataException {","lastModifiedDate":"2022-03-21"},{"lineNumber":115,"author":{"gitId":"froststein"},"content":"        String userInput \u003d \"session /create /n Class gathering /d 15-02-2022 /pl alice Charlie /gid 1\";","lastModifiedDate":"2022-03-21"},{"lineNumber":116,"author":{"gitId":"froststein"},"content":"        Command command \u003d Parser.getCommand(userInput);","lastModifiedDate":"2022-03-21"},{"lineNumber":117,"author":{"gitId":"froststein"},"content":"        command.run(manager);","lastModifiedDate":"2022-03-21"},{"lineNumber":118,"author":{"gitId":"froststein"},"content":"        int sizeOfPersonList \u003d manager.getProfile().getSession(3).getPersonList().size();","lastModifiedDate":"2022-03-21"},{"lineNumber":119,"author":{"gitId":"froststein"},"content":"        assertEquals(3, sizeOfPersonList);","lastModifiedDate":"2022-03-21"},{"lineNumber":120,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-21"},{"lineNumber":121,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":122,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":123,"author":{"gitId":"froststein"},"content":"     * Checks if session is created with duplicated person names.","lastModifiedDate":"2022-03-21"},{"lineNumber":124,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":125,"author":{"gitId":"froststein"},"content":"    @Test","lastModifiedDate":"2022-03-10"},{"lineNumber":126,"author":{"gitId":"froststein"},"content":"    public void run_hasOneNameDuplicate_sessionListSizeRemainsTwo() {","lastModifiedDate":"2022-03-10"},{"lineNumber":127,"author":{"gitId":"froststein"},"content":"        String userInput \u003d \"session /create /n Class gathering /d 23-02-2022 /pl Alice Alice Bob\";","lastModifiedDate":"2022-03-18"},{"lineNumber":128,"author":{"gitId":"froststein"},"content":"        Command command \u003d Parser.getCommand(userInput);","lastModifiedDate":"2022-03-14"},{"lineNumber":129,"author":{"gitId":"froststein"},"content":"        command.run(manager);","lastModifiedDate":"2022-03-10"},{"lineNumber":130,"author":{"gitId":"froststein"},"content":"        assertEquals(2, manager.getProfile().getSessionList().size());","lastModifiedDate":"2022-03-10"},{"lineNumber":131,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":132,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":133,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":134,"author":{"gitId":"froststein"},"content":"     * Checks if session unique identifier is incremented if a session fails","lastModifiedDate":"2022-03-16"},{"lineNumber":135,"author":{"gitId":"froststein"},"content":"     * to be created due to duplicate names in person list.","lastModifiedDate":"2022-03-16"},{"lineNumber":136,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":137,"author":{"gitId":"froststein"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":138,"author":{"gitId":"froststein"},"content":"    public void run_hasOneNameDuplicate_sessionIdNotIncremented() {","lastModifiedDate":"2022-03-16"},{"lineNumber":139,"author":{"gitId":"froststein"},"content":"        int currentSessionId \u003d manager.getProfile().getSessionIdTracker();","lastModifiedDate":"2022-03-16"},{"lineNumber":140,"author":{"gitId":"froststein"},"content":"        String userInput \u003d \"session /create /n Class gathering /d 23-02-2022 /pl Alice Alice Bob\";","lastModifiedDate":"2022-03-18"},{"lineNumber":141,"author":{"gitId":"froststein"},"content":"        Command command \u003d Parser.getCommand(userInput);","lastModifiedDate":"2022-03-16"},{"lineNumber":142,"author":{"gitId":"froststein"},"content":"        command.run(manager);","lastModifiedDate":"2022-03-16"},{"lineNumber":143,"author":{"gitId":"froststein"},"content":"        int testSessionId \u003d manager.getProfile().getSessionIdTracker();","lastModifiedDate":"2022-03-16"},{"lineNumber":144,"author":{"gitId":"froststein"},"content":"        assertEquals(currentSessionId, testSessionId);","lastModifiedDate":"2022-03-16"},{"lineNumber":145,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":146,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":147,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-12"},{"lineNumber":148,"author":{"gitId":"froststein"},"content":"     * Checks if session is created when a session with the same name exists.","lastModifiedDate":"2022-03-21"},{"lineNumber":149,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-12"},{"lineNumber":150,"author":{"gitId":"froststein"},"content":"    @Test","lastModifiedDate":"2022-03-12"},{"lineNumber":151,"author":{"gitId":"froststein"},"content":"    public void run_hasSessionDuplicate_sessionListSizeRemainsTwo() {","lastModifiedDate":"2022-03-12"},{"lineNumber":152,"author":{"gitId":"froststein"},"content":"        String userInput \u003d \"session /create /n Class outing /d 15-02-2022 /pl Alice Bob\";","lastModifiedDate":"2022-03-18"},{"lineNumber":153,"author":{"gitId":"froststein"},"content":"        Command command \u003d Parser.getCommand(userInput);","lastModifiedDate":"2022-03-14"},{"lineNumber":154,"author":{"gitId":"froststein"},"content":"        command.run(manager);","lastModifiedDate":"2022-03-12"},{"lineNumber":155,"author":{"gitId":"froststein"},"content":"        assertEquals(2, manager.getProfile().getSessionList().size());","lastModifiedDate":"2022-03-12"},{"lineNumber":156,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-12"},{"lineNumber":157,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":158,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":159,"author":{"gitId":"froststein"},"content":"     * Checks if session unique identifier is incremented when a session fails to be created","lastModifiedDate":"2022-03-16"},{"lineNumber":160,"author":{"gitId":"froststein"},"content":"     * because another session with the same name already exists.","lastModifiedDate":"2022-03-16"},{"lineNumber":161,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":162,"author":{"gitId":"froststein"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":163,"author":{"gitId":"froststein"},"content":"    public void run_hasSessionDuplicate_sessionIdNotIncremented() {","lastModifiedDate":"2022-03-16"},{"lineNumber":164,"author":{"gitId":"froststein"},"content":"        int currentSessionId \u003d manager.getProfile().getSessionIdTracker();","lastModifiedDate":"2022-03-16"},{"lineNumber":165,"author":{"gitId":"froststein"},"content":"        String userInput \u003d \"session /create /n Class outing /d 15-02-2022 /pl Alice Bob\";","lastModifiedDate":"2022-03-18"},{"lineNumber":166,"author":{"gitId":"froststein"},"content":"        Command command \u003d Parser.getCommand(userInput);","lastModifiedDate":"2022-03-16"},{"lineNumber":167,"author":{"gitId":"froststein"},"content":"        command.run(manager);","lastModifiedDate":"2022-03-16"},{"lineNumber":168,"author":{"gitId":"froststein"},"content":"        int testSessionId \u003d manager.getProfile().getSessionIdTracker();","lastModifiedDate":"2022-03-16"},{"lineNumber":169,"author":{"gitId":"froststein"},"content":"        assertEquals(currentSessionId, testSessionId);","lastModifiedDate":"2022-03-16"},{"lineNumber":170,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":171,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":172,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-21"},{"lineNumber":173,"author":{"gitId":"froststein"},"content":"     * Checks if session is created when the specified group unique identifier does not exist.","lastModifiedDate":"2022-03-21"},{"lineNumber":174,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-21"},{"lineNumber":175,"author":{"gitId":"froststein"},"content":"    @Test","lastModifiedDate":"2022-03-21"},{"lineNumber":176,"author":{"gitId":"froststein"},"content":"    public void run_groupDoesNotExists_sessionListSizeRemainsTwo() {","lastModifiedDate":"2022-03-21"},{"lineNumber":177,"author":{"gitId":"froststein"},"content":"        String userInput \u003d \"session /create /n Class outing /d 15-02-2022 /gid 2\";","lastModifiedDate":"2022-03-21"},{"lineNumber":178,"author":{"gitId":"froststein"},"content":"        Command command \u003d Parser.getCommand(userInput);","lastModifiedDate":"2022-03-21"},{"lineNumber":179,"author":{"gitId":"froststein"},"content":"        command.run(manager);","lastModifiedDate":"2022-03-21"},{"lineNumber":180,"author":{"gitId":"froststein"},"content":"        assertEquals(2, manager.getProfile().getSessionList().size());","lastModifiedDate":"2022-03-21"},{"lineNumber":181,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-21"},{"lineNumber":182,"author":{"gitId":"froststein"},"content":"}","lastModifiedDate":"2022-03-10"}],"authorContributionMap":{"warrencxw":2,"froststein":180}},{"path":"src/test/java/seedu/splitlah/command/SessionDeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah.command;","lastModifiedDate":"2022-03-14"},{"lineNumber":2,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2022-03-14"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-14"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.data.Manager;","lastModifiedDate":"2022-03-14"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.parser.Parser;","lastModifiedDate":"2022-03-14"},{"lineNumber":7,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":8,"author":{"gitId":"froststein"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-14"},{"lineNumber":9,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":10,"author":{"gitId":"froststein"},"content":"class SessionDeleteCommandTest {","lastModifiedDate":"2022-03-14"},{"lineNumber":11,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":12,"author":{"gitId":"froststein"},"content":"    Manager manager \u003d new Manager();","lastModifiedDate":"2022-03-14"},{"lineNumber":13,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":"     * Creates two sessions that is stored and managed by the Manager object.","lastModifiedDate":"2022-03-22"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":"    @BeforeEach","lastModifiedDate":"2022-03-14"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"    void setUp() {","lastModifiedDate":"2022-03-14"},{"lineNumber":19,"author":{"gitId":"froststein"},"content":"        String sessionOneArgs \u003d \"session /create /n Class outing /d 15-02-2022 /pl Alice Bob\";","lastModifiedDate":"2022-03-14"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"        String sessionTwoArgs \u003d \"session /create /n Family gathering /d 20-02-2022  /pl Eves Mallory\";","lastModifiedDate":"2022-03-14"},{"lineNumber":21,"author":{"gitId":"froststein"},"content":"        Command createSessionOne \u003d Parser.getCommand(sessionOneArgs);","lastModifiedDate":"2022-03-14"},{"lineNumber":22,"author":{"gitId":"froststein"},"content":"        createSessionOne.run(manager);","lastModifiedDate":"2022-03-14"},{"lineNumber":23,"author":{"gitId":"froststein"},"content":"        Command createSessionTwo \u003d Parser.getCommand(sessionTwoArgs);","lastModifiedDate":"2022-03-14"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"        createSessionTwo.run(manager);","lastModifiedDate":"2022-03-14"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":26,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":27,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":28,"author":{"gitId":"froststein"},"content":"     * Checks if session is not deleted with a missing delimiter.","lastModifiedDate":"2022-03-19"},{"lineNumber":29,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":30,"author":{"gitId":"froststein"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":31,"author":{"gitId":"froststein"},"content":"    public void prepare_hasMissingDelimiter_InvalidCommand() {","lastModifiedDate":"2022-03-14"},{"lineNumber":32,"author":{"gitId":"froststein"},"content":"        String argsMissingSidDelimiter \u003d \"session /delete sid 1\";","lastModifiedDate":"2022-03-18"},{"lineNumber":33,"author":{"gitId":"froststein"},"content":"        Command sessionWithMissingSidDelimiter \u003d Parser.getCommand(argsMissingSidDelimiter);","lastModifiedDate":"2022-03-14"},{"lineNumber":34,"author":{"gitId":"froststein"},"content":"        assertEquals(InvalidCommand.class, sessionWithMissingSidDelimiter.getClass());","lastModifiedDate":"2022-03-14"},{"lineNumber":35,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":36,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":37,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-18"},{"lineNumber":38,"author":{"gitId":"froststein"},"content":"     * Checks if session is not deleted with a missing argument.","lastModifiedDate":"2022-03-19"},{"lineNumber":39,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-18"},{"lineNumber":40,"author":{"gitId":"froststein"},"content":"    @Test","lastModifiedDate":"2022-03-18"},{"lineNumber":41,"author":{"gitId":"froststein"},"content":"    public void prepare_hasMissingArgument_InvalidCommand() {","lastModifiedDate":"2022-03-18"},{"lineNumber":42,"author":{"gitId":"froststein"},"content":"        String argsMissingSidDelimiter \u003d \"session /delete /sid\";","lastModifiedDate":"2022-03-18"},{"lineNumber":43,"author":{"gitId":"froststein"},"content":"        Command sessionWithMissingSidDelimiter \u003d Parser.getCommand(argsMissingSidDelimiter);","lastModifiedDate":"2022-03-18"},{"lineNumber":44,"author":{"gitId":"froststein"},"content":"        assertEquals(InvalidCommand.class, sessionWithMissingSidDelimiter.getClass());","lastModifiedDate":"2022-03-18"},{"lineNumber":45,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":46,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":47,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-18"},{"lineNumber":48,"author":{"gitId":"froststein"},"content":"     * Checks if session is deleted successfully and removed from list of sessions.","lastModifiedDate":"2022-03-18"},{"lineNumber":49,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-18"},{"lineNumber":50,"author":{"gitId":"froststein"},"content":"    @Test","lastModifiedDate":"2022-03-18"},{"lineNumber":51,"author":{"gitId":"froststein"},"content":"    public void run_validCommand_sessionListSizeBecomesOne() {","lastModifiedDate":"2022-03-18"},{"lineNumber":52,"author":{"gitId":"froststein"},"content":"        String userInput \u003d \"session /delete /sid 1\";","lastModifiedDate":"2022-03-18"},{"lineNumber":53,"author":{"gitId":"froststein"},"content":"        Command command \u003d Parser.getCommand(userInput);","lastModifiedDate":"2022-03-18"},{"lineNumber":54,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":55,"author":{"gitId":"froststein"},"content":"        // Check if a SessionDeleteCommand instance was returned.","lastModifiedDate":"2022-03-18"},{"lineNumber":56,"author":{"gitId":"froststein"},"content":"        assertEquals(SessionDeleteCommand.class, command.getClass());","lastModifiedDate":"2022-03-18"},{"lineNumber":57,"author":{"gitId":"froststein"},"content":"        command.run(manager);","lastModifiedDate":"2022-03-18"},{"lineNumber":58,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":59,"author":{"gitId":"froststein"},"content":"        // Check if session was successfully removed from the list of sessions.","lastModifiedDate":"2022-03-18"},{"lineNumber":60,"author":{"gitId":"froststein"},"content":"        assertEquals(1, manager.getProfile().getSessionList().size());","lastModifiedDate":"2022-03-18"},{"lineNumber":61,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":62,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":63,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":64,"author":{"gitId":"froststein"},"content":"     * Checks if session is deleted with an invalid session unique identifier.","lastModifiedDate":"2022-03-14"},{"lineNumber":65,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":66,"author":{"gitId":"froststein"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":67,"author":{"gitId":"froststein"},"content":"    public void run_sessionDoesNotExists_sessionListSizeRemainsTwo() {","lastModifiedDate":"2022-03-14"},{"lineNumber":68,"author":{"gitId":"froststein"},"content":"        String userInput \u003d \"session /delete /sid 3\";","lastModifiedDate":"2022-03-14"},{"lineNumber":69,"author":{"gitId":"froststein"},"content":"        Command command \u003d Parser.getCommand(userInput);","lastModifiedDate":"2022-03-14"},{"lineNumber":70,"author":{"gitId":"froststein"},"content":"        command.run(manager);","lastModifiedDate":"2022-03-14"},{"lineNumber":71,"author":{"gitId":"froststein"},"content":"        assertEquals(2, manager.getProfile().getSessionList().size());","lastModifiedDate":"2022-03-14"},{"lineNumber":72,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":73,"author":{"gitId":"froststein"},"content":"}","lastModifiedDate":"2022-03-14"}],"authorContributionMap":{"froststein":73}},{"path":"src/test/java/seedu/splitlah/data/ActivityCostTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"matheril"},"content":"package seedu.splitlah.data;","lastModifiedDate":"2022-03-12"},{"lineNumber":2,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":3,"author":{"gitId":"matheril"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2022-03-12"},{"lineNumber":4,"author":{"gitId":"matheril"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-12"},{"lineNumber":5,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":6,"author":{"gitId":"matheril"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-12"},{"lineNumber":7,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":8,"author":{"gitId":"matheril"},"content":"public class ActivityCostTest {","lastModifiedDate":"2022-03-12"},{"lineNumber":9,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":10,"author":{"gitId":"matheril"},"content":"    private ActivityCost activityCost;","lastModifiedDate":"2022-03-12"},{"lineNumber":11,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":12,"author":{"gitId":"matheril"},"content":"    @BeforeEach","lastModifiedDate":"2022-03-12"},{"lineNumber":13,"author":{"gitId":"matheril"},"content":"    public void setUp() {","lastModifiedDate":"2022-03-12"},{"lineNumber":14,"author":{"gitId":"matheril"},"content":"        activityCost \u003d new ActivityCost(1, 10, 100);","lastModifiedDate":"2022-03-12"},{"lineNumber":15,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-12"},{"lineNumber":16,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":17,"author":{"gitId":"matheril"},"content":"    // Getter and setter tests","lastModifiedDate":"2022-03-12"},{"lineNumber":18,"author":{"gitId":"matheril"},"content":"    @Test","lastModifiedDate":"2022-03-12"},{"lineNumber":19,"author":{"gitId":"matheril"},"content":"    public void getActivityId_activityIdIsOne_returnsOne() {","lastModifiedDate":"2022-03-12"},{"lineNumber":20,"author":{"gitId":"matheril"},"content":"        assertEquals(1, activityCost.getActivityId());","lastModifiedDate":"2022-03-12"},{"lineNumber":21,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-12"},{"lineNumber":22,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":23,"author":{"gitId":"matheril"},"content":"    @Test","lastModifiedDate":"2022-03-12"},{"lineNumber":24,"author":{"gitId":"matheril"},"content":"    public void getCostPaid_costPaidIsTen_returnsTen() {","lastModifiedDate":"2022-03-12"},{"lineNumber":25,"author":{"gitId":"matheril"},"content":"        assertEquals(10, activityCost.getCostPaid());","lastModifiedDate":"2022-03-12"},{"lineNumber":26,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-12"},{"lineNumber":27,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-12"},{"lineNumber":28,"author":{"gitId":"matheril"},"content":"    @Test","lastModifiedDate":"2022-03-12"},{"lineNumber":29,"author":{"gitId":"matheril"},"content":"    public void getCostOwed_costOwedIsHundred_returnsHundred() {","lastModifiedDate":"2022-03-12"},{"lineNumber":30,"author":{"gitId":"matheril"},"content":"        assertEquals(100, activityCost.getCostOwed());","lastModifiedDate":"2022-03-12"},{"lineNumber":31,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-12"},{"lineNumber":32,"author":{"gitId":"matheril"},"content":"}","lastModifiedDate":"2022-03-12"}],"authorContributionMap":{"matheril":32}},{"path":"src/test/java/seedu/splitlah/data/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"matheril"},"content":"package seedu.splitlah.data;","lastModifiedDate":"2022-03-15"},{"lineNumber":2,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":3,"author":{"gitId":"matheril"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-15"},{"lineNumber":4,"author":{"gitId":"matheril"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2022-03-15"},{"lineNumber":5,"author":{"gitId":"matheril"},"content":"import seedu.splitlah.exceptions.InvalidDataException;","lastModifiedDate":"2022-03-15"},{"lineNumber":6,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":7,"author":{"gitId":"matheril"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-03-23"},{"lineNumber":8,"author":{"gitId":"matheril"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-03-23"},{"lineNumber":9,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":10,"author":{"gitId":"matheril"},"content":"public class NameTest {","lastModifiedDate":"2022-03-15"},{"lineNumber":11,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":12,"author":{"gitId":"matheril"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":13,"author":{"gitId":"matheril"},"content":"    public void validateName_nameHasNumbers_returnsFalse() {","lastModifiedDate":"2022-03-23"},{"lineNumber":14,"author":{"gitId":"matheril"},"content":"        assertFalse(Name.validateName(\"sam99\"));","lastModifiedDate":"2022-03-23"},{"lineNumber":15,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":16,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":17,"author":{"gitId":"matheril"},"content":"    @Test","lastModifiedDate":"2022-03-23"},{"lineNumber":18,"author":{"gitId":"matheril"},"content":"    public void validateName_nameHasSymbols_returnsFalse() throws InvalidDataException {","lastModifiedDate":"2022-03-23"},{"lineNumber":19,"author":{"gitId":"matheril"},"content":"        assertFalse(Name.validateName(\"s@m.\"));","lastModifiedDate":"2022-03-23"},{"lineNumber":20,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":21,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-15"},{"lineNumber":22,"author":{"gitId":"matheril"},"content":"    @Test","lastModifiedDate":"2022-03-15"},{"lineNumber":23,"author":{"gitId":"matheril"},"content":"    public void validateName_nameIsAlphaOnly_returnsTrue() {","lastModifiedDate":"2022-03-23"},{"lineNumber":24,"author":{"gitId":"matheril"},"content":"        assertTrue(Name.validateName(\"sam\"));","lastModifiedDate":"2022-03-23"},{"lineNumber":25,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-15"},{"lineNumber":26,"author":{"gitId":"matheril"},"content":"}","lastModifiedDate":"2022-03-15"}],"authorContributionMap":{"matheril":26}},{"path":"src/test/java/seedu/splitlah/data/ProfileTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah.data;","lastModifiedDate":"2022-03-17"},{"lineNumber":2,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2022-03-17"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-17"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.command.Command;","lastModifiedDate":"2022-03-17"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.exceptions.InvalidDataException;","lastModifiedDate":"2022-03-17"},{"lineNumber":7,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.parser.Parser;","lastModifiedDate":"2022-03-17"},{"lineNumber":8,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-17"},{"lineNumber":9,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":10,"author":{"gitId":"froststein"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-17"},{"lineNumber":11,"author":{"gitId":"froststein"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2022-03-17"},{"lineNumber":12,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":13,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":"class ProfileTest {","lastModifiedDate":"2022-03-17"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":"    Manager manager \u003d new Manager();","lastModifiedDate":"2022-03-17"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":19,"author":{"gitId":"froststein"},"content":"     * Creates two sessions that is stored and managed by the Manager object.","lastModifiedDate":"2022-03-22"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":21,"author":{"gitId":"froststein"},"content":"    @BeforeEach","lastModifiedDate":"2022-03-17"},{"lineNumber":22,"author":{"gitId":"froststein"},"content":"    void setUp() {","lastModifiedDate":"2022-03-17"},{"lineNumber":23,"author":{"gitId":"froststein"},"content":"        String sessionOneArgs \u003d \"session /create /n Class outing /d 15-02-2022 /pl Alice Bob\";","lastModifiedDate":"2022-03-17"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"        String sessionTwoArgs \u003d \"session /create /n Family gathering /d 20-02-2022  /pl Eves Mallory\";","lastModifiedDate":"2022-03-17"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"        Command createSessionOne \u003d Parser.getCommand(sessionOneArgs);","lastModifiedDate":"2022-03-17"},{"lineNumber":26,"author":{"gitId":"froststein"},"content":"        createSessionOne.run(manager);","lastModifiedDate":"2022-03-17"},{"lineNumber":27,"author":{"gitId":"froststein"},"content":"        Command createSessionTwo \u003d Parser.getCommand(sessionTwoArgs);","lastModifiedDate":"2022-03-17"},{"lineNumber":28,"author":{"gitId":"froststein"},"content":"        createSessionTwo.run(manager);","lastModifiedDate":"2022-03-17"},{"lineNumber":29,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":30,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":31,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":32,"author":{"gitId":"froststein"},"content":"     * Checks if method returns true when a Session object with the specified session name is found.","lastModifiedDate":"2022-03-17"},{"lineNumber":33,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":34,"author":{"gitId":"froststein"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":35,"author":{"gitId":"froststein"},"content":"    public void hasSessionName_inputContainsExistingSessionName_true() {","lastModifiedDate":"2022-03-17"},{"lineNumber":36,"author":{"gitId":"froststein"},"content":"        String sessionNameToTest \u003d \"Class outing\";","lastModifiedDate":"2022-03-17"},{"lineNumber":37,"author":{"gitId":"froststein"},"content":"        boolean isExists \u003d manager.getProfile().hasSessionName(sessionNameToTest);","lastModifiedDate":"2022-03-17"},{"lineNumber":38,"author":{"gitId":"froststein"},"content":"        assertEquals(true, isExists);","lastModifiedDate":"2022-03-17"},{"lineNumber":39,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":40,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":41,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":42,"author":{"gitId":"froststein"},"content":"     * Checks if method returns false when a Session object with the specified session name is not found.","lastModifiedDate":"2022-03-17"},{"lineNumber":43,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":44,"author":{"gitId":"froststein"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":45,"author":{"gitId":"froststein"},"content":"    public void hasSessionName_inputContainsNonExistingSessionName_false() {","lastModifiedDate":"2022-03-17"},{"lineNumber":46,"author":{"gitId":"froststein"},"content":"        String sessionNameToTest \u003d \"School gathering\";","lastModifiedDate":"2022-03-17"},{"lineNumber":47,"author":{"gitId":"froststein"},"content":"        boolean isExists \u003d manager.getProfile().hasSessionName(sessionNameToTest);","lastModifiedDate":"2022-03-17"},{"lineNumber":48,"author":{"gitId":"froststein"},"content":"        assertEquals(false, isExists);","lastModifiedDate":"2022-03-17"},{"lineNumber":49,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":50,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":51,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":52,"author":{"gitId":"froststein"},"content":"     * Checks if method returns true when a Session object with the specified session unique identifier is found.","lastModifiedDate":"2022-03-17"},{"lineNumber":53,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":54,"author":{"gitId":"froststein"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":55,"author":{"gitId":"froststein"},"content":"    public void hasSessionId_inputContainsExistingSessionId_true() {","lastModifiedDate":"2022-03-17"},{"lineNumber":56,"author":{"gitId":"froststein"},"content":"        int sessionIdToTest \u003d 1;","lastModifiedDate":"2022-03-17"},{"lineNumber":57,"author":{"gitId":"froststein"},"content":"        boolean isExists \u003d manager.getProfile().hasSessionId(sessionIdToTest);","lastModifiedDate":"2022-03-17"},{"lineNumber":58,"author":{"gitId":"froststein"},"content":"        assertEquals(true, isExists);","lastModifiedDate":"2022-03-17"},{"lineNumber":59,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":60,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":61,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":62,"author":{"gitId":"froststein"},"content":"     * Checks if method returns false when a Session object with the specified session unique identifier is not found.","lastModifiedDate":"2022-03-17"},{"lineNumber":63,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":64,"author":{"gitId":"froststein"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":65,"author":{"gitId":"froststein"},"content":"    public void hasSessionId_inputContainsNonExistingSessionId_false() {","lastModifiedDate":"2022-03-17"},{"lineNumber":66,"author":{"gitId":"froststein"},"content":"        int sessionIdToTest \u003d 10;","lastModifiedDate":"2022-03-17"},{"lineNumber":67,"author":{"gitId":"froststein"},"content":"        boolean isExists \u003d manager.getProfile().hasSessionId(sessionIdToTest);","lastModifiedDate":"2022-03-17"},{"lineNumber":68,"author":{"gitId":"froststein"},"content":"        assertEquals(false, isExists);","lastModifiedDate":"2022-03-17"},{"lineNumber":69,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":70,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":71,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":72,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":73,"author":{"gitId":"froststein"},"content":"     * Checks if the correct Session object is properly returned when a Session object with","lastModifiedDate":"2022-03-17"},{"lineNumber":74,"author":{"gitId":"froststein"},"content":"     * the specified session unique identifier is found.","lastModifiedDate":"2022-03-17"},{"lineNumber":75,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":76,"author":{"gitId":"froststein"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":77,"author":{"gitId":"froststein"},"content":"    public void getSession_validSessionId_sessionReturned() {","lastModifiedDate":"2022-03-17"},{"lineNumber":78,"author":{"gitId":"froststein"},"content":"        int sessionIdToTest \u003d 1;","lastModifiedDate":"2022-03-17"},{"lineNumber":79,"author":{"gitId":"froststein"},"content":"        try {","lastModifiedDate":"2022-03-17"},{"lineNumber":80,"author":{"gitId":"froststein"},"content":"            Session retrievedSession \u003d manager.getProfile().getSession(sessionIdToTest);","lastModifiedDate":"2022-03-17"},{"lineNumber":81,"author":{"gitId":"froststein"},"content":"            assertEquals(sessionIdToTest, retrievedSession.getSessionId());","lastModifiedDate":"2022-03-17"},{"lineNumber":82,"author":{"gitId":"froststein"},"content":"        } catch (InvalidDataException invalidDataException) {","lastModifiedDate":"2022-03-17"},{"lineNumber":83,"author":{"gitId":"froststein"},"content":"            fail();","lastModifiedDate":"2022-03-17"},{"lineNumber":84,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":85,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":86,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":87,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":88,"author":{"gitId":"froststein"},"content":"     * Checks if an exception is properly thrown when a Session object with","lastModifiedDate":"2022-03-17"},{"lineNumber":89,"author":{"gitId":"froststein"},"content":"     * a specified session unique identifier is not found.","lastModifiedDate":"2022-03-17"},{"lineNumber":90,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":91,"author":{"gitId":"froststein"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":92,"author":{"gitId":"froststein"},"content":"    public void getSession_invalidSessionId_exceptionThrown() {","lastModifiedDate":"2022-03-17"},{"lineNumber":93,"author":{"gitId":"froststein"},"content":"        int sessionIdToTest \u003d 10;","lastModifiedDate":"2022-03-17"},{"lineNumber":94,"author":{"gitId":"froststein"},"content":"        try {","lastModifiedDate":"2022-03-17"},{"lineNumber":95,"author":{"gitId":"froststein"},"content":"            manager.getProfile().getSession(sessionIdToTest);","lastModifiedDate":"2022-03-17"},{"lineNumber":96,"author":{"gitId":"froststein"},"content":"            fail();","lastModifiedDate":"2022-03-17"},{"lineNumber":97,"author":{"gitId":"froststein"},"content":"        } catch (InvalidDataException invalidDataException) {","lastModifiedDate":"2022-03-17"},{"lineNumber":98,"author":{"gitId":"froststein"},"content":"            assertEquals(invalidDataException.getMessage(), Message.ERROR_PROFILE_SESSION_NOT_IN_LIST);","lastModifiedDate":"2022-03-17"},{"lineNumber":99,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":100,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":101,"author":{"gitId":"froststein"},"content":"}","lastModifiedDate":"2022-03-17"}],"authorContributionMap":{"froststein":101}},{"path":"src/test/java/seedu/splitlah/exceptions/InvalidDataExceptionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"matheril"},"content":"package seedu.splitlah.exceptions;","lastModifiedDate":"2022-03-21"},{"lineNumber":2,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":3,"author":{"gitId":"matheril"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-21"},{"lineNumber":4,"author":{"gitId":"matheril"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;","lastModifiedDate":"2022-03-21"},{"lineNumber":5,"author":{"gitId":"matheril"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2022-03-21"},{"lineNumber":6,"author":{"gitId":"matheril"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-21"},{"lineNumber":7,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":8,"author":{"gitId":"matheril"},"content":"public class InvalidDataExceptionTest {","lastModifiedDate":"2022-03-21"},{"lineNumber":9,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":10,"author":{"gitId":"matheril"},"content":"    private InvalidDataException invalidDataExceptionWithMessage;","lastModifiedDate":"2022-03-21"},{"lineNumber":11,"author":{"gitId":"matheril"},"content":"    private InvalidDataException invalidDataExceptionWithMessageWithCause;","lastModifiedDate":"2022-03-21"},{"lineNumber":12,"author":{"gitId":"matheril"},"content":"    private InvalidDataException invalidDataExceptionWithoutCauseWithoutMessage;","lastModifiedDate":"2022-03-21"},{"lineNumber":13,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":14,"author":{"gitId":"matheril"},"content":"    @BeforeEach","lastModifiedDate":"2022-03-21"},{"lineNumber":15,"author":{"gitId":"matheril"},"content":"    public void setUp() {","lastModifiedDate":"2022-03-21"},{"lineNumber":16,"author":{"gitId":"matheril"},"content":"        this.invalidDataExceptionWithMessage \u003d new InvalidDataException(\"message\");","lastModifiedDate":"2022-03-21"},{"lineNumber":17,"author":{"gitId":"matheril"},"content":"        this.invalidDataExceptionWithMessageWithCause \u003d new InvalidDataException(\"message\", new Throwable(\"cause\"));","lastModifiedDate":"2022-03-21"},{"lineNumber":18,"author":{"gitId":"matheril"},"content":"        this.invalidDataExceptionWithoutCauseWithoutMessage \u003d new InvalidDataException();","lastModifiedDate":"2022-03-21"},{"lineNumber":19,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-21"},{"lineNumber":20,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":21,"author":{"gitId":"matheril"},"content":"    @Test","lastModifiedDate":"2022-03-21"},{"lineNumber":22,"author":{"gitId":"matheril"},"content":"    public void getMessage_withMessageOnly_returnsMessage() {","lastModifiedDate":"2022-03-21"},{"lineNumber":23,"author":{"gitId":"matheril"},"content":"        assertEquals(\"message\", invalidDataExceptionWithMessage.getMessage());","lastModifiedDate":"2022-03-21"},{"lineNumber":24,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-21"},{"lineNumber":25,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":26,"author":{"gitId":"matheril"},"content":"    @Test","lastModifiedDate":"2022-03-21"},{"lineNumber":27,"author":{"gitId":"matheril"},"content":"    public void getCause_withMessageOnly_doesNotReturnCause() {","lastModifiedDate":"2022-03-21"},{"lineNumber":28,"author":{"gitId":"matheril"},"content":"        Object cause \u003d invalidDataExceptionWithMessage.getCause();","lastModifiedDate":"2022-03-21"},{"lineNumber":29,"author":{"gitId":"matheril"},"content":"        assertNull(cause);","lastModifiedDate":"2022-03-21"},{"lineNumber":30,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-21"},{"lineNumber":31,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":32,"author":{"gitId":"matheril"},"content":"    @Test","lastModifiedDate":"2022-03-21"},{"lineNumber":33,"author":{"gitId":"matheril"},"content":"    public void getMessage_withMessageWithCause_returnsMessage() {","lastModifiedDate":"2022-03-21"},{"lineNumber":34,"author":{"gitId":"matheril"},"content":"        assertEquals(\"message\", invalidDataExceptionWithMessageWithCause.getMessage());","lastModifiedDate":"2022-03-21"},{"lineNumber":35,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-21"},{"lineNumber":36,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":37,"author":{"gitId":"matheril"},"content":"    @Test","lastModifiedDate":"2022-03-21"},{"lineNumber":38,"author":{"gitId":"matheril"},"content":"    public void getCause_withMessageWithCause_returnsCause() {","lastModifiedDate":"2022-03-21"},{"lineNumber":39,"author":{"gitId":"matheril"},"content":"        assertEquals(new Throwable(\"cause\").getMessage(),","lastModifiedDate":"2022-03-21"},{"lineNumber":40,"author":{"gitId":"matheril"},"content":"                invalidDataExceptionWithMessageWithCause.getCause().getMessage());","lastModifiedDate":"2022-03-21"},{"lineNumber":41,"author":{"gitId":"matheril"},"content":"        assertEquals(new Throwable(\"cause\").getCause(),","lastModifiedDate":"2022-03-21"},{"lineNumber":42,"author":{"gitId":"matheril"},"content":"                invalidDataExceptionWithMessageWithCause.getCause().getCause());","lastModifiedDate":"2022-03-21"},{"lineNumber":43,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-21"},{"lineNumber":44,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":45,"author":{"gitId":"matheril"},"content":"    @Test","lastModifiedDate":"2022-03-21"},{"lineNumber":46,"author":{"gitId":"matheril"},"content":"    public void getMessage_withoutMessageWithoutCause_doesNotReturnMessage() {","lastModifiedDate":"2022-03-21"},{"lineNumber":47,"author":{"gitId":"matheril"},"content":"        String message \u003d invalidDataExceptionWithoutCauseWithoutMessage.getMessage();","lastModifiedDate":"2022-03-21"},{"lineNumber":48,"author":{"gitId":"matheril"},"content":"        assertNull(message);","lastModifiedDate":"2022-03-21"},{"lineNumber":49,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-21"},{"lineNumber":50,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":51,"author":{"gitId":"matheril"},"content":"    @Test","lastModifiedDate":"2022-03-21"},{"lineNumber":52,"author":{"gitId":"matheril"},"content":"    public void getCause_withoutMessageWithoutCause_doesNotReturnCause() {","lastModifiedDate":"2022-03-21"},{"lineNumber":53,"author":{"gitId":"matheril"},"content":"        Throwable cause \u003d invalidDataExceptionWithoutCauseWithoutMessage.getCause();","lastModifiedDate":"2022-03-21"},{"lineNumber":54,"author":{"gitId":"matheril"},"content":"        assertNull(cause);","lastModifiedDate":"2022-03-21"},{"lineNumber":55,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-21"},{"lineNumber":56,"author":{"gitId":"matheril"},"content":"}","lastModifiedDate":"2022-03-21"}],"authorContributionMap":{"matheril":56}},{"path":"src/test/java/seedu/splitlah/exceptions/InvalidFormatExceptionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"matheril"},"content":"package seedu.splitlah.exceptions;","lastModifiedDate":"2022-03-21"},{"lineNumber":2,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":3,"author":{"gitId":"matheril"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-21"},{"lineNumber":4,"author":{"gitId":"matheril"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;","lastModifiedDate":"2022-03-21"},{"lineNumber":5,"author":{"gitId":"matheril"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2022-03-21"},{"lineNumber":6,"author":{"gitId":"matheril"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-21"},{"lineNumber":7,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":8,"author":{"gitId":"matheril"},"content":"public class InvalidFormatExceptionTest {","lastModifiedDate":"2022-03-21"},{"lineNumber":9,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":10,"author":{"gitId":"matheril"},"content":"    private InvalidFormatException invalidFormatExceptionWithMessage;","lastModifiedDate":"2022-03-21"},{"lineNumber":11,"author":{"gitId":"matheril"},"content":"    private InvalidFormatException invalidFormatExceptionWithMessageWithCause;","lastModifiedDate":"2022-03-21"},{"lineNumber":12,"author":{"gitId":"matheril"},"content":"    private InvalidFormatException invalidFormatExceptionWithoutMessageWithoutCause;","lastModifiedDate":"2022-03-21"},{"lineNumber":13,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":14,"author":{"gitId":"matheril"},"content":"    @BeforeEach","lastModifiedDate":"2022-03-21"},{"lineNumber":15,"author":{"gitId":"matheril"},"content":"    public void setUp() {","lastModifiedDate":"2022-03-21"},{"lineNumber":16,"author":{"gitId":"matheril"},"content":"        this.invalidFormatExceptionWithMessage \u003d new InvalidFormatException(\"message\");","lastModifiedDate":"2022-03-21"},{"lineNumber":17,"author":{"gitId":"matheril"},"content":"        this.invalidFormatExceptionWithMessageWithCause \u003d new InvalidFormatException(\"message\", new Throwable(\"cause\"));","lastModifiedDate":"2022-03-21"},{"lineNumber":18,"author":{"gitId":"matheril"},"content":"        this.invalidFormatExceptionWithoutMessageWithoutCause \u003d new InvalidFormatException();","lastModifiedDate":"2022-03-21"},{"lineNumber":19,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-21"},{"lineNumber":20,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":21,"author":{"gitId":"matheril"},"content":"    @Test","lastModifiedDate":"2022-03-21"},{"lineNumber":22,"author":{"gitId":"matheril"},"content":"    public void getMessage_withMessageOnly_returnsMessage() {","lastModifiedDate":"2022-03-21"},{"lineNumber":23,"author":{"gitId":"matheril"},"content":"        assertEquals(\"message\", invalidFormatExceptionWithMessage.getMessage());","lastModifiedDate":"2022-03-21"},{"lineNumber":24,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-21"},{"lineNumber":25,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":26,"author":{"gitId":"matheril"},"content":"    @Test","lastModifiedDate":"2022-03-21"},{"lineNumber":27,"author":{"gitId":"matheril"},"content":"    public void getCause_withMessageOnly_doesNotReturnCause() {","lastModifiedDate":"2022-03-21"},{"lineNumber":28,"author":{"gitId":"matheril"},"content":"        Object cause \u003d invalidFormatExceptionWithMessage.getCause();","lastModifiedDate":"2022-03-21"},{"lineNumber":29,"author":{"gitId":"matheril"},"content":"        assertNull(cause);","lastModifiedDate":"2022-03-21"},{"lineNumber":30,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-21"},{"lineNumber":31,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":32,"author":{"gitId":"matheril"},"content":"    @Test","lastModifiedDate":"2022-03-21"},{"lineNumber":33,"author":{"gitId":"matheril"},"content":"    public void getMessage_withMessageWithCause_returnsMessage() {","lastModifiedDate":"2022-03-21"},{"lineNumber":34,"author":{"gitId":"matheril"},"content":"        assertEquals(\"message\", invalidFormatExceptionWithMessageWithCause.getMessage());","lastModifiedDate":"2022-03-21"},{"lineNumber":35,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-21"},{"lineNumber":36,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":37,"author":{"gitId":"matheril"},"content":"    @Test","lastModifiedDate":"2022-03-21"},{"lineNumber":38,"author":{"gitId":"matheril"},"content":"    public void getCause_withMessageWithCause_returnsCause() {","lastModifiedDate":"2022-03-21"},{"lineNumber":39,"author":{"gitId":"matheril"},"content":"        assertEquals(new Throwable(\"cause\").getMessage(),","lastModifiedDate":"2022-03-21"},{"lineNumber":40,"author":{"gitId":"matheril"},"content":"                invalidFormatExceptionWithMessageWithCause.getCause().getMessage());","lastModifiedDate":"2022-03-21"},{"lineNumber":41,"author":{"gitId":"matheril"},"content":"        assertEquals(new Throwable(\"cause\").getCause(),","lastModifiedDate":"2022-03-21"},{"lineNumber":42,"author":{"gitId":"matheril"},"content":"                invalidFormatExceptionWithMessageWithCause.getCause().getCause());","lastModifiedDate":"2022-03-21"},{"lineNumber":43,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-21"},{"lineNumber":44,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":45,"author":{"gitId":"matheril"},"content":"    @Test","lastModifiedDate":"2022-03-21"},{"lineNumber":46,"author":{"gitId":"matheril"},"content":"    public void getMessage_withoutMessageWithoutCause_doesNotReturnMessage() {","lastModifiedDate":"2022-03-21"},{"lineNumber":47,"author":{"gitId":"matheril"},"content":"        String message \u003d invalidFormatExceptionWithoutMessageWithoutCause.getMessage();","lastModifiedDate":"2022-03-21"},{"lineNumber":48,"author":{"gitId":"matheril"},"content":"        assertNull(message);","lastModifiedDate":"2022-03-21"},{"lineNumber":49,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-21"},{"lineNumber":50,"author":{"gitId":"matheril"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":51,"author":{"gitId":"matheril"},"content":"    @Test","lastModifiedDate":"2022-03-21"},{"lineNumber":52,"author":{"gitId":"matheril"},"content":"    public void getCause_withoutMessageWithoutCause_doesNotReturnCause() {","lastModifiedDate":"2022-03-21"},{"lineNumber":53,"author":{"gitId":"matheril"},"content":"        Throwable cause \u003d invalidFormatExceptionWithoutMessageWithoutCause.getCause();","lastModifiedDate":"2022-03-21"},{"lineNumber":54,"author":{"gitId":"matheril"},"content":"        assertNull(cause);","lastModifiedDate":"2022-03-21"},{"lineNumber":55,"author":{"gitId":"matheril"},"content":"    }","lastModifiedDate":"2022-03-21"},{"lineNumber":56,"author":{"gitId":"matheril"},"content":"}","lastModifiedDate":"2022-03-21"}],"authorContributionMap":{"matheril":56}},{"path":"src/test/java/seedu/splitlah/parser/ParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package seedu.splitlah.parser;","lastModifiedDate":"2022-03-10"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-10"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.command.Command;","lastModifiedDate":"2022-03-10"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.command.HelpCommand;","lastModifiedDate":"2022-03-25"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.command.InvalidCommand;","lastModifiedDate":"2022-03-10"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.command.SessionListCommand;","lastModifiedDate":"2022-03-25"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.command.SessionSummaryCommand;","lastModifiedDate":"2022-03-25"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.exceptions.InvalidFormatException;","lastModifiedDate":"2022-03-14"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-14"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-03-17"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-10"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;","lastModifiedDate":"2022-03-10"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2022-03-14"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"class ParserTest {","lastModifiedDate":"2022-03-10"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"    // getCommand()","lastModifiedDate":"2022-03-10"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-25"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"     * Checks if valid objects of subclasses of Command class are returned when valid inputs are provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-25"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-25"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"    void getCommand_validInput_validCommand() {","lastModifiedDate":"2022-03-25"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"        // TODO: update with all Command subclasses after their CommandParser is complete","lastModifiedDate":"2022-03-25"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"        String sessionSummaryCommandInput \u003d \"session /summary /sid 1\";","lastModifiedDate":"2022-03-25"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"        Command command \u003d Parser.getCommand(sessionSummaryCommandInput);","lastModifiedDate":"2022-03-25"},{"lineNumber":29,"author":{"gitId":"warrencxw"},"content":"        assertEquals(SessionSummaryCommand.class, command.getClass());","lastModifiedDate":"2022-03-25"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-25"},{"lineNumber":31,"author":{"gitId":"warrencxw"},"content":"        String sessionListCommandInput \u003d \"session /list\";","lastModifiedDate":"2022-03-25"},{"lineNumber":32,"author":{"gitId":"warrencxw"},"content":"        command \u003d Parser.getCommand(sessionListCommandInput);","lastModifiedDate":"2022-03-25"},{"lineNumber":33,"author":{"gitId":"warrencxw"},"content":"        assertEquals(SessionListCommand.class, command.getClass());","lastModifiedDate":"2022-03-25"},{"lineNumber":34,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-25"},{"lineNumber":35,"author":{"gitId":"warrencxw"},"content":"        String helpCommandInput \u003d \"help\";","lastModifiedDate":"2022-03-25"},{"lineNumber":36,"author":{"gitId":"warrencxw"},"content":"        command \u003d Parser.getCommand(helpCommandInput);","lastModifiedDate":"2022-03-25"},{"lineNumber":37,"author":{"gitId":"warrencxw"},"content":"        assertEquals(HelpCommand.class, command.getClass());","lastModifiedDate":"2022-03-25"},{"lineNumber":38,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-25"},{"lineNumber":39,"author":{"gitId":"warrencxw"},"content":"    ","lastModifiedDate":"2022-03-25"},{"lineNumber":40,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":41,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidCommand is returned when an empty String object is provided by the user.","lastModifiedDate":"2022-03-10"},{"lineNumber":42,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":43,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-10"},{"lineNumber":44,"author":{"gitId":"warrencxw"},"content":"    void getCommand_emptyString_InvalidCommand() {","lastModifiedDate":"2022-03-10"},{"lineNumber":45,"author":{"gitId":"warrencxw"},"content":"        String emptyString \u003d \"\";","lastModifiedDate":"2022-03-10"},{"lineNumber":46,"author":{"gitId":"warrencxw"},"content":"        Command command \u003d Parser.getCommand(emptyString);","lastModifiedDate":"2022-03-10"},{"lineNumber":47,"author":{"gitId":"warrencxw"},"content":"        assertEquals(InvalidCommand.class, command.getClass());","lastModifiedDate":"2022-03-10"},{"lineNumber":48,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":49,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":50,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":51,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidCommand is returned when a String object containing only whitespaces is provided by the user.","lastModifiedDate":"2022-03-10"},{"lineNumber":52,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":53,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-10"},{"lineNumber":54,"author":{"gitId":"warrencxw"},"content":"    void getCommand_whitespaceInput_InvalidCommand() {","lastModifiedDate":"2022-03-10"},{"lineNumber":55,"author":{"gitId":"warrencxw"},"content":"        String whitespaceString \u003d \"     \";","lastModifiedDate":"2022-03-10"},{"lineNumber":56,"author":{"gitId":"warrencxw"},"content":"        Command command \u003d Parser.getCommand(whitespaceString);","lastModifiedDate":"2022-03-10"},{"lineNumber":57,"author":{"gitId":"warrencxw"},"content":"        assertEquals(InvalidCommand.class, command.getClass());","lastModifiedDate":"2022-03-10"},{"lineNumber":58,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":59,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":60,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-25"},{"lineNumber":61,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidCommand object is returned when additional irrelevant argument tokens are appended to the ","lastModifiedDate":"2022-03-25"},{"lineNumber":62,"author":{"gitId":"warrencxw"},"content":"     * single token commands (e.g. \"help\", \"exit\") as input.","lastModifiedDate":"2022-03-25"},{"lineNumber":63,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-25"},{"lineNumber":64,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-25"},{"lineNumber":65,"author":{"gitId":"warrencxw"},"content":"    void getCommand_singleTokenCommandsWithIrrelevantTokens_InvalidCommand() {","lastModifiedDate":"2022-03-25"},{"lineNumber":66,"author":{"gitId":"warrencxw"},"content":"        // Single additional token, no delimiters","lastModifiedDate":"2022-03-25"},{"lineNumber":67,"author":{"gitId":"warrencxw"},"content":"        String helpWithIrrelevantArguments \u003d \"help apple\";","lastModifiedDate":"2022-03-25"},{"lineNumber":68,"author":{"gitId":"warrencxw"},"content":"        Command command \u003d Parser.getCommand(helpWithIrrelevantArguments);","lastModifiedDate":"2022-03-25"},{"lineNumber":69,"author":{"gitId":"warrencxw"},"content":"        assertEquals(InvalidCommand.class, command.getClass());","lastModifiedDate":"2022-03-25"},{"lineNumber":70,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":71,"author":{"gitId":"warrencxw"},"content":"        // Single additional token, with delimiters","lastModifiedDate":"2022-03-25"},{"lineNumber":72,"author":{"gitId":"warrencxw"},"content":"        helpWithIrrelevantArguments \u003d \"help /apple\";","lastModifiedDate":"2022-03-25"},{"lineNumber":73,"author":{"gitId":"warrencxw"},"content":"        command \u003d Parser.getCommand(helpWithIrrelevantArguments);","lastModifiedDate":"2022-03-25"},{"lineNumber":74,"author":{"gitId":"warrencxw"},"content":"        assertEquals(InvalidCommand.class, command.getClass());","lastModifiedDate":"2022-03-25"},{"lineNumber":75,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":76,"author":{"gitId":"warrencxw"},"content":"        // Two additional tokens, without delimiters","lastModifiedDate":"2022-03-25"},{"lineNumber":77,"author":{"gitId":"warrencxw"},"content":"        helpWithIrrelevantArguments \u003d \"help apple orange\";","lastModifiedDate":"2022-03-25"},{"lineNumber":78,"author":{"gitId":"warrencxw"},"content":"        command \u003d Parser.getCommand(helpWithIrrelevantArguments);","lastModifiedDate":"2022-03-25"},{"lineNumber":79,"author":{"gitId":"warrencxw"},"content":"        assertEquals(InvalidCommand.class, command.getClass());","lastModifiedDate":"2022-03-25"},{"lineNumber":80,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":81,"author":{"gitId":"warrencxw"},"content":"        // Two additional tokens, one delimiters","lastModifiedDate":"2022-03-25"},{"lineNumber":82,"author":{"gitId":"warrencxw"},"content":"        helpWithIrrelevantArguments \u003d \"help /apple orange\";","lastModifiedDate":"2022-03-25"},{"lineNumber":83,"author":{"gitId":"warrencxw"},"content":"        command \u003d Parser.getCommand(helpWithIrrelevantArguments);","lastModifiedDate":"2022-03-25"},{"lineNumber":84,"author":{"gitId":"warrencxw"},"content":"        assertEquals(InvalidCommand.class, command.getClass());","lastModifiedDate":"2022-03-25"},{"lineNumber":85,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":86,"author":{"gitId":"warrencxw"},"content":"        // Three additional tokens, two delimiters","lastModifiedDate":"2022-03-25"},{"lineNumber":87,"author":{"gitId":"warrencxw"},"content":"        helpWithIrrelevantArguments \u003d \"help /apple /sid 1\";","lastModifiedDate":"2022-03-25"},{"lineNumber":88,"author":{"gitId":"warrencxw"},"content":"        command \u003d Parser.getCommand(helpWithIrrelevantArguments);","lastModifiedDate":"2022-03-25"},{"lineNumber":89,"author":{"gitId":"warrencxw"},"content":"        assertEquals(InvalidCommand.class, command.getClass());","lastModifiedDate":"2022-03-25"},{"lineNumber":90,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-25"},{"lineNumber":91,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":92,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-25"},{"lineNumber":93,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidCommand object is returned when duplicate valid delimiters are provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":94,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-25"},{"lineNumber":95,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-25"},{"lineNumber":96,"author":{"gitId":"warrencxw"},"content":"    void getCommand_duplicateValidDelimiters_InvalidCommand() {","lastModifiedDate":"2022-03-25"},{"lineNumber":97,"author":{"gitId":"warrencxw"},"content":"        String inputWithDuplicateValidDelimiters \u003d \"session /create /n Class outing /d today /pl Alice /d 25-03-2022\";","lastModifiedDate":"2022-03-25"},{"lineNumber":98,"author":{"gitId":"warrencxw"},"content":"        Command command \u003d Parser.getCommand(inputWithDuplicateValidDelimiters);","lastModifiedDate":"2022-03-25"},{"lineNumber":99,"author":{"gitId":"warrencxw"},"content":"        assertEquals(InvalidCommand.class, command.getClass());","lastModifiedDate":"2022-03-25"},{"lineNumber":100,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-25"},{"lineNumber":101,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":102,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-25"},{"lineNumber":103,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidCommand object is returned when delimiters not belonging to","lastModifiedDate":"2022-03-25"},{"lineNumber":104,"author":{"gitId":"warrencxw"},"content":"     * commands are provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":105,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-25"},{"lineNumber":106,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-25"},{"lineNumber":107,"author":{"gitId":"warrencxw"},"content":"    void getCommand_invalidDelimiterForCommand_InvalidCommand() {","lastModifiedDate":"2022-03-25"},{"lineNumber":108,"author":{"gitId":"warrencxw"},"content":"        String inputWithInvalidDelimiter \u003d \"session /create /n Outing /d today /pl Alice /co 20\";","lastModifiedDate":"2022-03-25"},{"lineNumber":109,"author":{"gitId":"warrencxw"},"content":"        Command command \u003d Parser.getCommand(inputWithInvalidDelimiter);","lastModifiedDate":"2022-03-25"},{"lineNumber":110,"author":{"gitId":"warrencxw"},"content":"        assertEquals(InvalidCommand.class, command.getClass());","lastModifiedDate":"2022-03-25"},{"lineNumber":111,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-25"},{"lineNumber":112,"author":{"gitId":"warrencxw"},"content":"    ","lastModifiedDate":"2022-03-25"},{"lineNumber":113,"author":{"gitId":"warrencxw"},"content":"    // getCommandType()","lastModifiedDate":"2022-03-10"},{"lineNumber":114,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":115,"author":{"gitId":"warrencxw"},"content":"     * Checks if an empty String object is returned as the command string","lastModifiedDate":"2022-03-10"},{"lineNumber":116,"author":{"gitId":"warrencxw"},"content":"     * when an empty String object is provided by the user.","lastModifiedDate":"2022-03-10"},{"lineNumber":117,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":118,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-10"},{"lineNumber":119,"author":{"gitId":"warrencxw"},"content":"    void getCommandType_emptyStringInput_emptyString() {","lastModifiedDate":"2022-03-10"},{"lineNumber":120,"author":{"gitId":"warrencxw"},"content":"        String emptyString \u003d \"\";","lastModifiedDate":"2022-03-10"},{"lineNumber":121,"author":{"gitId":"warrencxw"},"content":"        String output \u003d Parser.getCommandType(emptyString);","lastModifiedDate":"2022-03-10"},{"lineNumber":122,"author":{"gitId":"warrencxw"},"content":"        assertEquals(\"\", output);","lastModifiedDate":"2022-03-10"},{"lineNumber":123,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":124,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":125,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":126,"author":{"gitId":"warrencxw"},"content":"     * Checks if a String object containing identical contents as the input is returned as the command string","lastModifiedDate":"2022-03-10"},{"lineNumber":127,"author":{"gitId":"warrencxw"},"content":"     * when a single token of input is provided by the user.","lastModifiedDate":"2022-03-10"},{"lineNumber":128,"author":{"gitId":"warrencxw"},"content":"     * Matching command types: \"help\", \"list\", \"exit\"","lastModifiedDate":"2022-03-10"},{"lineNumber":129,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":130,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-10"},{"lineNumber":131,"author":{"gitId":"warrencxw"},"content":"    void getCommandType_singleTokenInput_inputEqualsOutput() {","lastModifiedDate":"2022-03-10"},{"lineNumber":132,"author":{"gitId":"warrencxw"},"content":"        String singleTokenString \u003d \"randomTest123\";","lastModifiedDate":"2022-03-10"},{"lineNumber":133,"author":{"gitId":"warrencxw"},"content":"        String output \u003d Parser.getCommandType(singleTokenString);","lastModifiedDate":"2022-03-10"},{"lineNumber":134,"author":{"gitId":"warrencxw"},"content":"        assertEquals(singleTokenString, output);","lastModifiedDate":"2022-03-10"},{"lineNumber":135,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":136,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":137,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":138,"author":{"gitId":"warrencxw"},"content":"     * Checks if null is returned when an input, with a second token does not start with a delimiter,","lastModifiedDate":"2022-03-10"},{"lineNumber":139,"author":{"gitId":"warrencxw"},"content":"     * is provided by the user.","lastModifiedDate":"2022-03-10"},{"lineNumber":140,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":141,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-10"},{"lineNumber":142,"author":{"gitId":"warrencxw"},"content":"    void getCommandType_doubleTokenNoDelimiterInput_null() {","lastModifiedDate":"2022-03-10"},{"lineNumber":143,"author":{"gitId":"warrencxw"},"content":"        String doubleTokenWithNoDelimiterString \u003d \"session create\";","lastModifiedDate":"2022-03-25"},{"lineNumber":144,"author":{"gitId":"warrencxw"},"content":"        String output \u003d Parser.getCommandType(doubleTokenWithNoDelimiterString);","lastModifiedDate":"2022-03-10"},{"lineNumber":145,"author":{"gitId":"warrencxw"},"content":"        assertNull(output);","lastModifiedDate":"2022-03-10"},{"lineNumber":146,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":147,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":148,"author":{"gitId":"warrencxw"},"content":"    // getRemainingArgument()","lastModifiedDate":"2022-03-10"},{"lineNumber":149,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":150,"author":{"gitId":"warrencxw"},"content":"     * Checks if an empty String object is returned as the remaining arguments of the command","lastModifiedDate":"2022-03-10"},{"lineNumber":151,"author":{"gitId":"warrencxw"},"content":"     * when an empty String object is provided by the user.","lastModifiedDate":"2022-03-10"},{"lineNumber":152,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":153,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-10"},{"lineNumber":154,"author":{"gitId":"warrencxw"},"content":"    void getRemainingArgument_emptyStringInput_emptyString() {","lastModifiedDate":"2022-03-10"},{"lineNumber":155,"author":{"gitId":"warrencxw"},"content":"        String emptyString \u003d \"\";","lastModifiedDate":"2022-03-10"},{"lineNumber":156,"author":{"gitId":"warrencxw"},"content":"        String output \u003d Parser.getRemainingArgument(emptyString);","lastModifiedDate":"2022-03-10"},{"lineNumber":157,"author":{"gitId":"warrencxw"},"content":"        assertEquals(\"\", output);","lastModifiedDate":"2022-03-10"},{"lineNumber":158,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":159,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":160,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":161,"author":{"gitId":"warrencxw"},"content":"     * Checks if an empty String object is returned as the remaining arguments of the command","lastModifiedDate":"2022-03-10"},{"lineNumber":162,"author":{"gitId":"warrencxw"},"content":"     * when an input of only a single token is provided by the user.","lastModifiedDate":"2022-03-10"},{"lineNumber":163,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":164,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-10"},{"lineNumber":165,"author":{"gitId":"warrencxw"},"content":"    void getRemainingArgument_singleTokenInput_emptyString() {","lastModifiedDate":"2022-03-10"},{"lineNumber":166,"author":{"gitId":"warrencxw"},"content":"        String singleTokenString \u003d \"randomTest123\";","lastModifiedDate":"2022-03-10"},{"lineNumber":167,"author":{"gitId":"warrencxw"},"content":"        String output \u003d Parser.getRemainingArgument(singleTokenString);","lastModifiedDate":"2022-03-10"},{"lineNumber":168,"author":{"gitId":"warrencxw"},"content":"        assertEquals(\"\", output);","lastModifiedDate":"2022-03-10"},{"lineNumber":169,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":170,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":171,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":172,"author":{"gitId":"warrencxw"},"content":"     * Checks if an empty String object is returned as the remaining arguments of the command","lastModifiedDate":"2022-03-10"},{"lineNumber":173,"author":{"gitId":"warrencxw"},"content":"     * when an input of only two tokens is provided by the user.","lastModifiedDate":"2022-03-10"},{"lineNumber":174,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":175,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-10"},{"lineNumber":176,"author":{"gitId":"warrencxw"},"content":"    void getRemainingArgument_twoInputTokens_emptyString() {","lastModifiedDate":"2022-03-10"},{"lineNumber":177,"author":{"gitId":"warrencxw"},"content":"        String twoInputTokensString \u003d \"brownFox jumpsOver\";","lastModifiedDate":"2022-03-10"},{"lineNumber":178,"author":{"gitId":"warrencxw"},"content":"        String output \u003d Parser.getRemainingArgument(twoInputTokensString);","lastModifiedDate":"2022-03-10"},{"lineNumber":179,"author":{"gitId":"warrencxw"},"content":"        assertEquals(\"\", output);","lastModifiedDate":"2022-03-10"},{"lineNumber":180,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":181,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":182,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":183,"author":{"gitId":"warrencxw"},"content":"     * Checks if the third token is correctly returned as the remaining arguments of the command","lastModifiedDate":"2022-03-10"},{"lineNumber":184,"author":{"gitId":"warrencxw"},"content":"     * when an input of three tokens and multiple whitespaces is provided by the user.","lastModifiedDate":"2022-03-10"},{"lineNumber":185,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":186,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-10"},{"lineNumber":187,"author":{"gitId":"warrencxw"},"content":"    void getRemainingArgument_threeInputTokensAndWhitespace_thirdToken() {","lastModifiedDate":"2022-03-10"},{"lineNumber":188,"author":{"gitId":"warrencxw"},"content":"        String threeInputTokensAndWhitespaceString \u003d \"brownFox jumpsOver theLazyDog  \";","lastModifiedDate":"2022-03-10"},{"lineNumber":189,"author":{"gitId":"warrencxw"},"content":"        String output \u003d Parser.getRemainingArgument(threeInputTokensAndWhitespaceString);","lastModifiedDate":"2022-03-10"},{"lineNumber":190,"author":{"gitId":"warrencxw"},"content":"        assertEquals(\"theLazyDog\", output);","lastModifiedDate":"2022-03-10"},{"lineNumber":191,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":192,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-10"},{"lineNumber":193,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-10"},{"lineNumber":194,"author":{"gitId":"warrencxw"},"content":"     * Checks if the third token and onwards is correctly returned as the remaining arguments of the command","lastModifiedDate":"2022-03-10"},{"lineNumber":195,"author":{"gitId":"warrencxw"},"content":"     * when an input of four tokens is provided by the user.","lastModifiedDate":"2022-03-10"},{"lineNumber":196,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-10"},{"lineNumber":197,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-10"},{"lineNumber":198,"author":{"gitId":"warrencxw"},"content":"    void getRemainingArgument_fourInputTokens_thirdTokenOnwards() {","lastModifiedDate":"2022-03-14"},{"lineNumber":199,"author":{"gitId":"warrencxw"},"content":"        String fourInputTokensString \u003d \"brownFox jumpsOver theLazy Dog\";","lastModifiedDate":"2022-03-10"},{"lineNumber":200,"author":{"gitId":"warrencxw"},"content":"        String output \u003d Parser.getRemainingArgument(fourInputTokensString);","lastModifiedDate":"2022-03-10"},{"lineNumber":201,"author":{"gitId":"warrencxw"},"content":"        assertEquals(\"theLazy Dog\", output);","lastModifiedDate":"2022-03-10"},{"lineNumber":202,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-10"},{"lineNumber":203,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":204,"author":{"gitId":"warrencxw"},"content":"    //  parseName()","lastModifiedDate":"2022-03-16"},{"lineNumber":205,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":206,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown","lastModifiedDate":"2022-03-25"},{"lineNumber":207,"author":{"gitId":"warrencxw"},"content":"     * when the Name delimiter is not provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":208,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":209,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":210,"author":{"gitId":"warrencxw"},"content":"    void parseName_missingDelimiter_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":211,"author":{"gitId":"warrencxw"},"content":"        String argumentWithoutNameDelimiter \u003d \"n Class outing /d 23-02-2022 /pl Alice Alice Bob\";","lastModifiedDate":"2022-03-14"},{"lineNumber":212,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-14"},{"lineNumber":213,"author":{"gitId":"warrencxw"},"content":"            String output \u003d Parser.parseName(argumentWithoutNameDelimiter);","lastModifiedDate":"2022-03-14"},{"lineNumber":214,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-14"},{"lineNumber":215,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-14"},{"lineNumber":216,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_DELIMITER_NOT_FOUND + ParserUtils.NAME_DELIMITER;","lastModifiedDate":"2022-03-20"},{"lineNumber":217,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-14"},{"lineNumber":218,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":219,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":220,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":221,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":222,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown ","lastModifiedDate":"2022-03-25"},{"lineNumber":223,"author":{"gitId":"warrencxw"},"content":"     * when the Name delimiter is provided but no arguments following the Name delimiter are provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":224,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":225,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":226,"author":{"gitId":"warrencxw"},"content":"    void parseName_delimiterExistsWithoutArgument_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":227,"author":{"gitId":"warrencxw"},"content":"        String argumentWithoutNameArgument \u003d \"/n /d 23-02-2022 /pl Alice Alice Bob\";","lastModifiedDate":"2022-03-16"},{"lineNumber":228,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-14"},{"lineNumber":229,"author":{"gitId":"warrencxw"},"content":"            String output \u003d Parser.parseName(argumentWithoutNameArgument);","lastModifiedDate":"2022-03-16"},{"lineNumber":230,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-14"},{"lineNumber":231,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-14"},{"lineNumber":232,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_MISSING_ARGUMENT + ParserUtils.NAME_DELIMITER;","lastModifiedDate":"2022-03-20"},{"lineNumber":233,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-14"},{"lineNumber":234,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":235,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":236,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":237,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":238,"author":{"gitId":"warrencxw"},"content":"     * Checks if a String object containing the name is properly returned when the Name delimiter and arguments","lastModifiedDate":"2022-03-14"},{"lineNumber":239,"author":{"gitId":"warrencxw"},"content":"     * following it are properly provided by the user.","lastModifiedDate":"2022-03-14"},{"lineNumber":240,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":241,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":242,"author":{"gitId":"warrencxw"},"content":"    void parseName_delimiterAndArgumentExists_argumentString() {","lastModifiedDate":"2022-03-14"},{"lineNumber":243,"author":{"gitId":"warrencxw"},"content":"        String argumentWithDelimiterAndArgument \u003d \"/n Class outing /d 23-02-2022 /pl Alice Alice Bob\";","lastModifiedDate":"2022-03-16"},{"lineNumber":244,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-14"},{"lineNumber":245,"author":{"gitId":"warrencxw"},"content":"            String output \u003d Parser.parseName(argumentWithDelimiterAndArgument);","lastModifiedDate":"2022-03-16"},{"lineNumber":246,"author":{"gitId":"warrencxw"},"content":"            assertEquals(\"Class outing\", output);","lastModifiedDate":"2022-03-14"},{"lineNumber":247,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-14"},{"lineNumber":248,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-14"},{"lineNumber":249,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":250,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":251,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":252,"author":{"gitId":"warrencxw"},"content":"    // parsePersonList()","lastModifiedDate":"2022-03-16"},{"lineNumber":253,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":254,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown","lastModifiedDate":"2022-03-25"},{"lineNumber":255,"author":{"gitId":"warrencxw"},"content":"     * when the Person list delimiter is not provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":256,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":257,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":258,"author":{"gitId":"warrencxw"},"content":"    void parsePersonList_missingDelimiter_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":259,"author":{"gitId":"warrencxw"},"content":"        String argumentWithoutPersonListDelimiter \u003d \"/n Class outing /d 23-02-2022 pl Alice Alice Bob\";","lastModifiedDate":"2022-03-16"},{"lineNumber":260,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-14"},{"lineNumber":261,"author":{"gitId":"warrencxw"},"content":"            String[] output \u003d Parser.parsePersonList(argumentWithoutPersonListDelimiter);","lastModifiedDate":"2022-03-16"},{"lineNumber":262,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-14"},{"lineNumber":263,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-14"},{"lineNumber":264,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_DELIMITER_NOT_FOUND + ParserUtils.PERSON_LIST_DELIMITER;","lastModifiedDate":"2022-03-20"},{"lineNumber":265,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-14"},{"lineNumber":266,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":267,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":268,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":269,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":270,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the Person list delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":271,"author":{"gitId":"warrencxw"},"content":"     * is provided but no arguments following the Person list delimiter are provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":272,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":273,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":274,"author":{"gitId":"warrencxw"},"content":"    void parsePersonList_delimiterExistsWithoutArgument_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":275,"author":{"gitId":"warrencxw"},"content":"        String argumentWithoutPersonListArgument \u003d \"/n Class outing /d 23-02-2022 /pl\";","lastModifiedDate":"2022-03-16"},{"lineNumber":276,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-14"},{"lineNumber":277,"author":{"gitId":"warrencxw"},"content":"            String[] output \u003d Parser.parsePersonList(argumentWithoutPersonListArgument);","lastModifiedDate":"2022-03-16"},{"lineNumber":278,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-14"},{"lineNumber":279,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-14"},{"lineNumber":280,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_MISSING_ARGUMENT + ParserUtils.PERSON_LIST_DELIMITER;","lastModifiedDate":"2022-03-20"},{"lineNumber":281,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-14"},{"lineNumber":282,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":283,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":284,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-14"},{"lineNumber":285,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-14"},{"lineNumber":286,"author":{"gitId":"warrencxw"},"content":"     * Checks if a String array object containing names of persons is properly returned when the Person list delimiter","lastModifiedDate":"2022-03-14"},{"lineNumber":287,"author":{"gitId":"warrencxw"},"content":"     * and arguments following it are properly provided by the user.","lastModifiedDate":"2022-03-14"},{"lineNumber":288,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-14"},{"lineNumber":289,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-14"},{"lineNumber":290,"author":{"gitId":"warrencxw"},"content":"    void parsePersonList_delimiterAndArgumentExists_personList() {","lastModifiedDate":"2022-03-14"},{"lineNumber":291,"author":{"gitId":"warrencxw"},"content":"        String argumentWithDelimiterAndArgument \u003d \"/n Class outing /d 23-02-2022 /pl Alice Charles Bob\";","lastModifiedDate":"2022-03-16"},{"lineNumber":292,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-14"},{"lineNumber":293,"author":{"gitId":"warrencxw"},"content":"            String[] output \u003d Parser.parsePersonList(argumentWithDelimiterAndArgument);","lastModifiedDate":"2022-03-16"},{"lineNumber":294,"author":{"gitId":"warrencxw"},"content":"            assertEquals(3, output.length);","lastModifiedDate":"2022-03-14"},{"lineNumber":295,"author":{"gitId":"warrencxw"},"content":"            assertEquals(\"Alice\", output[0]);","lastModifiedDate":"2022-03-14"},{"lineNumber":296,"author":{"gitId":"warrencxw"},"content":"            assertEquals(\"Charles\", output[1]);","lastModifiedDate":"2022-03-14"},{"lineNumber":297,"author":{"gitId":"warrencxw"},"content":"            assertEquals(\"Bob\", output[2]);","lastModifiedDate":"2022-03-14"},{"lineNumber":298,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-14"},{"lineNumber":299,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-14"},{"lineNumber":300,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-14"},{"lineNumber":301,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-14"},{"lineNumber":302,"author":{"gitId":"warrencxw"},"content":"    ","lastModifiedDate":"2022-03-16"},{"lineNumber":303,"author":{"gitId":"warrencxw"},"content":"    // parseInvolved()","lastModifiedDate":"2022-03-16"},{"lineNumber":304,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":305,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown ","lastModifiedDate":"2022-03-25"},{"lineNumber":306,"author":{"gitId":"warrencxw"},"content":"     * when the Involved delimiter is not provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":307,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":308,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":309,"author":{"gitId":"warrencxw"},"content":"    void parseInvolved_missingDelimiter_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":310,"author":{"gitId":"warrencxw"},"content":"        String argumentWithoutInvolvedDelimiter \u003d \"/sid 1 /n Lunch /p Alice i Alice Bob Charlie /co 15\";","lastModifiedDate":"2022-03-16"},{"lineNumber":311,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-16"},{"lineNumber":312,"author":{"gitId":"warrencxw"},"content":"            String[] output \u003d Parser.parseInvolved(argumentWithoutInvolvedDelimiter);","lastModifiedDate":"2022-03-16"},{"lineNumber":313,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-16"},{"lineNumber":314,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-16"},{"lineNumber":315,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_DELIMITER_NOT_FOUND + ParserUtils.INVOLVED_DELIMITER;","lastModifiedDate":"2022-03-20"},{"lineNumber":316,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-16"},{"lineNumber":317,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":318,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":319,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":320,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":321,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the Involved delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":322,"author":{"gitId":"warrencxw"},"content":"     * is provided but no arguments following the Involved delimiter are provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":323,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":324,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":325,"author":{"gitId":"warrencxw"},"content":"    void parseInvolved_delimiterExistsWithoutArgument_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":326,"author":{"gitId":"warrencxw"},"content":"        String argumentWithoutInvolvedArgument \u003d \"/sid 1 /n Lunch /p Alice /i /co 15\";","lastModifiedDate":"2022-03-16"},{"lineNumber":327,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-16"},{"lineNumber":328,"author":{"gitId":"warrencxw"},"content":"            String[] output \u003d Parser.parseInvolved(argumentWithoutInvolvedArgument);","lastModifiedDate":"2022-03-16"},{"lineNumber":329,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-16"},{"lineNumber":330,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-16"},{"lineNumber":331,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_MISSING_ARGUMENT + ParserUtils.INVOLVED_DELIMITER;","lastModifiedDate":"2022-03-20"},{"lineNumber":332,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-16"},{"lineNumber":333,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":334,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":335,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":336,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":337,"author":{"gitId":"warrencxw"},"content":"     * Checks if a String array object containing names of persons is properly returned when the Involved delimiter","lastModifiedDate":"2022-03-16"},{"lineNumber":338,"author":{"gitId":"warrencxw"},"content":"     * and arguments following it are properly provided by the user.","lastModifiedDate":"2022-03-16"},{"lineNumber":339,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":340,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":341,"author":{"gitId":"warrencxw"},"content":"    void parseInvolved_delimiterAndArgumentExists_personList() {","lastModifiedDate":"2022-03-16"},{"lineNumber":342,"author":{"gitId":"warrencxw"},"content":"        String argumentWithDelimiterAndArgument \u003d \"/sid 1 /n Lunch /p Alice /i Alice Bob Charlie /co 15\";","lastModifiedDate":"2022-03-16"},{"lineNumber":343,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-16"},{"lineNumber":344,"author":{"gitId":"warrencxw"},"content":"            String[] output \u003d Parser.parseInvolved(argumentWithDelimiterAndArgument);","lastModifiedDate":"2022-03-16"},{"lineNumber":345,"author":{"gitId":"warrencxw"},"content":"            assertEquals(3, output.length);","lastModifiedDate":"2022-03-16"},{"lineNumber":346,"author":{"gitId":"warrencxw"},"content":"            assertEquals(\"Alice\", output[0]);","lastModifiedDate":"2022-03-16"},{"lineNumber":347,"author":{"gitId":"warrencxw"},"content":"            assertEquals(\"Bob\", output[1]);","lastModifiedDate":"2022-03-16"},{"lineNumber":348,"author":{"gitId":"warrencxw"},"content":"            assertEquals(\"Charlie\", output[2]);","lastModifiedDate":"2022-03-16"},{"lineNumber":349,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-16"},{"lineNumber":350,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-16"},{"lineNumber":351,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":352,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":353,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":354,"author":{"gitId":"warrencxw"},"content":"    // parsePayer()","lastModifiedDate":"2022-03-16"},{"lineNumber":355,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":356,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown","lastModifiedDate":"2022-03-25"},{"lineNumber":357,"author":{"gitId":"warrencxw"},"content":"     * when the Payer delimiter is not provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":358,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":359,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":360,"author":{"gitId":"warrencxw"},"content":"    void parsePayer_missingDelimiter_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":361,"author":{"gitId":"warrencxw"},"content":"        String argumentWithoutPayerDelimiter \u003d \"/sid 1 /n Lunch p Alice /i Alice Bob Charlie /co 15\";","lastModifiedDate":"2022-03-16"},{"lineNumber":362,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-16"},{"lineNumber":363,"author":{"gitId":"warrencxw"},"content":"            String output \u003d Parser.parsePayer(argumentWithoutPayerDelimiter);","lastModifiedDate":"2022-03-16"},{"lineNumber":364,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-16"},{"lineNumber":365,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-16"},{"lineNumber":366,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_DELIMITER_NOT_FOUND + ParserUtils.PAYER_DELIMITER;","lastModifiedDate":"2022-03-20"},{"lineNumber":367,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-16"},{"lineNumber":368,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":369,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":370,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":371,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":372,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the Payer delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":373,"author":{"gitId":"warrencxw"},"content":"     * is provided but no arguments following the Payer delimiter are provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":374,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":375,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":376,"author":{"gitId":"warrencxw"},"content":"    void parsePayer_delimiterExistsWithoutArgument_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":377,"author":{"gitId":"warrencxw"},"content":"        String argumentWithoutPayerArgument \u003d \"/sid 1 /n Lunch /p /i Alice Bob Charlie /co 15\";","lastModifiedDate":"2022-03-16"},{"lineNumber":378,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-16"},{"lineNumber":379,"author":{"gitId":"warrencxw"},"content":"            String output \u003d Parser.parsePayer(argumentWithoutPayerArgument);","lastModifiedDate":"2022-03-16"},{"lineNumber":380,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-16"},{"lineNumber":381,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-16"},{"lineNumber":382,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_MISSING_ARGUMENT + ParserUtils.PAYER_DELIMITER;","lastModifiedDate":"2022-03-20"},{"lineNumber":383,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-16"},{"lineNumber":384,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":385,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":386,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":387,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":388,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the Payer delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":389,"author":{"gitId":"warrencxw"},"content":"     * is provided but multiple names are provided following the Payer delimiter.","lastModifiedDate":"2022-03-25"},{"lineNumber":390,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":391,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":392,"author":{"gitId":"warrencxw"},"content":"    void parsePayer_delimiterExistsMultiplePayers_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":393,"author":{"gitId":"warrencxw"},"content":"        String argumentWithoutPayerArgument \u003d \"/sid 1 /n Lunch /p Alice Bob /i Alice Bob Charlie /co 15\";","lastModifiedDate":"2022-03-16"},{"lineNumber":394,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-16"},{"lineNumber":395,"author":{"gitId":"warrencxw"},"content":"            String output \u003d Parser.parsePayer(argumentWithoutPayerArgument);","lastModifiedDate":"2022-03-16"},{"lineNumber":396,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-16"},{"lineNumber":397,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-16"},{"lineNumber":398,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_MORE_THAN_ONE_PAYER;","lastModifiedDate":"2022-03-16"},{"lineNumber":399,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-16"},{"lineNumber":400,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":401,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":402,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":403,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":404,"author":{"gitId":"warrencxw"},"content":"     * Checks if a String object containing the payer name is properly returned when the Payer delimiter and argument","lastModifiedDate":"2022-03-16"},{"lineNumber":405,"author":{"gitId":"warrencxw"},"content":"     * following it are properly provided by the user.","lastModifiedDate":"2022-03-16"},{"lineNumber":406,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":407,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":408,"author":{"gitId":"warrencxw"},"content":"    void parsePayer_delimiterExistsSinglePayer_argumentString() {","lastModifiedDate":"2022-03-16"},{"lineNumber":409,"author":{"gitId":"warrencxw"},"content":"        String argumentWithDelimiterAndArgument \u003d \"/sid 1 /n Lunch /p Alice /i Alice Bob Charlie /co 15\";","lastModifiedDate":"2022-03-16"},{"lineNumber":410,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-16"},{"lineNumber":411,"author":{"gitId":"warrencxw"},"content":"            String output \u003d Parser.parsePayer(argumentWithDelimiterAndArgument);","lastModifiedDate":"2022-03-16"},{"lineNumber":412,"author":{"gitId":"warrencxw"},"content":"            assertEquals(\"Alice\", output);","lastModifiedDate":"2022-03-16"},{"lineNumber":413,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-16"},{"lineNumber":414,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-16"},{"lineNumber":415,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":416,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":417,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":418,"author":{"gitId":"warrencxw"},"content":"    // parseSessionId()","lastModifiedDate":"2022-03-16"},{"lineNumber":419,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":420,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown","lastModifiedDate":"2022-03-25"},{"lineNumber":421,"author":{"gitId":"warrencxw"},"content":"     * when the Session Id delimiter is not provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":422,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":423,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":424,"author":{"gitId":"warrencxw"},"content":"    void parseSessionId_missingDelimiter_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":425,"author":{"gitId":"warrencxw"},"content":"        String argumentWithoutSessionIdDelimiter \u003d \"sid 1 /n Lunch /p Alice /i Alice Bob Charlie /co 15\";","lastModifiedDate":"2022-03-16"},{"lineNumber":426,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-16"},{"lineNumber":427,"author":{"gitId":"warrencxw"},"content":"            int output \u003d Parser.parseSessionId(argumentWithoutSessionIdDelimiter);","lastModifiedDate":"2022-03-16"},{"lineNumber":428,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-16"},{"lineNumber":429,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-16"},{"lineNumber":430,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_DELIMITER_NOT_FOUND + ParserUtils.SESSION_ID_DELIMITER;","lastModifiedDate":"2022-03-20"},{"lineNumber":431,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-16"},{"lineNumber":432,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":433,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":434,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":435,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":436,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the Session Id delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":437,"author":{"gitId":"warrencxw"},"content":"     * is provided but no arguments following the delimiter are provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":438,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":439,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":440,"author":{"gitId":"warrencxw"},"content":"    void parseSessionId_delimiterExistsWithoutArgument_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":441,"author":{"gitId":"warrencxw"},"content":"        String argumentWithoutSessionIdArgument \u003d \"/sid  /n Lunch /p Alice /i Alice Bob Charlie /co 15\";","lastModifiedDate":"2022-03-16"},{"lineNumber":442,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-16"},{"lineNumber":443,"author":{"gitId":"warrencxw"},"content":"            int output \u003d Parser.parseSessionId(argumentWithoutSessionIdArgument);","lastModifiedDate":"2022-03-16"},{"lineNumber":444,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-16"},{"lineNumber":445,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-16"},{"lineNumber":446,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_MISSING_ARGUMENT + ParserUtils.SESSION_ID_DELIMITER;","lastModifiedDate":"2022-03-20"},{"lineNumber":447,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-16"},{"lineNumber":448,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":449,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":450,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":451,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":452,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the Session Id delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":453,"author":{"gitId":"warrencxw"},"content":"     * is provided but a non-integer argument is provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":454,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":455,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":456,"author":{"gitId":"warrencxw"},"content":"    void parseSessionId_delimiterExistsArgumentNotInteger_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":457,"author":{"gitId":"warrencxw"},"content":"        String argumentWithNonIntArgument \u003d \"/sid a1 /n Lunch /p Alice /i Alice Bob Charlie /co 15\";","lastModifiedDate":"2022-03-16"},{"lineNumber":458,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-16"},{"lineNumber":459,"author":{"gitId":"warrencxw"},"content":"            int output \u003d Parser.parseSessionId(argumentWithNonIntArgument);","lastModifiedDate":"2022-03-16"},{"lineNumber":460,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-16"},{"lineNumber":461,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-16"},{"lineNumber":462,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_NON_INTEGER_ARGUMENT + ParserUtils.SESSION_ID_DELIMITER;","lastModifiedDate":"2022-03-20"},{"lineNumber":463,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-16"},{"lineNumber":464,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":465,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":466,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":467,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":468,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the Session Id delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":469,"author":{"gitId":"warrencxw"},"content":"     * is provided but a negative integer argument is provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":470,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":471,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":472,"author":{"gitId":"warrencxw"},"content":"    void parseSessionId_delimiterExistsArgumentNegativeInteger_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":473,"author":{"gitId":"warrencxw"},"content":"        String argumentWithNegativeIntArgument \u003d \"/sid -9 /n Lunch /p Alice /i Alice Bob Charlie /co 15\";","lastModifiedDate":"2022-03-16"},{"lineNumber":474,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-16"},{"lineNumber":475,"author":{"gitId":"warrencxw"},"content":"            int output \u003d Parser.parseSessionId(argumentWithNegativeIntArgument);","lastModifiedDate":"2022-03-16"},{"lineNumber":476,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-16"},{"lineNumber":477,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-16"},{"lineNumber":478,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_ID_VALUE_NOT_POSITIVE;","lastModifiedDate":"2022-03-16"},{"lineNumber":479,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-16"},{"lineNumber":480,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":481,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":482,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":483,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":484,"author":{"gitId":"warrencxw"},"content":"     * Checks if an integer representing a session unique identifier is properly returned when the","lastModifiedDate":"2022-03-16"},{"lineNumber":485,"author":{"gitId":"warrencxw"},"content":"     * Session Id delimiter is provided along with a positive integer as the argument by the user.","lastModifiedDate":"2022-03-16"},{"lineNumber":486,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":487,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":488,"author":{"gitId":"warrencxw"},"content":"    void parseSessionId_delimiterExistsArgumentPositiveInteger_sessionId() {","lastModifiedDate":"2022-03-16"},{"lineNumber":489,"author":{"gitId":"warrencxw"},"content":"        String argumentWithDelimiterAndPositiveInt \u003d \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /co 15\";","lastModifiedDate":"2022-03-16"},{"lineNumber":490,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-16"},{"lineNumber":491,"author":{"gitId":"warrencxw"},"content":"            int output \u003d Parser.parseSessionId(argumentWithDelimiterAndPositiveInt);","lastModifiedDate":"2022-03-16"},{"lineNumber":492,"author":{"gitId":"warrencxw"},"content":"            assertEquals(3, output);","lastModifiedDate":"2022-03-16"},{"lineNumber":493,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-16"},{"lineNumber":494,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-16"},{"lineNumber":495,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":496,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":497,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":498,"author":{"gitId":"warrencxw"},"content":"    // parseActivityId()","lastModifiedDate":"2022-03-16"},{"lineNumber":499,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":500,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown","lastModifiedDate":"2022-03-25"},{"lineNumber":501,"author":{"gitId":"warrencxw"},"content":"     * when the Activity Id delimiter is not provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":502,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":503,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":504,"author":{"gitId":"warrencxw"},"content":"    void parseActivityId_missingDelimiter_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":505,"author":{"gitId":"warrencxw"},"content":"        String argumentWithoutActivityIdDelimiter \u003d \"/sid 1 aid 5\";","lastModifiedDate":"2022-03-16"},{"lineNumber":506,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-16"},{"lineNumber":507,"author":{"gitId":"warrencxw"},"content":"            int output \u003d Parser.parseActivityId(argumentWithoutActivityIdDelimiter);","lastModifiedDate":"2022-03-16"},{"lineNumber":508,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-16"},{"lineNumber":509,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-16"},{"lineNumber":510,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_DELIMITER_NOT_FOUND + ParserUtils.ACTIVITY_ID_DELIMITER;","lastModifiedDate":"2022-03-20"},{"lineNumber":511,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-16"},{"lineNumber":512,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":513,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":514,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":515,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":516,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the Activity Id delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":517,"author":{"gitId":"warrencxw"},"content":"     * is provided but no arguments following the delimiter are provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":518,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":519,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":520,"author":{"gitId":"warrencxw"},"content":"    void parseActivityId_delimiterExistsWithoutArgument_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":521,"author":{"gitId":"warrencxw"},"content":"        String argumentWithoutActivityIdArgument \u003d \"/sid 1 /aid \";","lastModifiedDate":"2022-03-16"},{"lineNumber":522,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-16"},{"lineNumber":523,"author":{"gitId":"warrencxw"},"content":"            int output \u003d Parser.parseActivityId(argumentWithoutActivityIdArgument);","lastModifiedDate":"2022-03-16"},{"lineNumber":524,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-16"},{"lineNumber":525,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-16"},{"lineNumber":526,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_MISSING_ARGUMENT + ParserUtils.ACTIVITY_ID_DELIMITER;","lastModifiedDate":"2022-03-20"},{"lineNumber":527,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-16"},{"lineNumber":528,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":529,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":530,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":531,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":532,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the Activity Id delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":533,"author":{"gitId":"warrencxw"},"content":"     * is provided but a non-integer argument is provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":534,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":535,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":536,"author":{"gitId":"warrencxw"},"content":"    void parseActivityId_delimiterExistsArgumentNotInteger_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":537,"author":{"gitId":"warrencxw"},"content":"        String argumentWithNonIntArgument \u003d \"/sid 1 /aid a5\";","lastModifiedDate":"2022-03-16"},{"lineNumber":538,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-16"},{"lineNumber":539,"author":{"gitId":"warrencxw"},"content":"            int output \u003d Parser.parseActivityId(argumentWithNonIntArgument);","lastModifiedDate":"2022-03-16"},{"lineNumber":540,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-16"},{"lineNumber":541,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-16"},{"lineNumber":542,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_NON_INTEGER_ARGUMENT + ParserUtils.ACTIVITY_ID_DELIMITER;","lastModifiedDate":"2022-03-20"},{"lineNumber":543,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-16"},{"lineNumber":544,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":545,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":546,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":547,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":548,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the Activity Id delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":549,"author":{"gitId":"warrencxw"},"content":"     * is provided but a negative integer argument is provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":550,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":551,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":552,"author":{"gitId":"warrencxw"},"content":"    void parseActivityId_delimiterExistsArgumentNegativeInteger_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":553,"author":{"gitId":"warrencxw"},"content":"        String argumentWithNegativeIntArgument \u003d \"/sid 1 /aid -5\";","lastModifiedDate":"2022-03-16"},{"lineNumber":554,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-16"},{"lineNumber":555,"author":{"gitId":"warrencxw"},"content":"            int output \u003d Parser.parseActivityId(argumentWithNegativeIntArgument);","lastModifiedDate":"2022-03-16"},{"lineNumber":556,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-16"},{"lineNumber":557,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-16"},{"lineNumber":558,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_ID_VALUE_NOT_POSITIVE;","lastModifiedDate":"2022-03-16"},{"lineNumber":559,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-16"},{"lineNumber":560,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":561,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":562,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-16"},{"lineNumber":563,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-16"},{"lineNumber":564,"author":{"gitId":"warrencxw"},"content":"     * Checks if an integer representing a activity unique identifier is properly returned when the","lastModifiedDate":"2022-03-16"},{"lineNumber":565,"author":{"gitId":"warrencxw"},"content":"     * Activity Id delimiter is provided along with a positive integer as the argument by the user.","lastModifiedDate":"2022-03-16"},{"lineNumber":566,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-16"},{"lineNumber":567,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-16"},{"lineNumber":568,"author":{"gitId":"warrencxw"},"content":"    void parseActivityId_delimiterExistsArgumentPositiveInteger_activityId() {","lastModifiedDate":"2022-03-16"},{"lineNumber":569,"author":{"gitId":"warrencxw"},"content":"        String argumentWithDelimiterAndPositiveInt \u003d \"/sid 1 /aid 5\";","lastModifiedDate":"2022-03-16"},{"lineNumber":570,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-16"},{"lineNumber":571,"author":{"gitId":"warrencxw"},"content":"            int output \u003d Parser.parseActivityId(argumentWithDelimiterAndPositiveInt);","lastModifiedDate":"2022-03-16"},{"lineNumber":572,"author":{"gitId":"warrencxw"},"content":"            assertEquals(5, output);","lastModifiedDate":"2022-03-16"},{"lineNumber":573,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-16"},{"lineNumber":574,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-16"},{"lineNumber":575,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-16"},{"lineNumber":576,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-16"},{"lineNumber":577,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":578,"author":{"gitId":"warrencxw"},"content":"    // parseLocalDate()","lastModifiedDate":"2022-03-17"},{"lineNumber":579,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":580,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown","lastModifiedDate":"2022-03-25"},{"lineNumber":581,"author":{"gitId":"warrencxw"},"content":"     * when the Date delimiter is not provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":582,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":583,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":584,"author":{"gitId":"warrencxw"},"content":"    void parseLocalDate_missingDelimiter_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":585,"author":{"gitId":"warrencxw"},"content":"        String argumentWithoutDateDelimiter \u003d \"/n Class outing d 23-02-2022 /pl Alice Alice Bob\";","lastModifiedDate":"2022-03-17"},{"lineNumber":586,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-17"},{"lineNumber":587,"author":{"gitId":"warrencxw"},"content":"            LocalDate output \u003d Parser.parseLocalDate(argumentWithoutDateDelimiter);","lastModifiedDate":"2022-03-17"},{"lineNumber":588,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-17"},{"lineNumber":589,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-17"},{"lineNumber":590,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_DELIMITER_NOT_FOUND + ParserUtils.DATE_DELIMITER;","lastModifiedDate":"2022-03-20"},{"lineNumber":591,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-17"},{"lineNumber":592,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":593,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":594,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":595,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":596,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the Date delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":597,"author":{"gitId":"warrencxw"},"content":"     * is provided but no arguments following the Date delimiter are provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":598,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":599,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":600,"author":{"gitId":"warrencxw"},"content":"    void parseLocalDate_delimiterExistsWithoutArgument_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":601,"author":{"gitId":"warrencxw"},"content":"        String argumentWithoutDateArgument \u003d \"/n Class outing /d /pl Alice Alice Bob\";","lastModifiedDate":"2022-03-17"},{"lineNumber":602,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-17"},{"lineNumber":603,"author":{"gitId":"warrencxw"},"content":"            LocalDate output \u003d Parser.parseLocalDate(argumentWithoutDateArgument);","lastModifiedDate":"2022-03-17"},{"lineNumber":604,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-17"},{"lineNumber":605,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-17"},{"lineNumber":606,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_MISSING_ARGUMENT + ParserUtils.DATE_DELIMITER;","lastModifiedDate":"2022-03-20"},{"lineNumber":607,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-17"},{"lineNumber":608,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":609,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":610,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":611,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":612,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the Date delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":613,"author":{"gitId":"warrencxw"},"content":"     * is provided by the user but the argument following the Date delimiter is a date of invalid formatting.","lastModifiedDate":"2022-03-25"},{"lineNumber":614,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":615,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":616,"author":{"gitId":"warrencxw"},"content":"    void parseLocalDate_invalidDateFormatting_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":617,"author":{"gitId":"warrencxw"},"content":"        String argumentWithInvalidDateFormatting \u003d \"/n Class outing /d 2022-03-04 /pl Alice Alice Bob\";","lastModifiedDate":"2022-03-17"},{"lineNumber":618,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-17"},{"lineNumber":619,"author":{"gitId":"warrencxw"},"content":"            LocalDate output \u003d Parser.parseLocalDate(argumentWithInvalidDateFormatting);","lastModifiedDate":"2022-03-17"},{"lineNumber":620,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-17"},{"lineNumber":621,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-17"},{"lineNumber":622,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_INVALID_DATE_FORMAT;","lastModifiedDate":"2022-03-17"},{"lineNumber":623,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-17"},{"lineNumber":624,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":625,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":626,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":627,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":628,"author":{"gitId":"warrencxw"},"content":"     * Checks if a LocalDate object containing the specified date in correct formatting is properly returned","lastModifiedDate":"2022-03-17"},{"lineNumber":629,"author":{"gitId":"warrencxw"},"content":"     * when the Date delimiter and arguments following it are properly provided by the user.","lastModifiedDate":"2022-03-17"},{"lineNumber":630,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":631,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":632,"author":{"gitId":"warrencxw"},"content":"    void parseLocalDate_validDateFormatting_validDate() {","lastModifiedDate":"2022-03-17"},{"lineNumber":633,"author":{"gitId":"warrencxw"},"content":"        String argumentWithValidDateFormatting \u003d \"/n Class outing /d 23-02-2022 /pl Alice Alice Bob\";","lastModifiedDate":"2022-03-17"},{"lineNumber":634,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-17"},{"lineNumber":635,"author":{"gitId":"warrencxw"},"content":"            LocalDate output \u003d Parser.parseLocalDate(argumentWithValidDateFormatting);","lastModifiedDate":"2022-03-17"},{"lineNumber":636,"author":{"gitId":"warrencxw"},"content":"            assertEquals(23, output.getDayOfMonth());","lastModifiedDate":"2022-03-17"},{"lineNumber":637,"author":{"gitId":"warrencxw"},"content":"            assertEquals(2, output.getMonthValue());","lastModifiedDate":"2022-03-17"},{"lineNumber":638,"author":{"gitId":"warrencxw"},"content":"            assertEquals(2022, output.getYear());","lastModifiedDate":"2022-03-17"},{"lineNumber":639,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-17"},{"lineNumber":640,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-17"},{"lineNumber":641,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":642,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":643,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":644,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":645,"author":{"gitId":"warrencxw"},"content":"     * Checks if a LocalDate object containing the current date is properly returned","lastModifiedDate":"2022-03-17"},{"lineNumber":646,"author":{"gitId":"warrencxw"},"content":"     * when the Date delimiter and \"today\" as argument are properly provided by the user.","lastModifiedDate":"2022-03-17"},{"lineNumber":647,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":648,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":649,"author":{"gitId":"warrencxw"},"content":"    void parseLocalDate_todayAsInput_validDate() {","lastModifiedDate":"2022-03-17"},{"lineNumber":650,"author":{"gitId":"warrencxw"},"content":"        String argumentWithTodayAsDate \u003d \"/n Class outing /d today /pl Alice Alice Bob\";","lastModifiedDate":"2022-03-17"},{"lineNumber":651,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-17"},{"lineNumber":652,"author":{"gitId":"warrencxw"},"content":"            LocalDate output \u003d Parser.parseLocalDate(argumentWithTodayAsDate);","lastModifiedDate":"2022-03-17"},{"lineNumber":653,"author":{"gitId":"warrencxw"},"content":"            LocalDate today \u003d LocalDate.now();","lastModifiedDate":"2022-03-17"},{"lineNumber":654,"author":{"gitId":"warrencxw"},"content":"            assertEquals(today, output);","lastModifiedDate":"2022-03-17"},{"lineNumber":655,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-17"},{"lineNumber":656,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-17"},{"lineNumber":657,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":658,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":659,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":660,"author":{"gitId":"warrencxw"},"content":"    // parseTotalCost()","lastModifiedDate":"2022-03-17"},{"lineNumber":661,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":662,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown","lastModifiedDate":"2022-03-25"},{"lineNumber":663,"author":{"gitId":"warrencxw"},"content":"     * when the Total cost delimiter is not provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":664,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":665,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":666,"author":{"gitId":"warrencxw"},"content":"    void parseTotalCost_missingDelimiter_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":667,"author":{"gitId":"warrencxw"},"content":"        String argumentWithoutTotalCostDelimiter \u003d \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie co 15\";","lastModifiedDate":"2022-03-17"},{"lineNumber":668,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-17"},{"lineNumber":669,"author":{"gitId":"warrencxw"},"content":"            double output \u003d Parser.parseTotalCost(argumentWithoutTotalCostDelimiter);","lastModifiedDate":"2022-03-17"},{"lineNumber":670,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-17"},{"lineNumber":671,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-17"},{"lineNumber":672,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_DELIMITER_NOT_FOUND + ParserUtils.TOTAL_COST_DELIMITER;","lastModifiedDate":"2022-03-20"},{"lineNumber":673,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-17"},{"lineNumber":674,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":675,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":676,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":677,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":678,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the Total cost delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":679,"author":{"gitId":"warrencxw"},"content":"     * is provided but no arguments following the Total cost delimiter are provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":680,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":681,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":682,"author":{"gitId":"warrencxw"},"content":"    void parseTotalCost_delimiterExistsWithoutArgument_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":683,"author":{"gitId":"warrencxw"},"content":"        String argumentWithoutTotalCostArgument \u003d \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /co \";","lastModifiedDate":"2022-03-17"},{"lineNumber":684,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-17"},{"lineNumber":685,"author":{"gitId":"warrencxw"},"content":"            double output \u003d Parser.parseTotalCost(argumentWithoutTotalCostArgument);","lastModifiedDate":"2022-03-17"},{"lineNumber":686,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-17"},{"lineNumber":687,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-17"},{"lineNumber":688,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_MISSING_ARGUMENT + ParserUtils.TOTAL_COST_DELIMITER;","lastModifiedDate":"2022-03-20"},{"lineNumber":689,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-17"},{"lineNumber":690,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":691,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":692,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":693,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":694,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the Total cost delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":695,"author":{"gitId":"warrencxw"},"content":"     * is provided by the user but the argument following the Total cost delimiter is non-numeric.","lastModifiedDate":"2022-03-25"},{"lineNumber":696,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":697,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":698,"author":{"gitId":"warrencxw"},"content":"    void parseTotalCost_delimiterExistsArgumentNotNumeric_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":699,"author":{"gitId":"warrencxw"},"content":"        String argumentWithNonNumericArgument \u003d \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /co apple\";","lastModifiedDate":"2022-03-17"},{"lineNumber":700,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-17"},{"lineNumber":701,"author":{"gitId":"warrencxw"},"content":"            double output \u003d Parser.parseTotalCost(argumentWithNonNumericArgument);","lastModifiedDate":"2022-03-17"},{"lineNumber":702,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-17"},{"lineNumber":703,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-17"},{"lineNumber":704,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_NON_MONETARY_VALUE_ARGUMENT + ParserUtils.TOTAL_COST_DELIMITER;","lastModifiedDate":"2022-03-20"},{"lineNumber":705,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-17"},{"lineNumber":706,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":707,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":708,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":709,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":710,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the Total cost delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":711,"author":{"gitId":"warrencxw"},"content":"     * is provided by the user but the argument following the Total cost delimiter is a negative numeric value.","lastModifiedDate":"2022-03-25"},{"lineNumber":712,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":713,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":714,"author":{"gitId":"warrencxw"},"content":"    void parseTotalCost_delimiterExistsArgumentNegative_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":715,"author":{"gitId":"warrencxw"},"content":"        String argumentWithNegativeArgument \u003d \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /co -1.24\";","lastModifiedDate":"2022-03-17"},{"lineNumber":716,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-17"},{"lineNumber":717,"author":{"gitId":"warrencxw"},"content":"            double output \u003d Parser.parseTotalCost(argumentWithNegativeArgument);","lastModifiedDate":"2022-03-17"},{"lineNumber":718,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-17"},{"lineNumber":719,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-17"},{"lineNumber":720,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_COST_NOT_POSITIVE;","lastModifiedDate":"2022-03-17"},{"lineNumber":721,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-17"},{"lineNumber":722,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":723,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":724,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":725,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":726,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the Total cost delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":727,"author":{"gitId":"warrencxw"},"content":"     * and a positive numeric value are provided as arguments, but the numeric value has more than two decimal places.","lastModifiedDate":"2022-03-25"},{"lineNumber":728,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":729,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":730,"author":{"gitId":"warrencxw"},"content":"    void parseTotalCost_delimiterExistsArgumentPositiveMoreThanTwoDecimalPlaces_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":731,"author":{"gitId":"warrencxw"},"content":"        String argumentWithPositiveArgumentMoreThan2DP \u003d \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /co 1.2444\";","lastModifiedDate":"2022-03-17"},{"lineNumber":732,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-17"},{"lineNumber":733,"author":{"gitId":"warrencxw"},"content":"            double output \u003d Parser.parseTotalCost(argumentWithPositiveArgumentMoreThan2DP);","lastModifiedDate":"2022-03-17"},{"lineNumber":734,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-17"},{"lineNumber":735,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-17"},{"lineNumber":736,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_COST_NOT_TWO_DP;","lastModifiedDate":"2022-03-17"},{"lineNumber":737,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-17"},{"lineNumber":738,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":739,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":740,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":741,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":742,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the Total cost delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":743,"author":{"gitId":"warrencxw"},"content":"     * and a positive numeric value are provided as arguments, but the numeric value has more than twelve digits","lastModifiedDate":"2022-03-25"},{"lineNumber":744,"author":{"gitId":"warrencxw"},"content":"     * before the decimal point.","lastModifiedDate":"2022-03-25"},{"lineNumber":745,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":746,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":747,"author":{"gitId":"warrencxw"},"content":"    void parseTotalCost_delimiterExistsArgumentPositiveMoreThan12DigitsBeforeDP_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":748,"author":{"gitId":"warrencxw"},"content":"        String argumentWithPositiveArgumentMoreThan12DigitsBeforeDP \u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":749,"author":{"gitId":"warrencxw"},"content":"                \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /co 1234567890123.1\";","lastModifiedDate":"2022-03-17"},{"lineNumber":750,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-17"},{"lineNumber":751,"author":{"gitId":"warrencxw"},"content":"            double output \u003d Parser.parseTotalCost(argumentWithPositiveArgumentMoreThan12DigitsBeforeDP);","lastModifiedDate":"2022-03-17"},{"lineNumber":752,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-17"},{"lineNumber":753,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-17"},{"lineNumber":754,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_COST_MORE_THAN_TWELVE_DIGITS_BEFORE_DP;","lastModifiedDate":"2022-03-17"},{"lineNumber":755,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-17"},{"lineNumber":756,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":757,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":758,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":759,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":760,"author":{"gitId":"warrencxw"},"content":"     * Checks if a double containing the total cost as stated is properly returned when the Total cost delimiter","lastModifiedDate":"2022-03-17"},{"lineNumber":761,"author":{"gitId":"warrencxw"},"content":"     * and a valid positive numeric value as argument are properly provided by the user.","lastModifiedDate":"2022-03-17"},{"lineNumber":762,"author":{"gitId":"warrencxw"},"content":"     * A valid positive numeric value has at most twelve digits before the decimal point and at most 2 decimal places.","lastModifiedDate":"2022-03-17"},{"lineNumber":763,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":764,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":765,"author":{"gitId":"warrencxw"},"content":"    void parseTotalCost_delimiterExistsArgumentValid_totalCost() {","lastModifiedDate":"2022-03-17"},{"lineNumber":766,"author":{"gitId":"warrencxw"},"content":"        // Testing numerical limits","lastModifiedDate":"2022-03-17"},{"lineNumber":767,"author":{"gitId":"warrencxw"},"content":"        String argumentWithDelimiterAndValidArgumentTestLimit \u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":768,"author":{"gitId":"warrencxw"},"content":"                \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /co 123456789012.99\";","lastModifiedDate":"2022-03-17"},{"lineNumber":769,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-17"},{"lineNumber":770,"author":{"gitId":"warrencxw"},"content":"            double output \u003d Parser.parseTotalCost(argumentWithDelimiterAndValidArgumentTestLimit);","lastModifiedDate":"2022-03-17"},{"lineNumber":771,"author":{"gitId":"warrencxw"},"content":"            assertEquals(123456789012.99, output);","lastModifiedDate":"2022-03-17"},{"lineNumber":772,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-17"},{"lineNumber":773,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-17"},{"lineNumber":774,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":775,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":776,"author":{"gitId":"warrencxw"},"content":"        // Testing with no decimal places","lastModifiedDate":"2022-03-17"},{"lineNumber":777,"author":{"gitId":"warrencxw"},"content":"        String argumentWithDelimiterAndValidArgumentTestNoDecimal \u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":778,"author":{"gitId":"warrencxw"},"content":"                \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /co 123456789012\";","lastModifiedDate":"2022-03-17"},{"lineNumber":779,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-17"},{"lineNumber":780,"author":{"gitId":"warrencxw"},"content":"            double output \u003d Parser.parseTotalCost(argumentWithDelimiterAndValidArgumentTestNoDecimal);","lastModifiedDate":"2022-03-17"},{"lineNumber":781,"author":{"gitId":"warrencxw"},"content":"            assertEquals(123456789012.0, output);","lastModifiedDate":"2022-03-17"},{"lineNumber":782,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-17"},{"lineNumber":783,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-17"},{"lineNumber":784,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":785,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":786,"author":{"gitId":"warrencxw"},"content":"        // Testing with commonly used values","lastModifiedDate":"2022-03-17"},{"lineNumber":787,"author":{"gitId":"warrencxw"},"content":"        String argumentWithDelimiterAndValidArgumentTestNormal \u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":788,"author":{"gitId":"warrencxw"},"content":"                \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /co 10.70\";","lastModifiedDate":"2022-03-17"},{"lineNumber":789,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-17"},{"lineNumber":790,"author":{"gitId":"warrencxw"},"content":"            double output \u003d Parser.parseTotalCost(argumentWithDelimiterAndValidArgumentTestNormal);","lastModifiedDate":"2022-03-17"},{"lineNumber":791,"author":{"gitId":"warrencxw"},"content":"            assertEquals(10.70, output);","lastModifiedDate":"2022-03-17"},{"lineNumber":792,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-17"},{"lineNumber":793,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-17"},{"lineNumber":794,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":795,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":796,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":797,"author":{"gitId":"warrencxw"},"content":"    // parseCostList()","lastModifiedDate":"2022-03-17"},{"lineNumber":798,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":799,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown","lastModifiedDate":"2022-03-25"},{"lineNumber":800,"author":{"gitId":"warrencxw"},"content":"     * when the Cost list delimiter is not provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":801,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":802,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":803,"author":{"gitId":"warrencxw"},"content":"    void parseCostList_missingDelimiter_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":804,"author":{"gitId":"warrencxw"},"content":"        String argumentWithoutCostListDelimiter \u003d \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie cl 10 10 10\";","lastModifiedDate":"2022-03-17"},{"lineNumber":805,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-17"},{"lineNumber":806,"author":{"gitId":"warrencxw"},"content":"            double[] output \u003d Parser.parseCostList(argumentWithoutCostListDelimiter);","lastModifiedDate":"2022-03-17"},{"lineNumber":807,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-17"},{"lineNumber":808,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-17"},{"lineNumber":809,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_DELIMITER_NOT_FOUND + ParserUtils.COST_LIST_DELIMITER;","lastModifiedDate":"2022-03-20"},{"lineNumber":810,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-17"},{"lineNumber":811,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":812,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":813,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":814,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":815,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the Cost list delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":816,"author":{"gitId":"warrencxw"},"content":"     * is provided but no arguments following the Cost list delimiter are provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":817,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":818,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":819,"author":{"gitId":"warrencxw"},"content":"    void parseCostList_delimiterExistsWithoutArgument_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":820,"author":{"gitId":"warrencxw"},"content":"        String argumentWithoutCostListArguments \u003d \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /cl \";","lastModifiedDate":"2022-03-17"},{"lineNumber":821,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-17"},{"lineNumber":822,"author":{"gitId":"warrencxw"},"content":"            double[] output \u003d Parser.parseCostList(argumentWithoutCostListArguments);","lastModifiedDate":"2022-03-17"},{"lineNumber":823,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-17"},{"lineNumber":824,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-17"},{"lineNumber":825,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_MISSING_ARGUMENT + ParserUtils.COST_LIST_DELIMITER;","lastModifiedDate":"2022-03-20"},{"lineNumber":826,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-17"},{"lineNumber":827,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":828,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":829,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":830,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":831,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the Cost list delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":832,"author":{"gitId":"warrencxw"},"content":"     * is provided by the user but the arguments following the Cost list delimiter are non-numeric.","lastModifiedDate":"2022-03-25"},{"lineNumber":833,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":834,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":835,"author":{"gitId":"warrencxw"},"content":"    void parseCostList_delimiterExistsArgumentsNotNumeric_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":836,"author":{"gitId":"warrencxw"},"content":"        String argumentWithNonNumericArguments \u003d \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /cl apple orange\";","lastModifiedDate":"2022-03-17"},{"lineNumber":837,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-17"},{"lineNumber":838,"author":{"gitId":"warrencxw"},"content":"            double[] output \u003d Parser.parseCostList(argumentWithNonNumericArguments);","lastModifiedDate":"2022-03-17"},{"lineNumber":839,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-17"},{"lineNumber":840,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-17"},{"lineNumber":841,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_NON_MONETARY_VALUE_ARGUMENT + ParserUtils.COST_LIST_DELIMITER;","lastModifiedDate":"2022-03-20"},{"lineNumber":842,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-17"},{"lineNumber":843,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":844,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":845,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":846,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":847,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the Cost list delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":848,"author":{"gitId":"warrencxw"},"content":"     * is provided by the user but the argument following the Cost list delimiter contain negative numeric values.","lastModifiedDate":"2022-03-25"},{"lineNumber":849,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":850,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":851,"author":{"gitId":"warrencxw"},"content":"    void parseCostList_delimiterExistsCostsNegative_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":852,"author":{"gitId":"warrencxw"},"content":"        String argumentWithNegativeArguments \u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":853,"author":{"gitId":"warrencxw"},"content":"                \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /cl 10 -10 10\";","lastModifiedDate":"2022-03-17"},{"lineNumber":854,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-17"},{"lineNumber":855,"author":{"gitId":"warrencxw"},"content":"            double[] output \u003d Parser.parseCostList(argumentWithNegativeArguments);","lastModifiedDate":"2022-03-17"},{"lineNumber":856,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-17"},{"lineNumber":857,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-17"},{"lineNumber":858,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_COST_NOT_POSITIVE;","lastModifiedDate":"2022-03-17"},{"lineNumber":859,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-17"},{"lineNumber":860,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":861,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":862,"author":{"gitId":"warrencxw"},"content":"    ","lastModifiedDate":"2022-03-17"},{"lineNumber":863,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":864,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the Cost list delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":865,"author":{"gitId":"warrencxw"},"content":"     * and positive numeric values are provided as arguments, but some numeric values has more than two decimal places.","lastModifiedDate":"2022-03-25"},{"lineNumber":866,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":867,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":868,"author":{"gitId":"warrencxw"},"content":"    void parseCostList_delimiterExistsArgumentPositiveMoreThanTwoDecimalPlaces_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":869,"author":{"gitId":"warrencxw"},"content":"        String argumentWithPositiveArgumentsMoreThan2DP \u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":870,"author":{"gitId":"warrencxw"},"content":"                \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /cl 1.2444 15.30 20\";","lastModifiedDate":"2022-03-17"},{"lineNumber":871,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-17"},{"lineNumber":872,"author":{"gitId":"warrencxw"},"content":"            double[] output \u003d Parser.parseCostList(argumentWithPositiveArgumentsMoreThan2DP);","lastModifiedDate":"2022-03-17"},{"lineNumber":873,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-17"},{"lineNumber":874,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-17"},{"lineNumber":875,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_COST_NOT_TWO_DP;","lastModifiedDate":"2022-03-17"},{"lineNumber":876,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-17"},{"lineNumber":877,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":878,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":879,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":880,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":881,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the Cost list delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":882,"author":{"gitId":"warrencxw"},"content":"     * and positive numeric values are provided as arguments, but some numeric values has more than twelve digits","lastModifiedDate":"2022-03-25"},{"lineNumber":883,"author":{"gitId":"warrencxw"},"content":"     * before the decimal point.","lastModifiedDate":"2022-03-25"},{"lineNumber":884,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":885,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":886,"author":{"gitId":"warrencxw"},"content":"    void parseCostList_delimiterExistsArgumentPositiveMoreThan12DigitsBeforeDP_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":887,"author":{"gitId":"warrencxw"},"content":"        String argumentWithPositiveArgumentsMoreThan12DigitsBeforeDP \u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":888,"author":{"gitId":"warrencxw"},"content":"                \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /cl 1234567890123.1 15.30 20\";","lastModifiedDate":"2022-03-17"},{"lineNumber":889,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-17"},{"lineNumber":890,"author":{"gitId":"warrencxw"},"content":"            double[] output \u003d Parser.parseCostList(argumentWithPositiveArgumentsMoreThan12DigitsBeforeDP);","lastModifiedDate":"2022-03-17"},{"lineNumber":891,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-17"},{"lineNumber":892,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-17"},{"lineNumber":893,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_COST_MORE_THAN_TWELVE_DIGITS_BEFORE_DP;","lastModifiedDate":"2022-03-17"},{"lineNumber":894,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-17"},{"lineNumber":895,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":896,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":897,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-17"},{"lineNumber":898,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-17"},{"lineNumber":899,"author":{"gitId":"warrencxw"},"content":"     * Checks if a double array object containing individual cost as stated is properly returned when the ","lastModifiedDate":"2022-03-17"},{"lineNumber":900,"author":{"gitId":"warrencxw"},"content":"     * Cost list delimiter and valid positive numeric values as arguments are properly provided by the user.","lastModifiedDate":"2022-03-17"},{"lineNumber":901,"author":{"gitId":"warrencxw"},"content":"     * A valid positive numeric value has at most twelve digits before the decimal point and at most 2 decimal places.","lastModifiedDate":"2022-03-17"},{"lineNumber":902,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-17"},{"lineNumber":903,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-17"},{"lineNumber":904,"author":{"gitId":"warrencxw"},"content":"    void parseCostList_delimiterExistsArgumentValid_doubleArrayContainingCostList() {","lastModifiedDate":"2022-03-17"},{"lineNumber":905,"author":{"gitId":"warrencxw"},"content":"        String argumentWithDelimiterAndValidArguments \u003d","lastModifiedDate":"2022-03-17"},{"lineNumber":906,"author":{"gitId":"warrencxw"},"content":"                \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /cl 123456789012.34 123456789012 10.70\";","lastModifiedDate":"2022-03-17"},{"lineNumber":907,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-17"},{"lineNumber":908,"author":{"gitId":"warrencxw"},"content":"            double[] output \u003d Parser.parseCostList(argumentWithDelimiterAndValidArguments);","lastModifiedDate":"2022-03-17"},{"lineNumber":909,"author":{"gitId":"warrencxw"},"content":"            assertEquals(3, output.length);","lastModifiedDate":"2022-03-17"},{"lineNumber":910,"author":{"gitId":"warrencxw"},"content":"            assertEquals(123456789012.34, output[0]);","lastModifiedDate":"2022-03-17"},{"lineNumber":911,"author":{"gitId":"warrencxw"},"content":"            assertEquals(123456789012.0, output[1]);","lastModifiedDate":"2022-03-17"},{"lineNumber":912,"author":{"gitId":"warrencxw"},"content":"            assertEquals(10.70, output[2]);","lastModifiedDate":"2022-03-17"},{"lineNumber":913,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-17"},{"lineNumber":914,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-17"},{"lineNumber":915,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-17"},{"lineNumber":916,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-17"},{"lineNumber":917,"author":{"gitId":"warrencxw"},"content":"    ","lastModifiedDate":"2022-03-18"},{"lineNumber":918,"author":{"gitId":"warrencxw"},"content":"    // parseGst()","lastModifiedDate":"2022-03-18"},{"lineNumber":919,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-18"},{"lineNumber":920,"author":{"gitId":"warrencxw"},"content":"     * Checks if a double representing a GST percent value of 0 is properly returned ","lastModifiedDate":"2022-03-21"},{"lineNumber":921,"author":{"gitId":"warrencxw"},"content":"     * when the GST delimiter is not provided by the user.","lastModifiedDate":"2022-03-18"},{"lineNumber":922,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-18"},{"lineNumber":923,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-18"},{"lineNumber":924,"author":{"gitId":"warrencxw"},"content":"    void parseGst_missingDelimiter_gstZeroPercent() {","lastModifiedDate":"2022-03-18"},{"lineNumber":925,"author":{"gitId":"warrencxw"},"content":"        String argumentWithoutGstDelimiter \u003d","lastModifiedDate":"2022-03-18"},{"lineNumber":926,"author":{"gitId":"warrencxw"},"content":"                \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /co 15\";","lastModifiedDate":"2022-03-18"},{"lineNumber":927,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-18"},{"lineNumber":928,"author":{"gitId":"warrencxw"},"content":"            double output \u003d Parser.parseGst(argumentWithoutGstDelimiter);","lastModifiedDate":"2022-03-21"},{"lineNumber":929,"author":{"gitId":"warrencxw"},"content":"            assertEquals(0, output);","lastModifiedDate":"2022-03-18"},{"lineNumber":930,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-18"},{"lineNumber":931,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-18"},{"lineNumber":932,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-18"},{"lineNumber":933,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":934,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":935,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-18"},{"lineNumber":936,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the GST delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":937,"author":{"gitId":"warrencxw"},"content":"     * is provided but no arguments following the GST delimiter are provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":938,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-18"},{"lineNumber":939,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-18"},{"lineNumber":940,"author":{"gitId":"warrencxw"},"content":"    void parseGst_delimiterExistsWithoutArgument_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":941,"author":{"gitId":"warrencxw"},"content":"        String argumentWithoutGstArgument \u003d","lastModifiedDate":"2022-03-18"},{"lineNumber":942,"author":{"gitId":"warrencxw"},"content":"                \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /co 15 /gst /sc 10\";","lastModifiedDate":"2022-03-18"},{"lineNumber":943,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-18"},{"lineNumber":944,"author":{"gitId":"warrencxw"},"content":"            double output \u003d Parser.parseGst(argumentWithoutGstArgument);","lastModifiedDate":"2022-03-21"},{"lineNumber":945,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-18"},{"lineNumber":946,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-18"},{"lineNumber":947,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_MISSING_ARGUMENT + ParserUtils.GST_DELIMITER;","lastModifiedDate":"2022-03-20"},{"lineNumber":948,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-18"},{"lineNumber":949,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-18"},{"lineNumber":950,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":951,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":952,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-18"},{"lineNumber":953,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the GST delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":954,"author":{"gitId":"warrencxw"},"content":"     * is provided by the user but the argument following the GST delimiter cannot be parsed as a double.","lastModifiedDate":"2022-03-25"},{"lineNumber":955,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-18"},{"lineNumber":956,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-18"},{"lineNumber":957,"author":{"gitId":"warrencxw"},"content":"    void parseGst_delimiterExistsArgumentNotDouble_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":958,"author":{"gitId":"warrencxw"},"content":"        String argumentWithNonDoubleArgument \u003d","lastModifiedDate":"2022-03-21"},{"lineNumber":959,"author":{"gitId":"warrencxw"},"content":"                \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /co 15 /gst apple /sc 10\";","lastModifiedDate":"2022-03-18"},{"lineNumber":960,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-18"},{"lineNumber":961,"author":{"gitId":"warrencxw"},"content":"            double output \u003d Parser.parseGst(argumentWithNonDoubleArgument);","lastModifiedDate":"2022-03-21"},{"lineNumber":962,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-18"},{"lineNumber":963,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-18"},{"lineNumber":964,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_NON_PERCENTAGE_ARGUMENT + ParserUtils.GST_DELIMITER;","lastModifiedDate":"2022-03-21"},{"lineNumber":965,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-18"},{"lineNumber":966,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-18"},{"lineNumber":967,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":968,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":969,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-18"},{"lineNumber":970,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the GST delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":971,"author":{"gitId":"warrencxw"},"content":"     * and positive numeric value are provided as arguments, but the parsed double has more than three digits","lastModifiedDate":"2022-03-25"},{"lineNumber":972,"author":{"gitId":"warrencxw"},"content":"     * before the decimal point.","lastModifiedDate":"2022-03-25"},{"lineNumber":973,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-21"},{"lineNumber":974,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-21"},{"lineNumber":975,"author":{"gitId":"warrencxw"},"content":"    void parseGst_delimiterExistsArgumentDoubleWithMoreThan3DigitsBeforeDP_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":976,"author":{"gitId":"warrencxw"},"content":"        String argumentWithDoubleArgumentMoreThan3DigitsBeforeDP \u003d","lastModifiedDate":"2022-03-21"},{"lineNumber":977,"author":{"gitId":"warrencxw"},"content":"                \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /co 15 /gst 1000 /sc 10\";","lastModifiedDate":"2022-03-21"},{"lineNumber":978,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-21"},{"lineNumber":979,"author":{"gitId":"warrencxw"},"content":"            double output \u003d Parser.parseGst(argumentWithDoubleArgumentMoreThan3DigitsBeforeDP);","lastModifiedDate":"2022-03-21"},{"lineNumber":980,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-21"},{"lineNumber":981,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-21"},{"lineNumber":982,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_PERCENTAGE_MORE_THAN_THREE_DIGITS_BEFORE_DP;","lastModifiedDate":"2022-03-21"},{"lineNumber":983,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-21"},{"lineNumber":984,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-21"},{"lineNumber":985,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-21"},{"lineNumber":986,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":987,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-21"},{"lineNumber":988,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the GST delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":989,"author":{"gitId":"warrencxw"},"content":"     * and positive numeric value are provided as arguments, but the parsed double has more than two decimal places.","lastModifiedDate":"2022-03-25"},{"lineNumber":990,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-21"},{"lineNumber":991,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-21"},{"lineNumber":992,"author":{"gitId":"warrencxw"},"content":"    void parseGst_delimiterExistsArgumentDoubleWithMoreThan2DP_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":993,"author":{"gitId":"warrencxw"},"content":"        String argumentWithDoubleArgumentMoreThan2DP \u003d","lastModifiedDate":"2022-03-21"},{"lineNumber":994,"author":{"gitId":"warrencxw"},"content":"                \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /co 15 /gst 10.123 /sc 10\";","lastModifiedDate":"2022-03-21"},{"lineNumber":995,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-21"},{"lineNumber":996,"author":{"gitId":"warrencxw"},"content":"            double output \u003d Parser.parseGst(argumentWithDoubleArgumentMoreThan2DP);","lastModifiedDate":"2022-03-21"},{"lineNumber":997,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-21"},{"lineNumber":998,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-21"},{"lineNumber":999,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_PERCENTAGE_NOT_TWO_DP;","lastModifiedDate":"2022-03-21"},{"lineNumber":1000,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-21"},{"lineNumber":1001,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-21"},{"lineNumber":1002,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-21"},{"lineNumber":1003,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":1004,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-21"},{"lineNumber":1005,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the GST delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":1006,"author":{"gitId":"warrencxw"},"content":"     * and a double representing the GST percentage is provided by the user but the double is not within","lastModifiedDate":"2022-03-25"},{"lineNumber":1007,"author":{"gitId":"warrencxw"},"content":"     * the valid range of [0, 100].","lastModifiedDate":"2022-03-25"},{"lineNumber":1008,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-18"},{"lineNumber":1009,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-18"},{"lineNumber":1010,"author":{"gitId":"warrencxw"},"content":"    void parseGst_delimiterExistsArgumentDoubleButNotInRange_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":1011,"author":{"gitId":"warrencxw"},"content":"        // Test values less than 0, negative values","lastModifiedDate":"2022-03-18"},{"lineNumber":1012,"author":{"gitId":"warrencxw"},"content":"        String argumentWithDoubleArgumentUnderRange \u003d","lastModifiedDate":"2022-03-21"},{"lineNumber":1013,"author":{"gitId":"warrencxw"},"content":"                \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /co 15 /gst -1 /sc 10\";","lastModifiedDate":"2022-03-18"},{"lineNumber":1014,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-18"},{"lineNumber":1015,"author":{"gitId":"warrencxw"},"content":"            double output \u003d Parser.parseGst(argumentWithDoubleArgumentUnderRange);","lastModifiedDate":"2022-03-21"},{"lineNumber":1016,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-18"},{"lineNumber":1017,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-18"},{"lineNumber":1018,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_PERCENTAGE_NEGATIVE;","lastModifiedDate":"2022-03-21"},{"lineNumber":1019,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-18"},{"lineNumber":1020,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-18"},{"lineNumber":1021,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":1022,"author":{"gitId":"warrencxw"},"content":"        // Test values greater than 100","lastModifiedDate":"2022-03-18"},{"lineNumber":1023,"author":{"gitId":"warrencxw"},"content":"        String argumentWithDoubleArgumentAboveRange \u003d","lastModifiedDate":"2022-03-21"},{"lineNumber":1024,"author":{"gitId":"warrencxw"},"content":"                \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /co 15 /gst 101 /sc 10\";","lastModifiedDate":"2022-03-18"},{"lineNumber":1025,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-18"},{"lineNumber":1026,"author":{"gitId":"warrencxw"},"content":"            double output \u003d Parser.parseGst(argumentWithDoubleArgumentAboveRange);","lastModifiedDate":"2022-03-21"},{"lineNumber":1027,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-21"},{"lineNumber":1028,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-21"},{"lineNumber":1029,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_INVALID_GST_SURCHARGE + ParserUtils.GST_DELIMITER;","lastModifiedDate":"2022-03-21"},{"lineNumber":1030,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-21"},{"lineNumber":1031,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-21"},{"lineNumber":1032,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-21"},{"lineNumber":1033,"author":{"gitId":"warrencxw"},"content":"        // Test double values near 100","lastModifiedDate":"2022-03-21"},{"lineNumber":1034,"author":{"gitId":"warrencxw"},"content":"        String argumentWithDoubleArgumentNearRange \u003d","lastModifiedDate":"2022-03-21"},{"lineNumber":1035,"author":{"gitId":"warrencxw"},"content":"                \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /co 15 /gst 100.01 /sc 10\";","lastModifiedDate":"2022-03-21"},{"lineNumber":1036,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-21"},{"lineNumber":1037,"author":{"gitId":"warrencxw"},"content":"            double output \u003d Parser.parseGst(argumentWithDoubleArgumentNearRange);","lastModifiedDate":"2022-03-21"},{"lineNumber":1038,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-18"},{"lineNumber":1039,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-18"},{"lineNumber":1040,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_INVALID_GST_SURCHARGE + ParserUtils.GST_DELIMITER;","lastModifiedDate":"2022-03-20"},{"lineNumber":1041,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-18"},{"lineNumber":1042,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-18"},{"lineNumber":1043,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":1044,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":1045,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-18"},{"lineNumber":1046,"author":{"gitId":"warrencxw"},"content":"     * Checks if a double representing a GST percent value is properly returned when the GST delimiter and","lastModifiedDate":"2022-03-21"},{"lineNumber":1047,"author":{"gitId":"warrencxw"},"content":"     * an argument with a double value within the valid range of [0, 100] is provided by the user.","lastModifiedDate":"2022-03-21"},{"lineNumber":1048,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-18"},{"lineNumber":1049,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-18"},{"lineNumber":1050,"author":{"gitId":"warrencxw"},"content":"    void parseGst_delimiterExistsArgumentDoubleWithinRange_gstPercentage() {","lastModifiedDate":"2022-03-21"},{"lineNumber":1051,"author":{"gitId":"warrencxw"},"content":"        // Test regular values","lastModifiedDate":"2022-03-21"},{"lineNumber":1052,"author":{"gitId":"warrencxw"},"content":"        String argumentWithDoubleArgumentInRange \u003d","lastModifiedDate":"2022-03-21"},{"lineNumber":1053,"author":{"gitId":"warrencxw"},"content":"                \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /co 15 /gst 7 /sc 10\";","lastModifiedDate":"2022-03-18"},{"lineNumber":1054,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-18"},{"lineNumber":1055,"author":{"gitId":"warrencxw"},"content":"            double output \u003d Parser.parseGst(argumentWithDoubleArgumentInRange);","lastModifiedDate":"2022-03-21"},{"lineNumber":1056,"author":{"gitId":"warrencxw"},"content":"            assertEquals(7, output);","lastModifiedDate":"2022-03-18"},{"lineNumber":1057,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-18"},{"lineNumber":1058,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-18"},{"lineNumber":1059,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-18"},{"lineNumber":1060,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-21"},{"lineNumber":1061,"author":{"gitId":"warrencxw"},"content":"        // Test minimum allowed value","lastModifiedDate":"2022-03-21"},{"lineNumber":1062,"author":{"gitId":"warrencxw"},"content":"        String argumentWithMinPercentageArgument \u003d ","lastModifiedDate":"2022-03-21"},{"lineNumber":1063,"author":{"gitId":"warrencxw"},"content":"                \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /co 15 /gst 0 /sc 10\";","lastModifiedDate":"2022-03-21"},{"lineNumber":1064,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-21"},{"lineNumber":1065,"author":{"gitId":"warrencxw"},"content":"            double output \u003d Parser.parseGst(argumentWithMinPercentageArgument);","lastModifiedDate":"2022-03-21"},{"lineNumber":1066,"author":{"gitId":"warrencxw"},"content":"            assertEquals(Parser.MINIMUM_SURCHARGE_PERCENT, output);","lastModifiedDate":"2022-03-21"},{"lineNumber":1067,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-21"},{"lineNumber":1068,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-21"},{"lineNumber":1069,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-21"},{"lineNumber":1070,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-21"},{"lineNumber":1071,"author":{"gitId":"warrencxw"},"content":"        // Test maximum allowed value","lastModifiedDate":"2022-03-21"},{"lineNumber":1072,"author":{"gitId":"warrencxw"},"content":"        String argumentWithMaxPercentageArgument \u003d","lastModifiedDate":"2022-03-21"},{"lineNumber":1073,"author":{"gitId":"warrencxw"},"content":"                \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /co 15 /gst 100 /sc 10\";","lastModifiedDate":"2022-03-21"},{"lineNumber":1074,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-21"},{"lineNumber":1075,"author":{"gitId":"warrencxw"},"content":"            double output \u003d Parser.parseGst(argumentWithMaxPercentageArgument);","lastModifiedDate":"2022-03-21"},{"lineNumber":1076,"author":{"gitId":"warrencxw"},"content":"            assertEquals(Parser.MAXIMUM_SURCHARGE_PERCENT, output);","lastModifiedDate":"2022-03-21"},{"lineNumber":1077,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-21"},{"lineNumber":1078,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-21"},{"lineNumber":1079,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-21"},{"lineNumber":1080,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":1081,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":1082,"author":{"gitId":"warrencxw"},"content":"    // parseServiceCharge()","lastModifiedDate":"2022-03-18"},{"lineNumber":1083,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-18"},{"lineNumber":1084,"author":{"gitId":"warrencxw"},"content":"     * Checks if a double representing a service charge percent value of 0 is properly returned ","lastModifiedDate":"2022-03-21"},{"lineNumber":1085,"author":{"gitId":"warrencxw"},"content":"     * when the Service charge delimiter is not provided by the user.","lastModifiedDate":"2022-03-18"},{"lineNumber":1086,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-18"},{"lineNumber":1087,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-18"},{"lineNumber":1088,"author":{"gitId":"warrencxw"},"content":"    void parseServiceCharge_missingDelimiter_serviceChargeZeroPercent() {","lastModifiedDate":"2022-03-18"},{"lineNumber":1089,"author":{"gitId":"warrencxw"},"content":"        String argumentWithoutServiceChargeDelimiter \u003d","lastModifiedDate":"2022-03-18"},{"lineNumber":1090,"author":{"gitId":"warrencxw"},"content":"                \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /co 15\";","lastModifiedDate":"2022-03-18"},{"lineNumber":1091,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-18"},{"lineNumber":1092,"author":{"gitId":"warrencxw"},"content":"            double output \u003d Parser.parseServiceCharge(argumentWithoutServiceChargeDelimiter);","lastModifiedDate":"2022-03-21"},{"lineNumber":1093,"author":{"gitId":"warrencxw"},"content":"            assertEquals(0, output);","lastModifiedDate":"2022-03-18"},{"lineNumber":1094,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-18"},{"lineNumber":1095,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-18"},{"lineNumber":1096,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-18"},{"lineNumber":1097,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":1098,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":1099,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-18"},{"lineNumber":1100,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the Service charge delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":1101,"author":{"gitId":"warrencxw"},"content":"     * is provided but no arguments following the Service charge delimiter are provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":1102,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-18"},{"lineNumber":1103,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-18"},{"lineNumber":1104,"author":{"gitId":"warrencxw"},"content":"    void parseServiceCharge_delimiterExistsWithoutArgument_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":1105,"author":{"gitId":"warrencxw"},"content":"        String argumentWithoutServiceChargeArgument \u003d","lastModifiedDate":"2022-03-18"},{"lineNumber":1106,"author":{"gitId":"warrencxw"},"content":"                \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /co 15 /gst 7 /sc \";","lastModifiedDate":"2022-03-18"},{"lineNumber":1107,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-18"},{"lineNumber":1108,"author":{"gitId":"warrencxw"},"content":"            double output \u003d Parser.parseServiceCharge(argumentWithoutServiceChargeArgument);","lastModifiedDate":"2022-03-21"},{"lineNumber":1109,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-18"},{"lineNumber":1110,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-18"},{"lineNumber":1111,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_MISSING_ARGUMENT + ParserUtils.SERVICE_CHARGE_DELIMITER;","lastModifiedDate":"2022-03-20"},{"lineNumber":1112,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-18"},{"lineNumber":1113,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-18"},{"lineNumber":1114,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":1115,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":1116,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-18"},{"lineNumber":1117,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the Service charge delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":1118,"author":{"gitId":"warrencxw"},"content":"     * is provided by the user but the argument following the Service charge delimiter cannot be parsed as a double.","lastModifiedDate":"2022-03-25"},{"lineNumber":1119,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-18"},{"lineNumber":1120,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-18"},{"lineNumber":1121,"author":{"gitId":"warrencxw"},"content":"    void parseServiceCharge_delimiterExistsArgumentNotDouble_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":1122,"author":{"gitId":"warrencxw"},"content":"        String argumentWithNonDoubleArgument \u003d","lastModifiedDate":"2022-03-21"},{"lineNumber":1123,"author":{"gitId":"warrencxw"},"content":"                \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /co 15 /gst 7 /sc apple\";","lastModifiedDate":"2022-03-18"},{"lineNumber":1124,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-18"},{"lineNumber":1125,"author":{"gitId":"warrencxw"},"content":"            double output \u003d Parser.parseServiceCharge(argumentWithNonDoubleArgument);","lastModifiedDate":"2022-03-21"},{"lineNumber":1126,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-18"},{"lineNumber":1127,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-18"},{"lineNumber":1128,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d","lastModifiedDate":"2022-03-21"},{"lineNumber":1129,"author":{"gitId":"warrencxw"},"content":"                    Message.ERROR_PARSER_NON_PERCENTAGE_ARGUMENT + ParserUtils.SERVICE_CHARGE_DELIMITER;","lastModifiedDate":"2022-03-21"},{"lineNumber":1130,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-18"},{"lineNumber":1131,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-18"},{"lineNumber":1132,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":1133,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":1134,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-18"},{"lineNumber":1135,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the Service charge delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":1136,"author":{"gitId":"warrencxw"},"content":"     * and positive numeric value are provided as arguments, but the parsed double has more than three digits","lastModifiedDate":"2022-03-25"},{"lineNumber":1137,"author":{"gitId":"warrencxw"},"content":"     * before the decimal point.","lastModifiedDate":"2022-03-25"},{"lineNumber":1138,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-21"},{"lineNumber":1139,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-21"},{"lineNumber":1140,"author":{"gitId":"warrencxw"},"content":"    void parseServiceCharge_delimiterExistsArgumentDoubleWithMoreThan3DigitsBeforeDP_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":1141,"author":{"gitId":"warrencxw"},"content":"        String argumentWithDoubleArgumentMoreThan3DigitsBeforeDP \u003d","lastModifiedDate":"2022-03-21"},{"lineNumber":1142,"author":{"gitId":"warrencxw"},"content":"                \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /co 15 /gst 7 /sc 1000\";","lastModifiedDate":"2022-03-21"},{"lineNumber":1143,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-21"},{"lineNumber":1144,"author":{"gitId":"warrencxw"},"content":"            double output \u003d Parser.parseServiceCharge(argumentWithDoubleArgumentMoreThan3DigitsBeforeDP);","lastModifiedDate":"2022-03-21"},{"lineNumber":1145,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-21"},{"lineNumber":1146,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-21"},{"lineNumber":1147,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_PERCENTAGE_MORE_THAN_THREE_DIGITS_BEFORE_DP;","lastModifiedDate":"2022-03-21"},{"lineNumber":1148,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-21"},{"lineNumber":1149,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-21"},{"lineNumber":1150,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-21"},{"lineNumber":1151,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":1152,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-21"},{"lineNumber":1153,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the Service charge delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":1154,"author":{"gitId":"warrencxw"},"content":"     * and positive numeric value are provided as arguments, but the parsed double has more than two decimal places.","lastModifiedDate":"2022-03-25"},{"lineNumber":1155,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-21"},{"lineNumber":1156,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-21"},{"lineNumber":1157,"author":{"gitId":"warrencxw"},"content":"    void parseServiceCharge_delimiterExistsArgumentDoubleWithMoreThan2DP_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":1158,"author":{"gitId":"warrencxw"},"content":"        String argumentWithDoubleArgumentMoreThan2DP \u003d","lastModifiedDate":"2022-03-21"},{"lineNumber":1159,"author":{"gitId":"warrencxw"},"content":"                \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /co 15 /gst 7 /sc 10.123\";","lastModifiedDate":"2022-03-21"},{"lineNumber":1160,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-21"},{"lineNumber":1161,"author":{"gitId":"warrencxw"},"content":"            double output \u003d Parser.parseServiceCharge(argumentWithDoubleArgumentMoreThan2DP);","lastModifiedDate":"2022-03-21"},{"lineNumber":1162,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-21"},{"lineNumber":1163,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-21"},{"lineNumber":1164,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_PERCENTAGE_NOT_TWO_DP;","lastModifiedDate":"2022-03-21"},{"lineNumber":1165,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-21"},{"lineNumber":1166,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-21"},{"lineNumber":1167,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-21"},{"lineNumber":1168,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":1169,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-21"},{"lineNumber":1170,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is properly thrown when the Service charge delimiter","lastModifiedDate":"2022-03-25"},{"lineNumber":1171,"author":{"gitId":"warrencxw"},"content":"     * and a double representing the percentage service charge is provided by the user but the double is not","lastModifiedDate":"2022-03-25"},{"lineNumber":1172,"author":{"gitId":"warrencxw"},"content":"     * within the valid range of [0, 100].","lastModifiedDate":"2022-03-25"},{"lineNumber":1173,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-18"},{"lineNumber":1174,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-18"},{"lineNumber":1175,"author":{"gitId":"warrencxw"},"content":"    void parseServiceCharge_delimiterExistsArgumentDoubleButNotInRange_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":1176,"author":{"gitId":"warrencxw"},"content":"        // Test values less than 0, negative values","lastModifiedDate":"2022-03-18"},{"lineNumber":1177,"author":{"gitId":"warrencxw"},"content":"        String argumentWithDoubleArgumentUnderRange \u003d","lastModifiedDate":"2022-03-21"},{"lineNumber":1178,"author":{"gitId":"warrencxw"},"content":"                \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /co 15 /gst 7 /sc -1\";","lastModifiedDate":"2022-03-18"},{"lineNumber":1179,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-18"},{"lineNumber":1180,"author":{"gitId":"warrencxw"},"content":"            double output \u003d Parser.parseServiceCharge(argumentWithDoubleArgumentUnderRange);","lastModifiedDate":"2022-03-21"},{"lineNumber":1181,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-18"},{"lineNumber":1182,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-18"},{"lineNumber":1183,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_PERCENTAGE_NEGATIVE;","lastModifiedDate":"2022-03-21"},{"lineNumber":1184,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-18"},{"lineNumber":1185,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-18"},{"lineNumber":1186,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":1187,"author":{"gitId":"warrencxw"},"content":"        // Test values greater than 100","lastModifiedDate":"2022-03-18"},{"lineNumber":1188,"author":{"gitId":"warrencxw"},"content":"        String argumentWithDoubleArgumentAboveRange \u003d","lastModifiedDate":"2022-03-21"},{"lineNumber":1189,"author":{"gitId":"warrencxw"},"content":"                \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /co 15 /gst 7 /sc 101\";","lastModifiedDate":"2022-03-18"},{"lineNumber":1190,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-18"},{"lineNumber":1191,"author":{"gitId":"warrencxw"},"content":"            double output \u003d Parser.parseServiceCharge(argumentWithDoubleArgumentAboveRange);","lastModifiedDate":"2022-03-21"},{"lineNumber":1192,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-21"},{"lineNumber":1193,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-21"},{"lineNumber":1194,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_INVALID_SERVICE_CHARGE + ParserUtils.SERVICE_CHARGE_DELIMITER;","lastModifiedDate":"2022-03-21"},{"lineNumber":1195,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-21"},{"lineNumber":1196,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-21"},{"lineNumber":1197,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":1198,"author":{"gitId":"warrencxw"},"content":"        // Test double values near 100","lastModifiedDate":"2022-03-21"},{"lineNumber":1199,"author":{"gitId":"warrencxw"},"content":"        String argumentWithDoubleArgumentNearRange \u003d","lastModifiedDate":"2022-03-21"},{"lineNumber":1200,"author":{"gitId":"warrencxw"},"content":"                \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /co 15 /gst 7 /sc 100.01\";","lastModifiedDate":"2022-03-21"},{"lineNumber":1201,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-21"},{"lineNumber":1202,"author":{"gitId":"warrencxw"},"content":"            double output \u003d Parser.parseServiceCharge(argumentWithDoubleArgumentNearRange);","lastModifiedDate":"2022-03-21"},{"lineNumber":1203,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-18"},{"lineNumber":1204,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-18"},{"lineNumber":1205,"author":{"gitId":"warrencxw"},"content":"            String errorMessage \u003d Message.ERROR_PARSER_INVALID_SERVICE_CHARGE + ParserUtils.SERVICE_CHARGE_DELIMITER;","lastModifiedDate":"2022-03-20"},{"lineNumber":1206,"author":{"gitId":"warrencxw"},"content":"            assertEquals(errorMessage, exception.getMessage());","lastModifiedDate":"2022-03-18"},{"lineNumber":1207,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-18"},{"lineNumber":1208,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":1209,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-18"},{"lineNumber":1210,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-18"},{"lineNumber":1211,"author":{"gitId":"warrencxw"},"content":"     * Checks if a double representing a service charge percent value is properly returned when the ","lastModifiedDate":"2022-03-21"},{"lineNumber":1212,"author":{"gitId":"warrencxw"},"content":"     * Service charge delimiter and an argument with a double value within the valid range of [0, 100]","lastModifiedDate":"2022-03-21"},{"lineNumber":1213,"author":{"gitId":"warrencxw"},"content":"     * is provided by the user.","lastModifiedDate":"2022-03-18"},{"lineNumber":1214,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-18"},{"lineNumber":1215,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-18"},{"lineNumber":1216,"author":{"gitId":"warrencxw"},"content":"    void parseServiceCharge_delimiterExistsArgumentDoubleWithinRange_serviceChargePercentage() {","lastModifiedDate":"2022-03-21"},{"lineNumber":1217,"author":{"gitId":"warrencxw"},"content":"        // Test regular values","lastModifiedDate":"2022-03-21"},{"lineNumber":1218,"author":{"gitId":"warrencxw"},"content":"        String argumentWithDoubleArgumentInRange \u003d","lastModifiedDate":"2022-03-21"},{"lineNumber":1219,"author":{"gitId":"warrencxw"},"content":"                \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /co 15 /gst 7 /sc 10\";","lastModifiedDate":"2022-03-18"},{"lineNumber":1220,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-18"},{"lineNumber":1221,"author":{"gitId":"warrencxw"},"content":"            double output \u003d Parser.parseServiceCharge(argumentWithDoubleArgumentInRange);","lastModifiedDate":"2022-03-21"},{"lineNumber":1222,"author":{"gitId":"warrencxw"},"content":"            assertEquals(10, output);","lastModifiedDate":"2022-03-18"},{"lineNumber":1223,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-18"},{"lineNumber":1224,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-18"},{"lineNumber":1225,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-18"},{"lineNumber":1226,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":1227,"author":{"gitId":"warrencxw"},"content":"        // Test minimum allowed value","lastModifiedDate":"2022-03-21"},{"lineNumber":1228,"author":{"gitId":"warrencxw"},"content":"        String argumentWithMinPercentageArgument \u003d","lastModifiedDate":"2022-03-21"},{"lineNumber":1229,"author":{"gitId":"warrencxw"},"content":"                \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /co 15 /gst 7 /sc 0\";","lastModifiedDate":"2022-03-21"},{"lineNumber":1230,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-21"},{"lineNumber":1231,"author":{"gitId":"warrencxw"},"content":"            double output \u003d Parser.parseServiceCharge(argumentWithMinPercentageArgument);","lastModifiedDate":"2022-03-21"},{"lineNumber":1232,"author":{"gitId":"warrencxw"},"content":"            assertEquals(Parser.MINIMUM_SURCHARGE_PERCENT, output);","lastModifiedDate":"2022-03-21"},{"lineNumber":1233,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-21"},{"lineNumber":1234,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-21"},{"lineNumber":1235,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-21"},{"lineNumber":1236,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-21"},{"lineNumber":1237,"author":{"gitId":"warrencxw"},"content":"        // Test maximum allowed value","lastModifiedDate":"2022-03-21"},{"lineNumber":1238,"author":{"gitId":"warrencxw"},"content":"        String argumentWithMaxPercentageArgument \u003d","lastModifiedDate":"2022-03-21"},{"lineNumber":1239,"author":{"gitId":"warrencxw"},"content":"                \"/sid 3 /n Lunch /p Alice /i Alice Bob Charlie /co 15 /gst 7 /sc 100\";","lastModifiedDate":"2022-03-21"},{"lineNumber":1240,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-21"},{"lineNumber":1241,"author":{"gitId":"warrencxw"},"content":"            double output \u003d Parser.parseServiceCharge(argumentWithMaxPercentageArgument);","lastModifiedDate":"2022-03-21"},{"lineNumber":1242,"author":{"gitId":"warrencxw"},"content":"            assertEquals(Parser.MAXIMUM_SURCHARGE_PERCENT, output);","lastModifiedDate":"2022-03-21"},{"lineNumber":1243,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-21"},{"lineNumber":1244,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-21"},{"lineNumber":1245,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-21"},{"lineNumber":1246,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-18"},{"lineNumber":1247,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-03-10"}],"authorContributionMap":{"warrencxw":1247}},{"path":"src/test/java/seedu/splitlah/parser/commandparser/ActivityCreateCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ivanaitzliddat"},"content":"package seedu.splitlah.parser.commandparser;","lastModifiedDate":"2022-03-24"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-24"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.command.ActivityCreateCommand;","lastModifiedDate":"2022-03-24"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.command.Command;","lastModifiedDate":"2022-03-24"},{"lineNumber":6,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.data.Manager;","lastModifiedDate":"2022-03-24"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.exceptions.InvalidFormatException;","lastModifiedDate":"2022-03-24"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.parser.Parser;","lastModifiedDate":"2022-03-24"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.parser.ParserUtils;","lastModifiedDate":"2022-03-25"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-24"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-24"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2022-03-24"},{"lineNumber":14,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":15,"author":{"gitId":"ivanaitzliddat"},"content":"class ActivityCreateCommandParserTest {","lastModifiedDate":"2022-03-24"},{"lineNumber":16,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":"    private static final String COMMAND_TYPE \u003d ActivityCreateCommandParser.COMMAND_TEXT;","lastModifiedDate":"2022-03-25"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-24"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"     * Checks if an InvalidFormatException with the correct message is thrown","lastModifiedDate":"2022-03-25"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"     * when both cost and cost list are not provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":22,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-24"},{"lineNumber":23,"author":{"gitId":"ivanaitzliddat"},"content":"    @Test","lastModifiedDate":"2022-03-24"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"    public void getCommand_hasMissingCostAndCostList_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-24"},{"lineNumber":25,"author":{"gitId":"ivanaitzliddat"},"content":"        String userInput \u003d \"activity /create /sid 1 /n Dinner /p Alice /i Alice Bob Charlie\";","lastModifiedDate":"2022-03-24"},{"lineNumber":26,"author":{"gitId":"ivanaitzliddat"},"content":"        String arguments \u003d Parser.getRemainingArgument(userInput);","lastModifiedDate":"2022-03-24"},{"lineNumber":27,"author":{"gitId":"ivanaitzliddat"},"content":"        String errorMessage \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, arguments);","lastModifiedDate":"2022-03-25"},{"lineNumber":28,"author":{"gitId":"ivanaitzliddat"},"content":"        if (!errorMessage.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":29,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":30,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"        ActivityCreateCommandParser activityCreateCommandParser \u003d new ActivityCreateCommandParser();","lastModifiedDate":"2022-03-24"},{"lineNumber":33,"author":{"gitId":"ivanaitzliddat"},"content":"        try {","lastModifiedDate":"2022-03-24"},{"lineNumber":34,"author":{"gitId":"ivanaitzliddat"},"content":"            activityCreateCommandParser.getCommand(arguments);","lastModifiedDate":"2022-03-24"},{"lineNumber":35,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-24"},{"lineNumber":36,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (InvalidFormatException e) {","lastModifiedDate":"2022-03-24"},{"lineNumber":37,"author":{"gitId":"ivanaitzliddat"},"content":"            String messageToTest \u003d Message.ERROR_ACTIVITYCREATE_MISSING_COST_AND_COST_LIST","lastModifiedDate":"2022-03-25"},{"lineNumber":38,"author":{"gitId":"ivanaitzliddat"},"content":"                    + \"\\n\" + ActivityCreateCommandParser.COMMAND_FORMAT","lastModifiedDate":"2022-03-24"},{"lineNumber":39,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_FIRST + \"\\n\\t\"","lastModifiedDate":"2022-03-24"},{"lineNumber":40,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_SECOND;","lastModifiedDate":"2022-03-25"},{"lineNumber":41,"author":{"gitId":"ivanaitzliddat"},"content":"            assertEquals(messageToTest, e.getMessage());","lastModifiedDate":"2022-03-25"},{"lineNumber":42,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-24"},{"lineNumber":43,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-24"},{"lineNumber":44,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":45,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-24"},{"lineNumber":46,"author":{"gitId":"ivanaitzliddat"},"content":"     * Checks if an InvalidFormatException with the correct message is thrown","lastModifiedDate":"2022-03-25"},{"lineNumber":47,"author":{"gitId":"ivanaitzliddat"},"content":"     * when both cost and cost list are provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":48,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-24"},{"lineNumber":49,"author":{"gitId":"ivanaitzliddat"},"content":"    @Test","lastModifiedDate":"2022-03-24"},{"lineNumber":50,"author":{"gitId":"ivanaitzliddat"},"content":"    public void getCommand_hasBothCostAndCostList_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-24"},{"lineNumber":51,"author":{"gitId":"ivanaitzliddat"},"content":"        String userInput \u003d \"activity /create /sid 1 /n Dinner /p Alice /i Alice Bob Charlie /co 30 /cl 10 10 10\";","lastModifiedDate":"2022-03-24"},{"lineNumber":52,"author":{"gitId":"ivanaitzliddat"},"content":"        String arguments \u003d Parser.getRemainingArgument(userInput);","lastModifiedDate":"2022-03-24"},{"lineNumber":53,"author":{"gitId":"ivanaitzliddat"},"content":"        String errorMessage \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, arguments);","lastModifiedDate":"2022-03-25"},{"lineNumber":54,"author":{"gitId":"ivanaitzliddat"},"content":"        if (!errorMessage.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":55,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":56,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":57,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":58,"author":{"gitId":"ivanaitzliddat"},"content":"        ActivityCreateCommandParser activityCreateCommandParser \u003d new ActivityCreateCommandParser();","lastModifiedDate":"2022-03-24"},{"lineNumber":59,"author":{"gitId":"ivanaitzliddat"},"content":"        try {","lastModifiedDate":"2022-03-24"},{"lineNumber":60,"author":{"gitId":"ivanaitzliddat"},"content":"            activityCreateCommandParser.getCommand(arguments);","lastModifiedDate":"2022-03-24"},{"lineNumber":61,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-24"},{"lineNumber":62,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (InvalidFormatException e) {","lastModifiedDate":"2022-03-24"},{"lineNumber":63,"author":{"gitId":"ivanaitzliddat"},"content":"            String messageToTest \u003d Message.ERROR_ACTIVITYCREATE_HAS_BOTH_COST_AND_COST_LIST","lastModifiedDate":"2022-03-25"},{"lineNumber":64,"author":{"gitId":"ivanaitzliddat"},"content":"                    + \"\\n\" + ActivityCreateCommandParser.COMMAND_FORMAT","lastModifiedDate":"2022-03-24"},{"lineNumber":65,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_FIRST + \"\\n\\t\"","lastModifiedDate":"2022-03-24"},{"lineNumber":66,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_SECOND;","lastModifiedDate":"2022-03-25"},{"lineNumber":67,"author":{"gitId":"ivanaitzliddat"},"content":"            assertEquals(messageToTest, e.getMessage());","lastModifiedDate":"2022-03-25"},{"lineNumber":68,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-24"},{"lineNumber":69,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-24"},{"lineNumber":70,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":71,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-24"},{"lineNumber":72,"author":{"gitId":"ivanaitzliddat"},"content":"     * Checks if an InvalidFormatException with the correct message is thrown","lastModifiedDate":"2022-03-25"},{"lineNumber":73,"author":{"gitId":"ivanaitzliddat"},"content":"     * when the cost list and involved list that are provided by the user are of different lengths.","lastModifiedDate":"2022-03-25"},{"lineNumber":74,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-24"},{"lineNumber":75,"author":{"gitId":"ivanaitzliddat"},"content":"    @Test","lastModifiedDate":"2022-03-24"},{"lineNumber":76,"author":{"gitId":"ivanaitzliddat"},"content":"    public void getCommand_costListAndInvolvedListDifferentLength_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-24"},{"lineNumber":77,"author":{"gitId":"ivanaitzliddat"},"content":"        ActivityCreateCommandParser activityCreateCommandParser \u003d new ActivityCreateCommandParser();","lastModifiedDate":"2022-03-24"},{"lineNumber":78,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":79,"author":{"gitId":"ivanaitzliddat"},"content":"        //Case 1: Involved list longer than cost list","lastModifiedDate":"2022-03-24"},{"lineNumber":80,"author":{"gitId":"ivanaitzliddat"},"content":"        String userInputOne \u003d \"activity /create /sid 1 /n Dinner /p Alice /i Alice Bob Charlie /cl 10 10\";","lastModifiedDate":"2022-03-24"},{"lineNumber":81,"author":{"gitId":"ivanaitzliddat"},"content":"        String argumentsOne \u003d Parser.getRemainingArgument(userInputOne);","lastModifiedDate":"2022-03-24"},{"lineNumber":82,"author":{"gitId":"ivanaitzliddat"},"content":"        String errorMessageOne \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, argumentsOne);","lastModifiedDate":"2022-03-25"},{"lineNumber":83,"author":{"gitId":"ivanaitzliddat"},"content":"        if (!errorMessageOne.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":84,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":85,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":86,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":87,"author":{"gitId":"ivanaitzliddat"},"content":"        try {","lastModifiedDate":"2022-03-24"},{"lineNumber":88,"author":{"gitId":"ivanaitzliddat"},"content":"            activityCreateCommandParser.getCommand(argumentsOne);","lastModifiedDate":"2022-03-24"},{"lineNumber":89,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-24"},{"lineNumber":90,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (InvalidFormatException e) {","lastModifiedDate":"2022-03-24"},{"lineNumber":91,"author":{"gitId":"ivanaitzliddat"},"content":"            String messageToTest \u003d Message.ERROR_ACTIVITYCREATE_INVOLVED_AND_COST_DIFFERENT_LENGTH","lastModifiedDate":"2022-03-25"},{"lineNumber":92,"author":{"gitId":"ivanaitzliddat"},"content":"                    + \"\\n\" + ActivityCreateCommandParser.COMMAND_FORMAT","lastModifiedDate":"2022-03-24"},{"lineNumber":93,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_FIRST + \"\\n\\t\"","lastModifiedDate":"2022-03-24"},{"lineNumber":94,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_SECOND;","lastModifiedDate":"2022-03-25"},{"lineNumber":95,"author":{"gitId":"ivanaitzliddat"},"content":"            assertEquals(messageToTest, e.getMessage());","lastModifiedDate":"2022-03-25"},{"lineNumber":96,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-24"},{"lineNumber":97,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":98,"author":{"gitId":"ivanaitzliddat"},"content":"        //Case 2: Involved list shorter than cost list","lastModifiedDate":"2022-03-24"},{"lineNumber":99,"author":{"gitId":"ivanaitzliddat"},"content":"        String userInputTwo \u003d \"activity /create /sid 1 /n Dinner /p Alice /i Alice Bob /cl 10 10 10\";","lastModifiedDate":"2022-03-24"},{"lineNumber":100,"author":{"gitId":"ivanaitzliddat"},"content":"        String argumentsTwo \u003d Parser.getRemainingArgument(userInputTwo);","lastModifiedDate":"2022-03-24"},{"lineNumber":101,"author":{"gitId":"ivanaitzliddat"},"content":"        String errorMessageTwo \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, argumentsTwo);","lastModifiedDate":"2022-03-25"},{"lineNumber":102,"author":{"gitId":"ivanaitzliddat"},"content":"        if (!errorMessageTwo.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":103,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":104,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":105,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":106,"author":{"gitId":"ivanaitzliddat"},"content":"        try {","lastModifiedDate":"2022-03-24"},{"lineNumber":107,"author":{"gitId":"ivanaitzliddat"},"content":"            activityCreateCommandParser.getCommand(argumentsTwo);","lastModifiedDate":"2022-03-24"},{"lineNumber":108,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-24"},{"lineNumber":109,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (InvalidFormatException e) {","lastModifiedDate":"2022-03-24"},{"lineNumber":110,"author":{"gitId":"ivanaitzliddat"},"content":"            String messageToTest \u003d Message.ERROR_ACTIVITYCREATE_INVOLVED_AND_COST_DIFFERENT_LENGTH","lastModifiedDate":"2022-03-25"},{"lineNumber":111,"author":{"gitId":"ivanaitzliddat"},"content":"                    + \"\\n\" + ActivityCreateCommandParser.COMMAND_FORMAT","lastModifiedDate":"2022-03-24"},{"lineNumber":112,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_FIRST + \"\\n\\t\"","lastModifiedDate":"2022-03-24"},{"lineNumber":113,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_SECOND;","lastModifiedDate":"2022-03-25"},{"lineNumber":114,"author":{"gitId":"ivanaitzliddat"},"content":"            assertEquals(messageToTest, e.getMessage());","lastModifiedDate":"2022-03-25"},{"lineNumber":115,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-24"},{"lineNumber":116,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-24"},{"lineNumber":117,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":118,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-24"},{"lineNumber":119,"author":{"gitId":"ivanaitzliddat"},"content":"     * Checks if an InvalidFormatException with the correct message is thrown","lastModifiedDate":"2022-03-25"},{"lineNumber":120,"author":{"gitId":"ivanaitzliddat"},"content":"     * when missing delimiters are detected in the user input.","lastModifiedDate":"2022-03-25"},{"lineNumber":121,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-24"},{"lineNumber":122,"author":{"gitId":"ivanaitzliddat"},"content":"    @Test","lastModifiedDate":"2022-03-24"},{"lineNumber":123,"author":{"gitId":"ivanaitzliddat"},"content":"    public void getCommand_hasMissingDelimiter_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":124,"author":{"gitId":"ivanaitzliddat"},"content":"        ActivityCreateCommandParser activityCreateCommandParser \u003d new ActivityCreateCommandParser();","lastModifiedDate":"2022-03-24"},{"lineNumber":125,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":126,"author":{"gitId":"ivanaitzliddat"},"content":"        // Case 1: Missing /sid delimiter","lastModifiedDate":"2022-03-24"},{"lineNumber":127,"author":{"gitId":"ivanaitzliddat"},"content":"        String inputMissingSessionIdDelimiter \u003d \"activity /create /n Dinner /p Alice /i Alice Bob Charlie /co 15\";","lastModifiedDate":"2022-03-24"},{"lineNumber":128,"author":{"gitId":"ivanaitzliddat"},"content":"        String argsMissingSessionIdDelimiter \u003d Parser.getRemainingArgument(inputMissingSessionIdDelimiter);","lastModifiedDate":"2022-03-24"},{"lineNumber":129,"author":{"gitId":"ivanaitzliddat"},"content":"        String errorMessageOne \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, argsMissingSessionIdDelimiter);","lastModifiedDate":"2022-03-25"},{"lineNumber":130,"author":{"gitId":"ivanaitzliddat"},"content":"        if (!errorMessageOne.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":131,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":132,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":133,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":134,"author":{"gitId":"ivanaitzliddat"},"content":"        try {","lastModifiedDate":"2022-03-24"},{"lineNumber":135,"author":{"gitId":"ivanaitzliddat"},"content":"            activityCreateCommandParser.getCommand(argsMissingSessionIdDelimiter);","lastModifiedDate":"2022-03-24"},{"lineNumber":136,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-24"},{"lineNumber":137,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (InvalidFormatException e) {","lastModifiedDate":"2022-03-24"},{"lineNumber":138,"author":{"gitId":"ivanaitzliddat"},"content":"            String messageToTest \u003d Message.ERROR_PARSER_DELIMITER_NOT_FOUND + \"/sid\"","lastModifiedDate":"2022-03-25"},{"lineNumber":139,"author":{"gitId":"ivanaitzliddat"},"content":"                    + \"\\n\" + ActivityCreateCommandParser.COMMAND_FORMAT","lastModifiedDate":"2022-03-24"},{"lineNumber":140,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_FIRST + \"\\n\\t\"","lastModifiedDate":"2022-03-24"},{"lineNumber":141,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_SECOND;","lastModifiedDate":"2022-03-25"},{"lineNumber":142,"author":{"gitId":"ivanaitzliddat"},"content":"            assertEquals(messageToTest, e.getMessage());","lastModifiedDate":"2022-03-25"},{"lineNumber":143,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-24"},{"lineNumber":144,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":145,"author":{"gitId":"ivanaitzliddat"},"content":"        // Case 2: Missing /n delimiter","lastModifiedDate":"2022-03-24"},{"lineNumber":146,"author":{"gitId":"ivanaitzliddat"},"content":"        String inputMissingNameDelimiter \u003d \"activity /create /sid 1 /p Alice /i Alice Bob Charlie /co 15\";","lastModifiedDate":"2022-03-24"},{"lineNumber":147,"author":{"gitId":"ivanaitzliddat"},"content":"        String argsMissingNameDelimiter \u003d Parser.getRemainingArgument(inputMissingNameDelimiter);","lastModifiedDate":"2022-03-24"},{"lineNumber":148,"author":{"gitId":"ivanaitzliddat"},"content":"        String errorMessageTwo \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, argsMissingNameDelimiter);","lastModifiedDate":"2022-03-25"},{"lineNumber":149,"author":{"gitId":"ivanaitzliddat"},"content":"        if (!errorMessageTwo.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":150,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":151,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":152,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":153,"author":{"gitId":"ivanaitzliddat"},"content":"        try {","lastModifiedDate":"2022-03-24"},{"lineNumber":154,"author":{"gitId":"ivanaitzliddat"},"content":"            activityCreateCommandParser.getCommand(argsMissingNameDelimiter);","lastModifiedDate":"2022-03-24"},{"lineNumber":155,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-24"},{"lineNumber":156,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (InvalidFormatException e) {","lastModifiedDate":"2022-03-24"},{"lineNumber":157,"author":{"gitId":"ivanaitzliddat"},"content":"            String messageToTest \u003d Message.ERROR_PARSER_DELIMITER_NOT_FOUND + \"/n\"","lastModifiedDate":"2022-03-25"},{"lineNumber":158,"author":{"gitId":"ivanaitzliddat"},"content":"                    + \"\\n\" + ActivityCreateCommandParser.COMMAND_FORMAT","lastModifiedDate":"2022-03-24"},{"lineNumber":159,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_FIRST + \"\\n\\t\"","lastModifiedDate":"2022-03-24"},{"lineNumber":160,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_SECOND;","lastModifiedDate":"2022-03-25"},{"lineNumber":161,"author":{"gitId":"ivanaitzliddat"},"content":"            assertEquals(messageToTest, e.getMessage());","lastModifiedDate":"2022-03-25"},{"lineNumber":162,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-24"},{"lineNumber":163,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":164,"author":{"gitId":"ivanaitzliddat"},"content":"        // Case 3: Missing /p delimiter","lastModifiedDate":"2022-03-24"},{"lineNumber":165,"author":{"gitId":"ivanaitzliddat"},"content":"        String inputMissingPayerDelimiter \u003d \"activity /create /sid 1 /n Dinner /i Alice Bob Charlie /co 15\";","lastModifiedDate":"2022-03-24"},{"lineNumber":166,"author":{"gitId":"ivanaitzliddat"},"content":"        String argsMissingPayerDelimiter \u003d Parser.getRemainingArgument(inputMissingPayerDelimiter);","lastModifiedDate":"2022-03-24"},{"lineNumber":167,"author":{"gitId":"ivanaitzliddat"},"content":"        String errorMessageThree \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, argsMissingPayerDelimiter);","lastModifiedDate":"2022-03-25"},{"lineNumber":168,"author":{"gitId":"ivanaitzliddat"},"content":"        if (!errorMessageThree.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":169,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":170,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":171,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":172,"author":{"gitId":"ivanaitzliddat"},"content":"        try {","lastModifiedDate":"2022-03-24"},{"lineNumber":173,"author":{"gitId":"ivanaitzliddat"},"content":"            activityCreateCommandParser.getCommand(argsMissingPayerDelimiter);","lastModifiedDate":"2022-03-24"},{"lineNumber":174,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-24"},{"lineNumber":175,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (InvalidFormatException e) {","lastModifiedDate":"2022-03-24"},{"lineNumber":176,"author":{"gitId":"ivanaitzliddat"},"content":"            String messageToTest \u003d Message.ERROR_PARSER_DELIMITER_NOT_FOUND + \"/p\"","lastModifiedDate":"2022-03-25"},{"lineNumber":177,"author":{"gitId":"ivanaitzliddat"},"content":"                    + \"\\n\" + ActivityCreateCommandParser.COMMAND_FORMAT","lastModifiedDate":"2022-03-24"},{"lineNumber":178,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_FIRST + \"\\n\\t\"","lastModifiedDate":"2022-03-24"},{"lineNumber":179,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_SECOND;","lastModifiedDate":"2022-03-25"},{"lineNumber":180,"author":{"gitId":"ivanaitzliddat"},"content":"            assertEquals(messageToTest, e.getMessage());","lastModifiedDate":"2022-03-25"},{"lineNumber":181,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-24"},{"lineNumber":182,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":183,"author":{"gitId":"ivanaitzliddat"},"content":"        // Case 4: Missing /i delimiter","lastModifiedDate":"2022-03-24"},{"lineNumber":184,"author":{"gitId":"ivanaitzliddat"},"content":"        String inputMissingInvolvedListDelimiter \u003d \"activity /create /sid 1 /n Dinner /p Alice /co 15\";","lastModifiedDate":"2022-03-24"},{"lineNumber":185,"author":{"gitId":"ivanaitzliddat"},"content":"        String argsMissingInvolvedListDelimiter \u003d Parser.getRemainingArgument(inputMissingInvolvedListDelimiter);","lastModifiedDate":"2022-03-24"},{"lineNumber":186,"author":{"gitId":"ivanaitzliddat"},"content":"        String errorMessageFour \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, argsMissingInvolvedListDelimiter);","lastModifiedDate":"2022-03-25"},{"lineNumber":187,"author":{"gitId":"ivanaitzliddat"},"content":"        if (!errorMessageFour.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":188,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":189,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":190,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":191,"author":{"gitId":"ivanaitzliddat"},"content":"        try {","lastModifiedDate":"2022-03-24"},{"lineNumber":192,"author":{"gitId":"ivanaitzliddat"},"content":"            activityCreateCommandParser.getCommand(argsMissingInvolvedListDelimiter);","lastModifiedDate":"2022-03-24"},{"lineNumber":193,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-24"},{"lineNumber":194,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (InvalidFormatException e) {","lastModifiedDate":"2022-03-24"},{"lineNumber":195,"author":{"gitId":"ivanaitzliddat"},"content":"            String messageToTest \u003d Message.ERROR_PARSER_DELIMITER_NOT_FOUND + \"/i\"","lastModifiedDate":"2022-03-25"},{"lineNumber":196,"author":{"gitId":"ivanaitzliddat"},"content":"                    + \"\\n\" + ActivityCreateCommandParser.COMMAND_FORMAT","lastModifiedDate":"2022-03-24"},{"lineNumber":197,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_FIRST + \"\\n\\t\"","lastModifiedDate":"2022-03-24"},{"lineNumber":198,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_SECOND;","lastModifiedDate":"2022-03-25"},{"lineNumber":199,"author":{"gitId":"ivanaitzliddat"},"content":"            assertEquals(messageToTest, e.getMessage());","lastModifiedDate":"2022-03-25"},{"lineNumber":200,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-24"},{"lineNumber":201,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-24"},{"lineNumber":202,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":203,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-24"},{"lineNumber":204,"author":{"gitId":"ivanaitzliddat"},"content":"     * Checks if an InvalidFormatException with the correct message is thrown","lastModifiedDate":"2022-03-25"},{"lineNumber":205,"author":{"gitId":"ivanaitzliddat"},"content":"     * when missing arguments are detected in the user input.","lastModifiedDate":"2022-03-25"},{"lineNumber":206,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-24"},{"lineNumber":207,"author":{"gitId":"ivanaitzliddat"},"content":"    @Test","lastModifiedDate":"2022-03-24"},{"lineNumber":208,"author":{"gitId":"ivanaitzliddat"},"content":"    public void getCommand_hasMissingArguments_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":209,"author":{"gitId":"ivanaitzliddat"},"content":"        ActivityCreateCommandParser activityCreateCommandParser \u003d new ActivityCreateCommandParser();","lastModifiedDate":"2022-03-24"},{"lineNumber":210,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":211,"author":{"gitId":"ivanaitzliddat"},"content":"        // Case 1: Missing session ID","lastModifiedDate":"2022-03-24"},{"lineNumber":212,"author":{"gitId":"ivanaitzliddat"},"content":"        String inputMissingSessionIdArgument \u003d \"activity /create /sid /n Dinner /p Alice /i Alice Bob Charlie /co 15\";","lastModifiedDate":"2022-03-24"},{"lineNumber":213,"author":{"gitId":"ivanaitzliddat"},"content":"        String argsMissingSessionIdArgument \u003d Parser.getRemainingArgument(inputMissingSessionIdArgument);","lastModifiedDate":"2022-03-24"},{"lineNumber":214,"author":{"gitId":"ivanaitzliddat"},"content":"        String errorMessageOne \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, argsMissingSessionIdArgument);","lastModifiedDate":"2022-03-25"},{"lineNumber":215,"author":{"gitId":"ivanaitzliddat"},"content":"        if (!errorMessageOne.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":216,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":217,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":218,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":219,"author":{"gitId":"ivanaitzliddat"},"content":"        try {","lastModifiedDate":"2022-03-24"},{"lineNumber":220,"author":{"gitId":"ivanaitzliddat"},"content":"            activityCreateCommandParser.getCommand(argsMissingSessionIdArgument);","lastModifiedDate":"2022-03-24"},{"lineNumber":221,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-24"},{"lineNumber":222,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (InvalidFormatException e) {","lastModifiedDate":"2022-03-24"},{"lineNumber":223,"author":{"gitId":"ivanaitzliddat"},"content":"            String messageToTest \u003d Message.ERROR_PARSER_MISSING_ARGUMENT + \"/sid\"","lastModifiedDate":"2022-03-25"},{"lineNumber":224,"author":{"gitId":"ivanaitzliddat"},"content":"                    + \"\\n\" + ActivityCreateCommandParser.COMMAND_FORMAT","lastModifiedDate":"2022-03-24"},{"lineNumber":225,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_FIRST + \"\\n\\t\"","lastModifiedDate":"2022-03-24"},{"lineNumber":226,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_SECOND;","lastModifiedDate":"2022-03-25"},{"lineNumber":227,"author":{"gitId":"ivanaitzliddat"},"content":"            assertEquals(messageToTest, e.getMessage());","lastModifiedDate":"2022-03-25"},{"lineNumber":228,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-24"},{"lineNumber":229,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":230,"author":{"gitId":"ivanaitzliddat"},"content":"        // Case 2: Missing Activity Name","lastModifiedDate":"2022-03-24"},{"lineNumber":231,"author":{"gitId":"ivanaitzliddat"},"content":"        String inputMissingNameArgument \u003d \"activity /create /sid 1 /n /p Alice /i Alice Bob Charlie /co 15\";","lastModifiedDate":"2022-03-24"},{"lineNumber":232,"author":{"gitId":"ivanaitzliddat"},"content":"        String argsMissingNameArgument \u003d Parser.getRemainingArgument(inputMissingNameArgument);","lastModifiedDate":"2022-03-24"},{"lineNumber":233,"author":{"gitId":"ivanaitzliddat"},"content":"        String errorMessageTwo \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, argsMissingNameArgument);","lastModifiedDate":"2022-03-25"},{"lineNumber":234,"author":{"gitId":"ivanaitzliddat"},"content":"        if (!errorMessageTwo.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":235,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":236,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":237,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":238,"author":{"gitId":"ivanaitzliddat"},"content":"        try {","lastModifiedDate":"2022-03-24"},{"lineNumber":239,"author":{"gitId":"ivanaitzliddat"},"content":"            activityCreateCommandParser.getCommand(argsMissingNameArgument);","lastModifiedDate":"2022-03-24"},{"lineNumber":240,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-24"},{"lineNumber":241,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (InvalidFormatException e) {","lastModifiedDate":"2022-03-24"},{"lineNumber":242,"author":{"gitId":"ivanaitzliddat"},"content":"            String messageToTest \u003d Message.ERROR_PARSER_MISSING_ARGUMENT + \"/n\"","lastModifiedDate":"2022-03-25"},{"lineNumber":243,"author":{"gitId":"ivanaitzliddat"},"content":"                    + \"\\n\" + ActivityCreateCommandParser.COMMAND_FORMAT","lastModifiedDate":"2022-03-24"},{"lineNumber":244,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_FIRST + \"\\n\\t\"","lastModifiedDate":"2022-03-24"},{"lineNumber":245,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_SECOND;","lastModifiedDate":"2022-03-25"},{"lineNumber":246,"author":{"gitId":"ivanaitzliddat"},"content":"            assertEquals(messageToTest, e.getMessage());","lastModifiedDate":"2022-03-25"},{"lineNumber":247,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-24"},{"lineNumber":248,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":249,"author":{"gitId":"ivanaitzliddat"},"content":"        // Case 3: Missing Payer","lastModifiedDate":"2022-03-24"},{"lineNumber":250,"author":{"gitId":"ivanaitzliddat"},"content":"        String inputMissingPayerArgument \u003d \"activity /create /sid 1 /n Dinner /p /i Alice Bob Charlie /co 15\";","lastModifiedDate":"2022-03-24"},{"lineNumber":251,"author":{"gitId":"ivanaitzliddat"},"content":"        String argsMissingPayerArgument \u003d Parser.getRemainingArgument(inputMissingPayerArgument);","lastModifiedDate":"2022-03-24"},{"lineNumber":252,"author":{"gitId":"ivanaitzliddat"},"content":"        String errorMessageThree \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, argsMissingPayerArgument);","lastModifiedDate":"2022-03-25"},{"lineNumber":253,"author":{"gitId":"ivanaitzliddat"},"content":"        if (!errorMessageThree.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":254,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":255,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":256,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":257,"author":{"gitId":"ivanaitzliddat"},"content":"        try {","lastModifiedDate":"2022-03-24"},{"lineNumber":258,"author":{"gitId":"ivanaitzliddat"},"content":"            activityCreateCommandParser.getCommand(argsMissingPayerArgument);","lastModifiedDate":"2022-03-24"},{"lineNumber":259,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-24"},{"lineNumber":260,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (InvalidFormatException e) {","lastModifiedDate":"2022-03-24"},{"lineNumber":261,"author":{"gitId":"ivanaitzliddat"},"content":"            String messageToTest \u003d Message.ERROR_PARSER_MISSING_ARGUMENT + \"/p\"","lastModifiedDate":"2022-03-25"},{"lineNumber":262,"author":{"gitId":"ivanaitzliddat"},"content":"                    + \"\\n\" + ActivityCreateCommandParser.COMMAND_FORMAT","lastModifiedDate":"2022-03-24"},{"lineNumber":263,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_FIRST + \"\\n\\t\"","lastModifiedDate":"2022-03-24"},{"lineNumber":264,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_SECOND;","lastModifiedDate":"2022-03-25"},{"lineNumber":265,"author":{"gitId":"ivanaitzliddat"},"content":"            assertEquals(messageToTest, e.getMessage());","lastModifiedDate":"2022-03-25"},{"lineNumber":266,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-24"},{"lineNumber":267,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":268,"author":{"gitId":"ivanaitzliddat"},"content":"        // Case 4: Missing involved list","lastModifiedDate":"2022-03-24"},{"lineNumber":269,"author":{"gitId":"ivanaitzliddat"},"content":"        String inputMissingInvolvedListArgument \u003d \"activity /create /sid 1 /n Dinner /p Alice /i /co 15\";","lastModifiedDate":"2022-03-24"},{"lineNumber":270,"author":{"gitId":"ivanaitzliddat"},"content":"        String argsMissingInvolvedListArgument \u003d Parser.getRemainingArgument(inputMissingInvolvedListArgument);","lastModifiedDate":"2022-03-24"},{"lineNumber":271,"author":{"gitId":"ivanaitzliddat"},"content":"        String errorMessageFour \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, argsMissingInvolvedListArgument);","lastModifiedDate":"2022-03-25"},{"lineNumber":272,"author":{"gitId":"ivanaitzliddat"},"content":"        if (!errorMessageFour.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":273,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":274,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":275,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":276,"author":{"gitId":"ivanaitzliddat"},"content":"        try {","lastModifiedDate":"2022-03-24"},{"lineNumber":277,"author":{"gitId":"ivanaitzliddat"},"content":"            activityCreateCommandParser.getCommand(argsMissingInvolvedListArgument);","lastModifiedDate":"2022-03-24"},{"lineNumber":278,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-24"},{"lineNumber":279,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (InvalidFormatException e) {","lastModifiedDate":"2022-03-24"},{"lineNumber":280,"author":{"gitId":"ivanaitzliddat"},"content":"            String messageToTest \u003d Message.ERROR_PARSER_MISSING_ARGUMENT + \"/i\"","lastModifiedDate":"2022-03-25"},{"lineNumber":281,"author":{"gitId":"ivanaitzliddat"},"content":"                    + \"\\n\" + ActivityCreateCommandParser.COMMAND_FORMAT","lastModifiedDate":"2022-03-24"},{"lineNumber":282,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_FIRST + \"\\n\\t\"","lastModifiedDate":"2022-03-24"},{"lineNumber":283,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_SECOND;","lastModifiedDate":"2022-03-25"},{"lineNumber":284,"author":{"gitId":"ivanaitzliddat"},"content":"            assertEquals(messageToTest, e.getMessage());","lastModifiedDate":"2022-03-25"},{"lineNumber":285,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-24"},{"lineNumber":286,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":287,"author":{"gitId":"ivanaitzliddat"},"content":"        // Case 5: Missing total cost","lastModifiedDate":"2022-03-24"},{"lineNumber":288,"author":{"gitId":"ivanaitzliddat"},"content":"        String inputMissingTotalCostArgument \u003d \"activity /create /sid 1 /n Dinner /p Alice /i Alice Bob Charlie /co\";","lastModifiedDate":"2022-03-24"},{"lineNumber":289,"author":{"gitId":"ivanaitzliddat"},"content":"        String argsMissingTotalCostArgument \u003d Parser.getRemainingArgument(inputMissingTotalCostArgument);","lastModifiedDate":"2022-03-24"},{"lineNumber":290,"author":{"gitId":"ivanaitzliddat"},"content":"        String errorMessageFive \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, argsMissingTotalCostArgument);","lastModifiedDate":"2022-03-25"},{"lineNumber":291,"author":{"gitId":"ivanaitzliddat"},"content":"        if (!errorMessageFive.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":292,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":293,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":294,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":295,"author":{"gitId":"ivanaitzliddat"},"content":"        try {","lastModifiedDate":"2022-03-24"},{"lineNumber":296,"author":{"gitId":"ivanaitzliddat"},"content":"            activityCreateCommandParser.getCommand(argsMissingTotalCostArgument);","lastModifiedDate":"2022-03-24"},{"lineNumber":297,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-24"},{"lineNumber":298,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (InvalidFormatException e) {","lastModifiedDate":"2022-03-24"},{"lineNumber":299,"author":{"gitId":"ivanaitzliddat"},"content":"            String messageToTest \u003d Message.ERROR_PARSER_MISSING_ARGUMENT + \"/co\"","lastModifiedDate":"2022-03-25"},{"lineNumber":300,"author":{"gitId":"ivanaitzliddat"},"content":"                    + \"\\n\" + ActivityCreateCommandParser.COMMAND_FORMAT","lastModifiedDate":"2022-03-24"},{"lineNumber":301,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_FIRST + \"\\n\\t\"","lastModifiedDate":"2022-03-24"},{"lineNumber":302,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_SECOND;","lastModifiedDate":"2022-03-25"},{"lineNumber":303,"author":{"gitId":"ivanaitzliddat"},"content":"            assertEquals(messageToTest, e.getMessage());","lastModifiedDate":"2022-03-25"},{"lineNumber":304,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-24"},{"lineNumber":305,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":306,"author":{"gitId":"ivanaitzliddat"},"content":"        // Case 6: Missing cost list","lastModifiedDate":"2022-03-24"},{"lineNumber":307,"author":{"gitId":"ivanaitzliddat"},"content":"        String inputMissingCostListArgument \u003d \"activity /create /sid 1 /n Dinner /p Alice /i Alice Bob Charlie /cl\";","lastModifiedDate":"2022-03-24"},{"lineNumber":308,"author":{"gitId":"ivanaitzliddat"},"content":"        String argsMissingCostListArgument \u003d Parser.getRemainingArgument(inputMissingCostListArgument);","lastModifiedDate":"2022-03-24"},{"lineNumber":309,"author":{"gitId":"ivanaitzliddat"},"content":"        String errorMessageSix \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, argsMissingCostListArgument);","lastModifiedDate":"2022-03-25"},{"lineNumber":310,"author":{"gitId":"ivanaitzliddat"},"content":"        if (!errorMessageSix.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":311,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":312,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":313,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":314,"author":{"gitId":"ivanaitzliddat"},"content":"        try {","lastModifiedDate":"2022-03-24"},{"lineNumber":315,"author":{"gitId":"ivanaitzliddat"},"content":"            activityCreateCommandParser.getCommand(argsMissingCostListArgument);","lastModifiedDate":"2022-03-24"},{"lineNumber":316,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-24"},{"lineNumber":317,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (InvalidFormatException e) {","lastModifiedDate":"2022-03-24"},{"lineNumber":318,"author":{"gitId":"ivanaitzliddat"},"content":"            String messageToTest \u003d Message.ERROR_PARSER_MISSING_ARGUMENT + \"/cl\"","lastModifiedDate":"2022-03-25"},{"lineNumber":319,"author":{"gitId":"ivanaitzliddat"},"content":"                    + \"\\n\" + ActivityCreateCommandParser.COMMAND_FORMAT","lastModifiedDate":"2022-03-24"},{"lineNumber":320,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_FIRST + \"\\n\\t\"","lastModifiedDate":"2022-03-24"},{"lineNumber":321,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_SECOND;","lastModifiedDate":"2022-03-25"},{"lineNumber":322,"author":{"gitId":"ivanaitzliddat"},"content":"            assertEquals(messageToTest, e.getMessage());","lastModifiedDate":"2022-03-25"},{"lineNumber":323,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-24"},{"lineNumber":324,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":325,"author":{"gitId":"ivanaitzliddat"},"content":"        // Case 7: Missing gst","lastModifiedDate":"2022-03-24"},{"lineNumber":326,"author":{"gitId":"ivanaitzliddat"},"content":"        String inputMissingGstArgument \u003d \"activity /create /sid 1 /n Dinner /p Alice /i Alice Bob Charlie /co 30 /gst\";","lastModifiedDate":"2022-03-24"},{"lineNumber":327,"author":{"gitId":"ivanaitzliddat"},"content":"        String argsMissingGstArgument \u003d Parser.getRemainingArgument(inputMissingGstArgument);","lastModifiedDate":"2022-03-24"},{"lineNumber":328,"author":{"gitId":"ivanaitzliddat"},"content":"        String errorMessageSeven \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, argsMissingGstArgument);","lastModifiedDate":"2022-03-25"},{"lineNumber":329,"author":{"gitId":"ivanaitzliddat"},"content":"        if (!errorMessageSeven.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":330,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":331,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":332,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":333,"author":{"gitId":"ivanaitzliddat"},"content":"        try {","lastModifiedDate":"2022-03-24"},{"lineNumber":334,"author":{"gitId":"ivanaitzliddat"},"content":"            activityCreateCommandParser.getCommand(argsMissingGstArgument);","lastModifiedDate":"2022-03-24"},{"lineNumber":335,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-24"},{"lineNumber":336,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (InvalidFormatException e) {","lastModifiedDate":"2022-03-24"},{"lineNumber":337,"author":{"gitId":"ivanaitzliddat"},"content":"            String messageToTest \u003d Message.ERROR_PARSER_MISSING_ARGUMENT + \"/gst\"","lastModifiedDate":"2022-03-25"},{"lineNumber":338,"author":{"gitId":"ivanaitzliddat"},"content":"                    + \"\\n\" + ActivityCreateCommandParser.COMMAND_FORMAT","lastModifiedDate":"2022-03-24"},{"lineNumber":339,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_FIRST + \"\\n\\t\"","lastModifiedDate":"2022-03-24"},{"lineNumber":340,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_SECOND;","lastModifiedDate":"2022-03-25"},{"lineNumber":341,"author":{"gitId":"ivanaitzliddat"},"content":"            assertEquals(messageToTest, e.getMessage());","lastModifiedDate":"2022-03-25"},{"lineNumber":342,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-24"},{"lineNumber":343,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":344,"author":{"gitId":"ivanaitzliddat"},"content":"        // Case 8: Missing service charge","lastModifiedDate":"2022-03-24"},{"lineNumber":345,"author":{"gitId":"ivanaitzliddat"},"content":"        String inputMissingScArgument \u003d \"activity /create /sid 1 /n Dinner /p Alice /i Alice Bob Charlie /co 30 /sc\";","lastModifiedDate":"2022-03-24"},{"lineNumber":346,"author":{"gitId":"ivanaitzliddat"},"content":"        String argsMissingScArgument \u003d Parser.getRemainingArgument(inputMissingScArgument);","lastModifiedDate":"2022-03-24"},{"lineNumber":347,"author":{"gitId":"ivanaitzliddat"},"content":"        String errorMessageEight \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, argsMissingScArgument);","lastModifiedDate":"2022-03-25"},{"lineNumber":348,"author":{"gitId":"ivanaitzliddat"},"content":"        if (!errorMessageEight.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":349,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":350,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":351,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":352,"author":{"gitId":"ivanaitzliddat"},"content":"        try {","lastModifiedDate":"2022-03-24"},{"lineNumber":353,"author":{"gitId":"ivanaitzliddat"},"content":"            activityCreateCommandParser.getCommand(argsMissingScArgument);","lastModifiedDate":"2022-03-24"},{"lineNumber":354,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-24"},{"lineNumber":355,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (InvalidFormatException e) {","lastModifiedDate":"2022-03-24"},{"lineNumber":356,"author":{"gitId":"ivanaitzliddat"},"content":"            String messageToTest \u003d Message.ERROR_PARSER_MISSING_ARGUMENT + \"/sc\"","lastModifiedDate":"2022-03-25"},{"lineNumber":357,"author":{"gitId":"ivanaitzliddat"},"content":"                    + \"\\n\" + ActivityCreateCommandParser.COMMAND_FORMAT","lastModifiedDate":"2022-03-24"},{"lineNumber":358,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_FIRST + \"\\n\\t\"","lastModifiedDate":"2022-03-24"},{"lineNumber":359,"author":{"gitId":"ivanaitzliddat"},"content":"                    + ActivityCreateCommandParser.COMMAND_FORMAT_SECOND;","lastModifiedDate":"2022-03-25"},{"lineNumber":360,"author":{"gitId":"ivanaitzliddat"},"content":"            assertEquals(messageToTest, e.getMessage());","lastModifiedDate":"2022-03-25"},{"lineNumber":361,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-24"},{"lineNumber":362,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-24"},{"lineNumber":363,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":364,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-03-24"},{"lineNumber":365,"author":{"gitId":"ivanaitzliddat"},"content":"     * Checks if an ActivityCreateCommand object is correctly returned when the command is correctly entered.","lastModifiedDate":"2022-03-24"},{"lineNumber":366,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-03-24"},{"lineNumber":367,"author":{"gitId":"ivanaitzliddat"},"content":"    @Test","lastModifiedDate":"2022-03-24"},{"lineNumber":368,"author":{"gitId":"ivanaitzliddat"},"content":"    public void getCommand_validUserInput_ActivityCreateCommand() {","lastModifiedDate":"2022-03-24"},{"lineNumber":369,"author":{"gitId":"ivanaitzliddat"},"content":"        Manager manager \u003d new Manager();","lastModifiedDate":"2022-03-24"},{"lineNumber":370,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":371,"author":{"gitId":"ivanaitzliddat"},"content":"        String sessionInput \u003d \"session /create /n Class outing /d 15-02-2022 /pl Alice Bob Charlie\";","lastModifiedDate":"2022-03-24"},{"lineNumber":372,"author":{"gitId":"ivanaitzliddat"},"content":"        Command createSession \u003d Parser.getCommand(sessionInput);","lastModifiedDate":"2022-03-24"},{"lineNumber":373,"author":{"gitId":"ivanaitzliddat"},"content":"        createSession.run(manager);","lastModifiedDate":"2022-03-24"},{"lineNumber":374,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-24"},{"lineNumber":375,"author":{"gitId":"ivanaitzliddat"},"content":"        String validUserInput \u003d \"activity /create /sid 1 /n Lunch /p Alice /i Alice Bob Charlie /co 15\";","lastModifiedDate":"2022-03-24"},{"lineNumber":376,"author":{"gitId":"ivanaitzliddat"},"content":"        String validArguments \u003d Parser.getRemainingArgument(validUserInput);","lastModifiedDate":"2022-03-24"},{"lineNumber":377,"author":{"gitId":"ivanaitzliddat"},"content":"        String errorMessage \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, validArguments);","lastModifiedDate":"2022-03-25"},{"lineNumber":378,"author":{"gitId":"ivanaitzliddat"},"content":"        if (!errorMessage.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":379,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":380,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":381,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":382,"author":{"gitId":"ivanaitzliddat"},"content":"        ActivityCreateCommandParser activityCreateCommandParser \u003d new ActivityCreateCommandParser();","lastModifiedDate":"2022-03-24"},{"lineNumber":383,"author":{"gitId":"ivanaitzliddat"},"content":"        try {","lastModifiedDate":"2022-03-24"},{"lineNumber":384,"author":{"gitId":"ivanaitzliddat"},"content":"            Command command \u003d activityCreateCommandParser.getCommand(validArguments);","lastModifiedDate":"2022-03-24"},{"lineNumber":385,"author":{"gitId":"ivanaitzliddat"},"content":"            assertEquals(ActivityCreateCommand.class, command.getClass());","lastModifiedDate":"2022-03-24"},{"lineNumber":386,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (InvalidFormatException e) {","lastModifiedDate":"2022-03-24"},{"lineNumber":387,"author":{"gitId":"ivanaitzliddat"},"content":"            fail();","lastModifiedDate":"2022-03-24"},{"lineNumber":388,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-03-24"},{"lineNumber":389,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-03-24"},{"lineNumber":390,"author":{"gitId":"ivanaitzliddat"},"content":"}","lastModifiedDate":"2022-03-24"}],"authorContributionMap":{"ivanaitzliddat":390}},{"path":"src/test/java/seedu/splitlah/parser/commandparser/HelpCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package seedu.splitlah.parser.commandparser;","lastModifiedDate":"2022-03-23"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-23"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.command.Command;","lastModifiedDate":"2022-03-23"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.command.HelpCommand;","lastModifiedDate":"2022-03-23"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.exceptions.InvalidFormatException;","lastModifiedDate":"2022-03-25"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.parser.Parser;","lastModifiedDate":"2022-03-23"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.parser.ParserUtils;","lastModifiedDate":"2022-03-25"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-23"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2022-03-25"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-23"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"class HelpCommandParserTest {","lastModifiedDate":"2022-03-23"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"    ","lastModifiedDate":"2022-03-23"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"    private static final String COMMAND_TYPE \u003d HelpCommandParser.COMMAND_TEXT;","lastModifiedDate":"2022-03-25"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"    ","lastModifiedDate":"2022-03-25"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-23"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"     * Checks if a HelpCommand object is correctly returned when the command is correctly entered.","lastModifiedDate":"2022-03-23"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-23"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-23"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"    void getCommand_validUserInput_HelpCommand() {","lastModifiedDate":"2022-03-23"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"        String validUserInput \u003d \"help\";","lastModifiedDate":"2022-03-23"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"        String remainingArgs \u003d Parser.getRemainingArgument(validUserInput);","lastModifiedDate":"2022-03-25"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"        String errorMessage \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, remainingArgs);","lastModifiedDate":"2022-03-25"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"        if (!errorMessage.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-23"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"        ","lastModifiedDate":"2022-03-23"},{"lineNumber":29,"author":{"gitId":"warrencxw"},"content":"        HelpCommandParser helpCommandParser \u003d new HelpCommandParser();","lastModifiedDate":"2022-03-25"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-25"},{"lineNumber":31,"author":{"gitId":"warrencxw"},"content":"            Command command \u003d helpCommandParser.getCommand(remainingArgs);","lastModifiedDate":"2022-03-25"},{"lineNumber":32,"author":{"gitId":"warrencxw"},"content":"            assertEquals(HelpCommand.class, command.getClass());","lastModifiedDate":"2022-03-25"},{"lineNumber":33,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-25"},{"lineNumber":34,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":35,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":36,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-23"},{"lineNumber":37,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-03-23"}],"authorContributionMap":{"warrencxw":37}},{"path":"src/test/java/seedu/splitlah/parser/commandparser/SessionCreateCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package seedu.splitlah.parser.commandparser;","lastModifiedDate":"2022-03-25"},{"lineNumber":2,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-25"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.command.Command;","lastModifiedDate":"2022-03-25"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.command.SessionCreateCommand;","lastModifiedDate":"2022-03-25"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.data.Manager;","lastModifiedDate":"2022-03-25"},{"lineNumber":7,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.exceptions.InvalidFormatException;","lastModifiedDate":"2022-03-25"},{"lineNumber":8,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.parser.Parser;","lastModifiedDate":"2022-03-25"},{"lineNumber":9,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.parser.ParserUtils;","lastModifiedDate":"2022-03-25"},{"lineNumber":10,"author":{"gitId":"froststein"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-25"},{"lineNumber":11,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":12,"author":{"gitId":"froststein"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-25"},{"lineNumber":13,"author":{"gitId":"froststein"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2022-03-25"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":"public class SessionCreateCommandParserTest {","lastModifiedDate":"2022-03-25"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":"    private static final String COMMAND_TYPE \u003d SessionCreateCommandParser.COMMAND_TEXT;","lastModifiedDate":"2022-03-25"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":19,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-25"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"     * Checks if a SessionCreateCommand object is correctly returned when the user input is valid.","lastModifiedDate":"2022-03-25"},{"lineNumber":21,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-25"},{"lineNumber":22,"author":{"gitId":"froststein"},"content":"    @Test","lastModifiedDate":"2022-03-25"},{"lineNumber":23,"author":{"gitId":"froststein"},"content":"    public void getCommand_validUserInput_SessionCreateCommand() {","lastModifiedDate":"2022-03-25"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"        // Case 1: Create a session with /pl to indicate people involved in a session.","lastModifiedDate":"2022-03-25"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"        String validUserInputOne \u003d \"session /create /n Class gathering /d 15-02-2022 /pl Alice Bob\";","lastModifiedDate":"2022-03-25"},{"lineNumber":26,"author":{"gitId":"froststein"},"content":"        String validArgumentsOne \u003d Parser.getRemainingArgument(validUserInputOne);","lastModifiedDate":"2022-03-25"},{"lineNumber":27,"author":{"gitId":"froststein"},"content":"        String errorMessageOne \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, validArgumentsOne);","lastModifiedDate":"2022-03-25"},{"lineNumber":28,"author":{"gitId":"froststein"},"content":"        if (!errorMessageOne.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":29,"author":{"gitId":"froststein"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":30,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":31,"author":{"gitId":"froststein"},"content":"        try {","lastModifiedDate":"2022-03-25"},{"lineNumber":32,"author":{"gitId":"froststein"},"content":"            SessionCreateCommandParser sessionCreateCommandParser \u003d new SessionCreateCommandParser();","lastModifiedDate":"2022-03-25"},{"lineNumber":33,"author":{"gitId":"froststein"},"content":"            Command sessionCreateCommand \u003d sessionCreateCommandParser.getCommand(validArgumentsOne);","lastModifiedDate":"2022-03-25"},{"lineNumber":34,"author":{"gitId":"froststein"},"content":"            assertEquals(sessionCreateCommand.getClass(), SessionCreateCommand.class);","lastModifiedDate":"2022-03-25"},{"lineNumber":35,"author":{"gitId":"froststein"},"content":"        } catch (InvalidFormatException invalidFormatException) {","lastModifiedDate":"2022-03-25"},{"lineNumber":36,"author":{"gitId":"froststein"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":37,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":38,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":39,"author":{"gitId":"froststein"},"content":"        // Case 2: Create a session with /gid to indicate people involved in a session.","lastModifiedDate":"2022-03-25"},{"lineNumber":40,"author":{"gitId":"froststein"},"content":"        Manager manager \u003d new Manager();","lastModifiedDate":"2022-03-25"},{"lineNumber":41,"author":{"gitId":"froststein"},"content":"        String groupInput \u003d \"group /create /n Class1 /pl Alice Bob\";","lastModifiedDate":"2022-03-25"},{"lineNumber":42,"author":{"gitId":"froststein"},"content":"        Command createGroup \u003d Parser.getCommand(groupInput);","lastModifiedDate":"2022-03-25"},{"lineNumber":43,"author":{"gitId":"froststein"},"content":"        createGroup.run(manager);","lastModifiedDate":"2022-03-25"},{"lineNumber":44,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":45,"author":{"gitId":"froststein"},"content":"        String validUserInputTwo \u003d \"session /create /n Class gathering /d 15-02-2022 /gid 1\";","lastModifiedDate":"2022-03-25"},{"lineNumber":46,"author":{"gitId":"froststein"},"content":"        String validArgumentsTwo \u003d Parser.getRemainingArgument(validUserInputTwo);","lastModifiedDate":"2022-03-25"},{"lineNumber":47,"author":{"gitId":"froststein"},"content":"        String errorMessageTwo \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, validArgumentsTwo);","lastModifiedDate":"2022-03-25"},{"lineNumber":48,"author":{"gitId":"froststein"},"content":"        if (!errorMessageTwo.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":49,"author":{"gitId":"froststein"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":50,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":51,"author":{"gitId":"froststein"},"content":"        try {","lastModifiedDate":"2022-03-25"},{"lineNumber":52,"author":{"gitId":"froststein"},"content":"            SessionCreateCommandParser sessionCreateCommandParser \u003d new SessionCreateCommandParser();","lastModifiedDate":"2022-03-25"},{"lineNumber":53,"author":{"gitId":"froststein"},"content":"            Command sessionCreateCommand \u003d sessionCreateCommandParser.getCommand(validArgumentsTwo);","lastModifiedDate":"2022-03-25"},{"lineNumber":54,"author":{"gitId":"froststein"},"content":"            sessionCreateCommand.run(manager);","lastModifiedDate":"2022-03-25"},{"lineNumber":55,"author":{"gitId":"froststein"},"content":"            assertEquals(SessionCreateCommand.class, sessionCreateCommand.getClass());","lastModifiedDate":"2022-03-25"},{"lineNumber":56,"author":{"gitId":"froststein"},"content":"        } catch (InvalidFormatException invalidFormatException) {","lastModifiedDate":"2022-03-25"},{"lineNumber":57,"author":{"gitId":"froststein"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":58,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":59,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-25"},{"lineNumber":60,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":61,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-25"},{"lineNumber":62,"author":{"gitId":"froststein"},"content":"     * Checks if an InvalidFormatException with the correct message is thrown","lastModifiedDate":"2022-03-25"},{"lineNumber":63,"author":{"gitId":"froststein"},"content":"     * when missing delimiters are detected in the user input.","lastModifiedDate":"2022-03-25"},{"lineNumber":64,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-25"},{"lineNumber":65,"author":{"gitId":"froststein"},"content":"    @Test","lastModifiedDate":"2022-03-25"},{"lineNumber":66,"author":{"gitId":"froststein"},"content":"    public void getCommand_hasMissingDelimiter_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":67,"author":{"gitId":"froststein"},"content":"        SessionCreateCommandParser sessionCreateCommandParser \u003d new SessionCreateCommandParser();","lastModifiedDate":"2022-03-25"},{"lineNumber":68,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":69,"author":{"gitId":"froststein"},"content":"        // Case 1: Missing /n delimiter.","lastModifiedDate":"2022-03-25"},{"lineNumber":70,"author":{"gitId":"froststein"},"content":"        String inputMissingNameDelimiter \u003d \"session /create /d 15-02-2022 /pl Alice Bob\";","lastModifiedDate":"2022-03-25"},{"lineNumber":71,"author":{"gitId":"froststein"},"content":"        String argsMissingNameDelimiter \u003d Parser.getRemainingArgument(inputMissingNameDelimiter);","lastModifiedDate":"2022-03-25"},{"lineNumber":72,"author":{"gitId":"froststein"},"content":"        String errorNameMessage \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, argsMissingNameDelimiter);","lastModifiedDate":"2022-03-25"},{"lineNumber":73,"author":{"gitId":"froststein"},"content":"        if (!errorNameMessage.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":74,"author":{"gitId":"froststein"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":75,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":76,"author":{"gitId":"froststein"},"content":"        try {","lastModifiedDate":"2022-03-25"},{"lineNumber":77,"author":{"gitId":"froststein"},"content":"            sessionCreateCommandParser.getCommand(argsMissingNameDelimiter);","lastModifiedDate":"2022-03-25"},{"lineNumber":78,"author":{"gitId":"froststein"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":79,"author":{"gitId":"froststein"},"content":"        } catch (InvalidFormatException invalidFormatException) {","lastModifiedDate":"2022-03-25"},{"lineNumber":80,"author":{"gitId":"froststein"},"content":"            String messageToTest \u003d Message.ERROR_PARSER_DELIMITER_NOT_FOUND + \"/n\"","lastModifiedDate":"2022-03-25"},{"lineNumber":81,"author":{"gitId":"froststein"},"content":"                    + \"\\n\" + SessionCreateCommandParser.COMMAND_FORMAT;","lastModifiedDate":"2022-03-25"},{"lineNumber":82,"author":{"gitId":"froststein"},"content":"            assertEquals(messageToTest, invalidFormatException.getMessage());","lastModifiedDate":"2022-03-25"},{"lineNumber":83,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":84,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":85,"author":{"gitId":"froststein"},"content":"        // Case 2: Missing /d delimiter.","lastModifiedDate":"2022-03-25"},{"lineNumber":86,"author":{"gitId":"froststein"},"content":"        String inputMissingDateDelimiter \u003d \"session /create /n Class gathering /pl Alice Bob\";","lastModifiedDate":"2022-03-25"},{"lineNumber":87,"author":{"gitId":"froststein"},"content":"        String argsMissingDateDelimiter \u003d Parser.getRemainingArgument(inputMissingDateDelimiter);","lastModifiedDate":"2022-03-25"},{"lineNumber":88,"author":{"gitId":"froststein"},"content":"        String errorDateMessage \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, argsMissingDateDelimiter);","lastModifiedDate":"2022-03-25"},{"lineNumber":89,"author":{"gitId":"froststein"},"content":"        if (!errorDateMessage.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":90,"author":{"gitId":"froststein"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":91,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":92,"author":{"gitId":"froststein"},"content":"        try {","lastModifiedDate":"2022-03-25"},{"lineNumber":93,"author":{"gitId":"froststein"},"content":"            sessionCreateCommandParser.getCommand(argsMissingDateDelimiter);","lastModifiedDate":"2022-03-25"},{"lineNumber":94,"author":{"gitId":"froststein"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":95,"author":{"gitId":"froststein"},"content":"        } catch (InvalidFormatException invalidFormatException) {","lastModifiedDate":"2022-03-25"},{"lineNumber":96,"author":{"gitId":"froststein"},"content":"            String messageToTest \u003d Message.ERROR_PARSER_DELIMITER_NOT_FOUND + \"/d\"","lastModifiedDate":"2022-03-25"},{"lineNumber":97,"author":{"gitId":"froststein"},"content":"                    + \"\\n\" + SessionCreateCommandParser.COMMAND_FORMAT;","lastModifiedDate":"2022-03-25"},{"lineNumber":98,"author":{"gitId":"froststein"},"content":"            assertEquals(messageToTest, invalidFormatException.getMessage());","lastModifiedDate":"2022-03-25"},{"lineNumber":99,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":100,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-25"},{"lineNumber":101,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":102,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-25"},{"lineNumber":103,"author":{"gitId":"froststein"},"content":"     * Checks if an InvalidFormatException with the correct message is thrown","lastModifiedDate":"2022-03-25"},{"lineNumber":104,"author":{"gitId":"froststein"},"content":"     * when missing arguments are detected in the user input.","lastModifiedDate":"2022-03-25"},{"lineNumber":105,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-25"},{"lineNumber":106,"author":{"gitId":"froststein"},"content":"    @Test","lastModifiedDate":"2022-03-25"},{"lineNumber":107,"author":{"gitId":"froststein"},"content":"    public void getCommand_hasMissingArguments_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":108,"author":{"gitId":"froststein"},"content":"        SessionCreateCommandParser sessionCreateCommandParser \u003d new SessionCreateCommandParser();","lastModifiedDate":"2022-03-25"},{"lineNumber":109,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":110,"author":{"gitId":"froststein"},"content":"        // Case 1: Missing Session name.","lastModifiedDate":"2022-03-25"},{"lineNumber":111,"author":{"gitId":"froststein"},"content":"        String inputMissingNameArgument \u003d \"session /create /n /d 15-02-2022 /pl Alice Bob\";","lastModifiedDate":"2022-03-25"},{"lineNumber":112,"author":{"gitId":"froststein"},"content":"        String argsMissingNameArgument \u003d Parser.getRemainingArgument(inputMissingNameArgument);","lastModifiedDate":"2022-03-25"},{"lineNumber":113,"author":{"gitId":"froststein"},"content":"        String errorNameMessage \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, argsMissingNameArgument);","lastModifiedDate":"2022-03-25"},{"lineNumber":114,"author":{"gitId":"froststein"},"content":"        if (!errorNameMessage.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":115,"author":{"gitId":"froststein"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":116,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":117,"author":{"gitId":"froststein"},"content":"        try {","lastModifiedDate":"2022-03-25"},{"lineNumber":118,"author":{"gitId":"froststein"},"content":"            sessionCreateCommandParser.getCommand(argsMissingNameArgument);","lastModifiedDate":"2022-03-25"},{"lineNumber":119,"author":{"gitId":"froststein"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":120,"author":{"gitId":"froststein"},"content":"        } catch (InvalidFormatException invalidFormatException) {","lastModifiedDate":"2022-03-25"},{"lineNumber":121,"author":{"gitId":"froststein"},"content":"            String messageToTest \u003d Message.ERROR_PARSER_MISSING_ARGUMENT + \"/n\"","lastModifiedDate":"2022-03-25"},{"lineNumber":122,"author":{"gitId":"froststein"},"content":"                    + \"\\n\" + SessionCreateCommandParser.COMMAND_FORMAT;","lastModifiedDate":"2022-03-25"},{"lineNumber":123,"author":{"gitId":"froststein"},"content":"            assertEquals(messageToTest, invalidFormatException.getMessage());","lastModifiedDate":"2022-03-25"},{"lineNumber":124,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":125,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":126,"author":{"gitId":"froststein"},"content":"        // Case 2: Missing Session Date.","lastModifiedDate":"2022-03-25"},{"lineNumber":127,"author":{"gitId":"froststein"},"content":"        String inputMissingDateArgument \u003d \"session /create /n Class gathering /d /pl Alice Bob\";","lastModifiedDate":"2022-03-25"},{"lineNumber":128,"author":{"gitId":"froststein"},"content":"        String argsMissingDateArgument \u003d Parser.getRemainingArgument(inputMissingDateArgument);","lastModifiedDate":"2022-03-25"},{"lineNumber":129,"author":{"gitId":"froststein"},"content":"        String errorDateMessage \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, argsMissingDateArgument);","lastModifiedDate":"2022-03-25"},{"lineNumber":130,"author":{"gitId":"froststein"},"content":"        if (!errorDateMessage.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":131,"author":{"gitId":"froststein"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":132,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":133,"author":{"gitId":"froststein"},"content":"        try {","lastModifiedDate":"2022-03-25"},{"lineNumber":134,"author":{"gitId":"froststein"},"content":"            sessionCreateCommandParser.getCommand(argsMissingDateArgument);","lastModifiedDate":"2022-03-25"},{"lineNumber":135,"author":{"gitId":"froststein"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":136,"author":{"gitId":"froststein"},"content":"        } catch (InvalidFormatException invalidFormatException) {","lastModifiedDate":"2022-03-25"},{"lineNumber":137,"author":{"gitId":"froststein"},"content":"            String messageToTest \u003d Message.ERROR_PARSER_MISSING_ARGUMENT + \"/d\"","lastModifiedDate":"2022-03-25"},{"lineNumber":138,"author":{"gitId":"froststein"},"content":"                    + \"\\n\" + SessionCreateCommandParser.COMMAND_FORMAT;","lastModifiedDate":"2022-03-25"},{"lineNumber":139,"author":{"gitId":"froststein"},"content":"            assertEquals(messageToTest, invalidFormatException.getMessage());","lastModifiedDate":"2022-03-25"},{"lineNumber":140,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":141,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":142,"author":{"gitId":"froststein"},"content":"        // Case 3: Missing List of persons.","lastModifiedDate":"2022-03-25"},{"lineNumber":143,"author":{"gitId":"froststein"},"content":"        String inputMissingPersonListArgument \u003d \"session /create /n Class gathering /d 15-02-2022 /pl\";","lastModifiedDate":"2022-03-25"},{"lineNumber":144,"author":{"gitId":"froststein"},"content":"        String argsMissingPersonListArgument \u003d Parser.getRemainingArgument(inputMissingPersonListArgument);","lastModifiedDate":"2022-03-25"},{"lineNumber":145,"author":{"gitId":"froststein"},"content":"        String errorPersonListMessage \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, argsMissingPersonListArgument);","lastModifiedDate":"2022-03-25"},{"lineNumber":146,"author":{"gitId":"froststein"},"content":"        if (!errorPersonListMessage.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":147,"author":{"gitId":"froststein"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":148,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":149,"author":{"gitId":"froststein"},"content":"        try {","lastModifiedDate":"2022-03-25"},{"lineNumber":150,"author":{"gitId":"froststein"},"content":"            sessionCreateCommandParser.getCommand(argsMissingPersonListArgument);","lastModifiedDate":"2022-03-25"},{"lineNumber":151,"author":{"gitId":"froststein"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":152,"author":{"gitId":"froststein"},"content":"        } catch (InvalidFormatException invalidFormatException) {","lastModifiedDate":"2022-03-25"},{"lineNumber":153,"author":{"gitId":"froststein"},"content":"            String messageToTest \u003d Message.ERROR_PARSER_MISSING_ARGUMENT + \"/pl\"","lastModifiedDate":"2022-03-25"},{"lineNumber":154,"author":{"gitId":"froststein"},"content":"                    + \"\\n\" + SessionCreateCommandParser.COMMAND_FORMAT;","lastModifiedDate":"2022-03-25"},{"lineNumber":155,"author":{"gitId":"froststein"},"content":"            assertEquals(messageToTest, invalidFormatException.getMessage());","lastModifiedDate":"2022-03-25"},{"lineNumber":156,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":157,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":158,"author":{"gitId":"froststein"},"content":"        // Case 4: Missing Group unique identifier.","lastModifiedDate":"2022-03-25"},{"lineNumber":159,"author":{"gitId":"froststein"},"content":"        String inputMissingGidArgument \u003d \"session /create /n Class gathering /d 15-02-2022 /gid\";","lastModifiedDate":"2022-03-25"},{"lineNumber":160,"author":{"gitId":"froststein"},"content":"        String argsMissingGidArgument \u003d Parser.getRemainingArgument(inputMissingGidArgument);","lastModifiedDate":"2022-03-25"},{"lineNumber":161,"author":{"gitId":"froststein"},"content":"        String errorGidMessage \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, argsMissingGidArgument);","lastModifiedDate":"2022-03-25"},{"lineNumber":162,"author":{"gitId":"froststein"},"content":"        if (!errorGidMessage.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":163,"author":{"gitId":"froststein"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":164,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":165,"author":{"gitId":"froststein"},"content":"        try {","lastModifiedDate":"2022-03-25"},{"lineNumber":166,"author":{"gitId":"froststein"},"content":"            sessionCreateCommandParser.getCommand(argsMissingGidArgument);","lastModifiedDate":"2022-03-25"},{"lineNumber":167,"author":{"gitId":"froststein"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":168,"author":{"gitId":"froststein"},"content":"        } catch (InvalidFormatException invalidFormatException) {","lastModifiedDate":"2022-03-25"},{"lineNumber":169,"author":{"gitId":"froststein"},"content":"            String messageToTest \u003d Message.ERROR_PARSER_MISSING_ARGUMENT + \"/gid\"","lastModifiedDate":"2022-03-25"},{"lineNumber":170,"author":{"gitId":"froststein"},"content":"                    + \"\\n\" + SessionCreateCommandParser.COMMAND_FORMAT;","lastModifiedDate":"2022-03-25"},{"lineNumber":171,"author":{"gitId":"froststein"},"content":"            assertEquals(messageToTest, invalidFormatException.getMessage());","lastModifiedDate":"2022-03-25"},{"lineNumber":172,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":173,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-25"},{"lineNumber":174,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":175,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-03-25"},{"lineNumber":176,"author":{"gitId":"froststein"},"content":"     * Checks if an InvalidFormatException with the correct message is thrown","lastModifiedDate":"2022-03-25"},{"lineNumber":177,"author":{"gitId":"froststein"},"content":"     * when missing person list and groupId delimiters are detected in the user input.","lastModifiedDate":"2022-03-25"},{"lineNumber":178,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-03-25"},{"lineNumber":179,"author":{"gitId":"froststein"},"content":"    @Test","lastModifiedDate":"2022-03-25"},{"lineNumber":180,"author":{"gitId":"froststein"},"content":"    public void getCommand_hasMissingPersonListAndGidDelimiter_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":181,"author":{"gitId":"froststein"},"content":"        SessionCreateCommandParser sessionCreateCommandParser \u003d new SessionCreateCommandParser();","lastModifiedDate":"2022-03-25"},{"lineNumber":182,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":183,"author":{"gitId":"froststein"},"content":"        String inputMissingPersonListAndGidDelimiters \u003d \"session /create /n Class gathering /d 15-02-2022\";","lastModifiedDate":"2022-03-25"},{"lineNumber":184,"author":{"gitId":"froststein"},"content":"        String argsWithMissingPersonListAndGidDelimiter \u003d","lastModifiedDate":"2022-03-25"},{"lineNumber":185,"author":{"gitId":"froststein"},"content":"                Parser.getRemainingArgument(inputMissingPersonListAndGidDelimiters);","lastModifiedDate":"2022-03-25"},{"lineNumber":186,"author":{"gitId":"froststein"},"content":"        String errorMessage \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, argsWithMissingPersonListAndGidDelimiter);","lastModifiedDate":"2022-03-25"},{"lineNumber":187,"author":{"gitId":"froststein"},"content":"        if (!errorMessage.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":188,"author":{"gitId":"froststein"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":189,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":190,"author":{"gitId":"froststein"},"content":"        try {","lastModifiedDate":"2022-03-25"},{"lineNumber":191,"author":{"gitId":"froststein"},"content":"            sessionCreateCommandParser.getCommand(argsWithMissingPersonListAndGidDelimiter);","lastModifiedDate":"2022-03-25"},{"lineNumber":192,"author":{"gitId":"froststein"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":193,"author":{"gitId":"froststein"},"content":"        } catch (InvalidFormatException invalidFormatException) {","lastModifiedDate":"2022-03-25"},{"lineNumber":194,"author":{"gitId":"froststein"},"content":"            String messageToTest \u003d Message.ERROR_SESSIONCREATE_MISSING_PERSONLIST_AND_GROUP_DELIMITERS","lastModifiedDate":"2022-03-25"},{"lineNumber":195,"author":{"gitId":"froststein"},"content":"                    + \"\\n\" + SessionCreateCommandParser.COMMAND_FORMAT;","lastModifiedDate":"2022-03-25"},{"lineNumber":196,"author":{"gitId":"froststein"},"content":"            assertEquals(messageToTest, invalidFormatException.getMessage());","lastModifiedDate":"2022-03-25"},{"lineNumber":197,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":198,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-03-25"},{"lineNumber":199,"author":{"gitId":"froststein"},"content":"}","lastModifiedDate":"2022-03-25"}],"authorContributionMap":{"froststein":199}},{"path":"src/test/java/seedu/splitlah/parser/commandparser/SessionSummaryCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package seedu.splitlah.parser.commandparser;","lastModifiedDate":"2022-03-25"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-03-25"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.command.Command;","lastModifiedDate":"2022-03-25"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.command.SessionSummaryCommand;","lastModifiedDate":"2022-03-25"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.exceptions.InvalidFormatException;","lastModifiedDate":"2022-03-25"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.parser.Parser;","lastModifiedDate":"2022-03-25"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.parser.ParserErrors;","lastModifiedDate":"2022-03-25"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.parser.ParserUtils;","lastModifiedDate":"2022-03-25"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":"import seedu.splitlah.ui.Message;","lastModifiedDate":"2022-03-25"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-03-25"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2022-03-25"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"class SessionSummaryCommandParserTest {","lastModifiedDate":"2022-03-25"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"    private static final String COMMAND_TYPE \u003d SessionSummaryCommandParser.COMMAND_TEXT;","lastModifiedDate":"2022-03-25"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-25"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"     * Checks if a SessionSummaryCommand object is correctly returned when the command is correctly entered.","lastModifiedDate":"2022-03-25"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-25"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-25"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"    void getCommand_validUserInput_SessionSummaryCommand() {","lastModifiedDate":"2022-03-25"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"        String validUserInput \u003d \"session /summary /sid 1\";","lastModifiedDate":"2022-03-25"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"        String remainingArgs \u003d Parser.getRemainingArgument(validUserInput);","lastModifiedDate":"2022-03-25"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"        String errorMessage \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, remainingArgs);","lastModifiedDate":"2022-03-25"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"        if (!errorMessage.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":29,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":31,"author":{"gitId":"warrencxw"},"content":"        SessionSummaryCommandParser sessionSummaryCommandParser \u003d new SessionSummaryCommandParser();","lastModifiedDate":"2022-03-25"},{"lineNumber":32,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-25"},{"lineNumber":33,"author":{"gitId":"warrencxw"},"content":"            Command command \u003d sessionSummaryCommandParser.getCommand(remainingArgs);","lastModifiedDate":"2022-03-25"},{"lineNumber":34,"author":{"gitId":"warrencxw"},"content":"            assertEquals(SessionSummaryCommand.class, command.getClass());","lastModifiedDate":"2022-03-25"},{"lineNumber":35,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-25"},{"lineNumber":36,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":37,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":38,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-25"},{"lineNumber":39,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":40,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-25"},{"lineNumber":41,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is thrown","lastModifiedDate":"2022-03-25"},{"lineNumber":42,"author":{"gitId":"warrencxw"},"content":"     * when the Session ID delimiter is not provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":43,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-25"},{"lineNumber":44,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-25"},{"lineNumber":45,"author":{"gitId":"warrencxw"},"content":"    void getCommand_missingSessionIdDelimiter_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":46,"author":{"gitId":"warrencxw"},"content":"        String userInputMissingSessionIdDelimiter \u003d \"session /summary\";","lastModifiedDate":"2022-03-25"},{"lineNumber":47,"author":{"gitId":"warrencxw"},"content":"        String remainingArgs \u003d Parser.getRemainingArgument(userInputMissingSessionIdDelimiter);","lastModifiedDate":"2022-03-25"},{"lineNumber":48,"author":{"gitId":"warrencxw"},"content":"        String errorMessage \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, remainingArgs);","lastModifiedDate":"2022-03-25"},{"lineNumber":49,"author":{"gitId":"warrencxw"},"content":"        if (!errorMessage.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":50,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":51,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":52,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":53,"author":{"gitId":"warrencxw"},"content":"        SessionSummaryCommandParser sessionSummaryCommandParser \u003d new SessionSummaryCommandParser();","lastModifiedDate":"2022-03-25"},{"lineNumber":54,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-25"},{"lineNumber":55,"author":{"gitId":"warrencxw"},"content":"            Command command \u003d sessionSummaryCommandParser.getCommand(remainingArgs);","lastModifiedDate":"2022-03-25"},{"lineNumber":56,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":57,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-25"},{"lineNumber":58,"author":{"gitId":"warrencxw"},"content":"            String exceptionMessage \u003d ParserErrors.getMissingDelimiterErrorMessage(ParserUtils.SESSION_ID_DELIMITER)","lastModifiedDate":"2022-03-25"},{"lineNumber":59,"author":{"gitId":"warrencxw"},"content":"                    + \"\\n\" + SessionSummaryCommandParser.COMMAND_FORMAT;","lastModifiedDate":"2022-03-25"},{"lineNumber":60,"author":{"gitId":"warrencxw"},"content":"            assertEquals(exceptionMessage, exception.getMessage());","lastModifiedDate":"2022-03-25"},{"lineNumber":61,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":62,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-25"},{"lineNumber":63,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":64,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-25"},{"lineNumber":65,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is thrown","lastModifiedDate":"2022-03-25"},{"lineNumber":66,"author":{"gitId":"warrencxw"},"content":"     * when the session unique identifier argument is not provided by the user.","lastModifiedDate":"2022-03-25"},{"lineNumber":67,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-25"},{"lineNumber":68,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-25"},{"lineNumber":69,"author":{"gitId":"warrencxw"},"content":"    void getCommand_missingSessionIdArgument_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":70,"author":{"gitId":"warrencxw"},"content":"        String userInputMissingSessionIdArgument \u003d \"session /summary /sid\";","lastModifiedDate":"2022-03-25"},{"lineNumber":71,"author":{"gitId":"warrencxw"},"content":"        String remainingArgs \u003d Parser.getRemainingArgument(userInputMissingSessionIdArgument);","lastModifiedDate":"2022-03-25"},{"lineNumber":72,"author":{"gitId":"warrencxw"},"content":"        String errorMessage \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, remainingArgs);","lastModifiedDate":"2022-03-25"},{"lineNumber":73,"author":{"gitId":"warrencxw"},"content":"        if (!errorMessage.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":74,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":75,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":76,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":77,"author":{"gitId":"warrencxw"},"content":"        SessionSummaryCommandParser sessionSummaryCommandParser \u003d new SessionSummaryCommandParser();","lastModifiedDate":"2022-03-25"},{"lineNumber":78,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-25"},{"lineNumber":79,"author":{"gitId":"warrencxw"},"content":"            Command command \u003d sessionSummaryCommandParser.getCommand(remainingArgs);","lastModifiedDate":"2022-03-25"},{"lineNumber":80,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":81,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-25"},{"lineNumber":82,"author":{"gitId":"warrencxw"},"content":"            String exceptionMessage \u003d ParserErrors.getMissingArgumentErrorMessage(ParserUtils.SESSION_ID_DELIMITER)","lastModifiedDate":"2022-03-25"},{"lineNumber":83,"author":{"gitId":"warrencxw"},"content":"                    + \"\\n\" + SessionSummaryCommandParser.COMMAND_FORMAT;","lastModifiedDate":"2022-03-25"},{"lineNumber":84,"author":{"gitId":"warrencxw"},"content":"            assertEquals(exceptionMessage, exception.getMessage());","lastModifiedDate":"2022-03-25"},{"lineNumber":85,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":86,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-25"},{"lineNumber":87,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":88,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-25"},{"lineNumber":89,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is thrown","lastModifiedDate":"2022-03-25"},{"lineNumber":90,"author":{"gitId":"warrencxw"},"content":"     * when the session unique identifier argument provided by the user is non-numeric.","lastModifiedDate":"2022-03-25"},{"lineNumber":91,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-25"},{"lineNumber":92,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-25"},{"lineNumber":93,"author":{"gitId":"warrencxw"},"content":"    void getCommand_sessionIdArgumentNonNumeric_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":94,"author":{"gitId":"warrencxw"},"content":"        String userInputSessionIdArgumentNonNumeric \u003d \"session /summary /sid apple\";","lastModifiedDate":"2022-03-25"},{"lineNumber":95,"author":{"gitId":"warrencxw"},"content":"        String remainingArgs \u003d Parser.getRemainingArgument(userInputSessionIdArgumentNonNumeric);","lastModifiedDate":"2022-03-25"},{"lineNumber":96,"author":{"gitId":"warrencxw"},"content":"        String errorMessage \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, remainingArgs);","lastModifiedDate":"2022-03-25"},{"lineNumber":97,"author":{"gitId":"warrencxw"},"content":"        if (!errorMessage.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":98,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":99,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":100,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":101,"author":{"gitId":"warrencxw"},"content":"        SessionSummaryCommandParser sessionSummaryCommandParser \u003d new SessionSummaryCommandParser();","lastModifiedDate":"2022-03-25"},{"lineNumber":102,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-25"},{"lineNumber":103,"author":{"gitId":"warrencxw"},"content":"            Command command \u003d sessionSummaryCommandParser.getCommand(remainingArgs);","lastModifiedDate":"2022-03-25"},{"lineNumber":104,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":105,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-25"},{"lineNumber":106,"author":{"gitId":"warrencxw"},"content":"            String exceptionMessage \u003d ParserErrors.getNonIntegerErrorMessage(ParserUtils.SESSION_ID_DELIMITER)","lastModifiedDate":"2022-03-25"},{"lineNumber":107,"author":{"gitId":"warrencxw"},"content":"                    + \"\\n\" + SessionSummaryCommandParser.COMMAND_FORMAT;","lastModifiedDate":"2022-03-25"},{"lineNumber":108,"author":{"gitId":"warrencxw"},"content":"            assertEquals(exceptionMessage, exception.getMessage());","lastModifiedDate":"2022-03-25"},{"lineNumber":109,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":110,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-25"},{"lineNumber":111,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":112,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-03-25"},{"lineNumber":113,"author":{"gitId":"warrencxw"},"content":"     * Checks if an InvalidFormatException with the correct message is thrown","lastModifiedDate":"2022-03-25"},{"lineNumber":114,"author":{"gitId":"warrencxw"},"content":"     * when the session unique identifier argument provided by the user is not positive.","lastModifiedDate":"2022-03-25"},{"lineNumber":115,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-03-25"},{"lineNumber":116,"author":{"gitId":"warrencxw"},"content":"    @Test","lastModifiedDate":"2022-03-25"},{"lineNumber":117,"author":{"gitId":"warrencxw"},"content":"    void getCommand_sessionIdArgumentNotPositive_InvalidFormatExceptionThrown() {","lastModifiedDate":"2022-03-25"},{"lineNumber":118,"author":{"gitId":"warrencxw"},"content":"        // sessionId \u003d 0","lastModifiedDate":"2022-03-25"},{"lineNumber":119,"author":{"gitId":"warrencxw"},"content":"        String userInputSessionIdArgumentZero \u003d \"session /summary /sid 0\";","lastModifiedDate":"2022-03-25"},{"lineNumber":120,"author":{"gitId":"warrencxw"},"content":"        String remainingArgs \u003d Parser.getRemainingArgument(userInputSessionIdArgumentZero);","lastModifiedDate":"2022-03-25"},{"lineNumber":121,"author":{"gitId":"warrencxw"},"content":"        String errorMessage \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, remainingArgs);","lastModifiedDate":"2022-03-25"},{"lineNumber":122,"author":{"gitId":"warrencxw"},"content":"        if (!errorMessage.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":123,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":124,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":125,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":126,"author":{"gitId":"warrencxw"},"content":"        SessionSummaryCommandParser sessionSummaryCommandParser \u003d new SessionSummaryCommandParser();","lastModifiedDate":"2022-03-25"},{"lineNumber":127,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-25"},{"lineNumber":128,"author":{"gitId":"warrencxw"},"content":"            Command command \u003d sessionSummaryCommandParser.getCommand(remainingArgs);","lastModifiedDate":"2022-03-25"},{"lineNumber":129,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":130,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-25"},{"lineNumber":131,"author":{"gitId":"warrencxw"},"content":"            String exceptionMessage \u003d Message.ERROR_PARSER_ID_VALUE_NOT_POSITIVE","lastModifiedDate":"2022-03-25"},{"lineNumber":132,"author":{"gitId":"warrencxw"},"content":"                    + \"\\n\" + SessionSummaryCommandParser.COMMAND_FORMAT;","lastModifiedDate":"2022-03-25"},{"lineNumber":133,"author":{"gitId":"warrencxw"},"content":"            assertEquals(exceptionMessage, exception.getMessage());","lastModifiedDate":"2022-03-25"},{"lineNumber":134,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":135,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":136,"author":{"gitId":"warrencxw"},"content":"        // sessionId \u003c 0","lastModifiedDate":"2022-03-25"},{"lineNumber":137,"author":{"gitId":"warrencxw"},"content":"        String userInputSessionIdArgumentNegative \u003d \"session /summary /sid -1\";","lastModifiedDate":"2022-03-25"},{"lineNumber":138,"author":{"gitId":"warrencxw"},"content":"        remainingArgs \u003d Parser.getRemainingArgument(userInputSessionIdArgumentNegative);","lastModifiedDate":"2022-03-25"},{"lineNumber":139,"author":{"gitId":"warrencxw"},"content":"        errorMessage \u003d ParserUtils.checkIfCommandIsValid(COMMAND_TYPE, remainingArgs);","lastModifiedDate":"2022-03-25"},{"lineNumber":140,"author":{"gitId":"warrencxw"},"content":"        if (!errorMessage.isEmpty()) {","lastModifiedDate":"2022-03-25"},{"lineNumber":141,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":142,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":143,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-03-25"},{"lineNumber":144,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-03-25"},{"lineNumber":145,"author":{"gitId":"warrencxw"},"content":"            Command command \u003d sessionSummaryCommandParser.getCommand(remainingArgs);","lastModifiedDate":"2022-03-25"},{"lineNumber":146,"author":{"gitId":"warrencxw"},"content":"            fail();","lastModifiedDate":"2022-03-25"},{"lineNumber":147,"author":{"gitId":"warrencxw"},"content":"        } catch (InvalidFormatException exception) {","lastModifiedDate":"2022-03-25"},{"lineNumber":148,"author":{"gitId":"warrencxw"},"content":"            String exceptionMessage \u003d Message.ERROR_PARSER_ID_VALUE_NOT_POSITIVE","lastModifiedDate":"2022-03-25"},{"lineNumber":149,"author":{"gitId":"warrencxw"},"content":"                    + \"\\n\" + SessionSummaryCommandParser.COMMAND_FORMAT;","lastModifiedDate":"2022-03-25"},{"lineNumber":150,"author":{"gitId":"warrencxw"},"content":"            assertEquals(exceptionMessage, exception.getMessage());","lastModifiedDate":"2022-03-25"},{"lineNumber":151,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-03-25"},{"lineNumber":152,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-03-25"},{"lineNumber":153,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-03-25"}],"authorContributionMap":{"warrencxw":153}},{"path":"text-ui-test/runtest.sh","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# change to script directory","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"cd \"${0%/*}\"","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"cd ..","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"./gradlew clean shadowJar","lastModifiedDate":"2020-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"cd text-ui-test","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"matheril"},"content":"java  -jar $(find ../build/libs -mindepth 1 -print -quit) \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2022-03-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"dos2unix EXPECTED-UNIX.TXT ACTUAL.TXT","lastModifiedDate":"2022-03-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"diff EXPECTED-UNIX.TXT ACTUAL.TXT","lastModifiedDate":"2020-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"Test passed!\"","lastModifiedDate":"2020-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    echo \"Test failed!\"","lastModifiedDate":"2020-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":22,"matheril":1}}]
